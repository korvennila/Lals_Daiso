import * as Msdyn365 from '@msdyn365-commerce/core';
import { getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import SignInButtonComponent from './components/custom-sign-in-button';
import SignInDescriptionComponent from './components/custom-sign-in-description';
import SignInErrorComponent from './components/custom-sign-in-error';
import SignInInputComponent from './components/custom-sign-in-input';
import SignInLabelComponent from './components/custom-sign-in-label';
import SignInLinkComponent from './components/custom-sign-in-link';
import SignInLoadingIconComponent from './components/custom-sign-in-loading-icon';
import SignInLoadingMessageComponent from './components/custom-sign-in-loading-message';
import SignInTextComponent from './components/custom-sign-in-text';
import { ICustomSignInConfig, ICustomSignInProps, ICustomSignInResources } from './custom-sign-in.props.autogenerated';

export interface ISignInViewState {
    isShowLoading: boolean;
}

export interface ISignInItem {
    wrapper: INodeProps;
    key: string;
    label: React.ReactNode;
    error: React.ReactNode;
    input: React.ReactNode;
}

export interface ISignInSocialItem {
    key: string;
    button: INodeProps;
    image: React.ReactNode;
    text: React.ReactNode;
}

export interface ISignInB2BItem {
    key: string;
    button: INodeProps;
    text: React.ReactNode;
}

export interface ISignInSocialAccount {
    socialAccounts: INodeProps;
    items: ISignInSocialItem[];
}

export interface ISignInB2BAccount {
    socialAccounts: INodeProps;
    items: ISignInB2BItem[];
}
export interface ISignInLocalAccount {
    localAccount: INodeProps;
    items: ISignInItem[];
    forgetPassword: React.ReactNode;
    disclaimer: React.ReactNode;
    error: React.ReactNode;
    signInButton: React.ReactNode;
}

export interface ISignInLoading {
    modal: INodeProps;
    modalBody: INodeProps;
    icon: React.ReactNode;
    message: React.ReactNode;
}

export interface ISignInViewProps {
    className: string;
    viewState: ISignInViewState;
    signIn: IModuleProps;
    loading: ISignInLoading;
    defaultAADConainer: INodeProps;
    aadConainer: INodeProps;
    signInSection: INodeProps;
    signInSectionHeading: React.ReactNode;
    signInLocalAccount: ISignInLocalAccount;
    signInSocialAccount: ISignInSocialAccount;
    signInB2BAccount: ISignInB2BAccount;
    signUpSection: INodeProps;
    signUpSectionHeading: React.ReactNode;
    signUpDescription: React.ReactNode;
    signUpLink: React.ReactNode;
}

/**
 * SignIn component
 * All AAD related module is rendered on AAD page and we need to respect HTML contract provide by AAD.
 * Please ensure any change in module don't break contract with AAD.
 * @extends {React.Component<ICustomSignInProps<ISignInData>>}
 */
@observer
class SignIn extends React.Component<ICustomSignInProps<ICustomSignInConfig>> {
    private readonly moduleClassName: string = 'ms-sign-in';

    private readonly telemetryContent?: ITelemetryContent;

    @observable private emailOrPhoneId: string;

    @observable private emailOrPhoneRegex: string;

    @observable private isInitialized: boolean;

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    private initializationTimer: any;

    constructor(props: ICustomSignInProps<ICustomSignInConfig>) {
        super(props);
        // Update the regex to match both email and phone numbers
        this.emailOrPhoneRegex = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$|^[0-9]{10}$';
        this.isInitialized = false;
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this.emailOrPhoneId = 'logonIdentifier';
    }

    public componentDidMount(): void {
        this._prePopulateData();
        this._onInit();
    }

    // After successful AAD initialization, call initialize method provided by AAD to attach events.
    public componentDidUpdate(): void {
        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
            window['$element']['initialize']();
        }
    }

    public shouldComponentUpdate(nextProps: ICustomSignInProps<ICustomSignInConfig>, nextState: ISignInViewState): boolean {
        if (this.state === nextState && this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element {
        const config: ICustomSignInConfig = this.props.config || {};
        const resources: ICustomSignInResources = this.props.resources || {};

        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            signIn: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: <SignInLoadingIconComponent className={this.moduleClassName} />,
                message: <SignInLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            signInSection: {
                className: `${this.moduleClassName}__sign-in-section`
            },
            signInSectionHeading: (
                <Msdyn365.Text
                    className={`${this.moduleClassName}__sign-in-heading`}
                    {...config.signInHeading}
                    editProps={{ onEdit: this.handleSignInHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            signInLocalAccount: {
                localAccount: {
                    className: `${this.moduleClassName}__account-items localAccount`
                },
                items: [
                    this._renderInput(
                        this.emailOrPhoneId,
                        'text',
                        resources.emailOrPhoneLabelText,
                        resources.emailOrPhoneAriaLabel,
                        this.emailOrPhoneRegex
                    ),
                    this._renderInput('password', 'password', resources.passwordLabelText)
                ],
                forgetPassword: (
                    <SignInLinkComponent
                        id='forgotPassword'
                        className={`${this.moduleClassName}__forget-password`}
                        href='#'
                        ariaLabel={resources.forgotPasswordButtonAriaLabel}
                        text={resources.forgotPasswordButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                ),
                disclaimer: config.signInDisclaimer && (
                    <Msdyn365.RichTextComponent
                        className={`${this.moduleClassName}__sign-in-disclaimer`}
                        text={config.signInDisclaimer}
                        editProps={{ onEdit: this.handleParagraphChange, requestContext: this.props.context.request }}
                    />
                ),
                error: <SignInErrorComponent className={this.moduleClassName} />,
                signInButton: (
                    <SignInButtonComponent
                        id='next'
                        className={`${this.moduleClassName}__sign-in-button`}
                        ariaLabel={resources.loginButtonAriaLabel}
                        text={resources.loginButtonText}
                        telemetryContent={this.telemetryContent}
                    />
                )
            },
            signInSocialAccount: {
                socialAccounts: {
                    className: `${this.moduleClassName}__social-accounts`
                },
                items: [
                    this._renderSocialAccount(
                        'FacebookExchange',
                        resources.facebookButtonText,
                        resources.facebookButtonAriaLabel,
                        config.facebookIcon
                    ),
                    this._renderSocialAccount(
                        'GoogleExchange',
                        resources.googleButtonText,
                        resources.googleButtonAriaLabel,
                        config.googleIcon
                    )
                    // this._renderSocialAccount(
                    //     'MicrosoftAccountExchange',
                    //     resources.microsoftButtonText,
                    //     resources.microsoftButtonAriaLabel,
                    //     config.microsoftIcon
                    // )
                ]
            },
            signInB2BAccount: {
                socialAccounts: {
                    className: `${this.moduleClassName}__b2b-social-accounts`
                },
                items: [
                    this._renderB2BSocialAccount(
                        'StoreManagerB2BSignin',
                        resources.b2bButtonText,
                        resources.b2bButtonAriaLabel,
                        config.displayB2bAccountManagerSignin
                    )
                ]
            },
            signUpSection: {
                className: `${this.moduleClassName}__sign-up-section`
            },
            signUpSectionHeading: (
                <Msdyn365.Text
                    className={`${this.moduleClassName}__sign-up-heading`}
                    {...config.signUpHeading}
                    editProps={{ onEdit: this.handleSignUpHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            signUpDescription: (
                <SignInDescriptionComponent
                    className={`${this.moduleClassName}__sign-up-description`}
                    description={resources.signUpDescriptionText}
                />
            ),
            signUpLink: (
                <SignInLinkComponent
                    id='createAccount'
                    href='#'
                    className={`${this.moduleClassName}__sign-up-link msc-btn`}
                    ariaLabel={resources.signUpButtonAriaLabel}
                    text={resources.signUpButtonText}
                    telemetryContent={this.telemetryContent}
                />
            )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleParagraphChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.signInDisclaimer = event.target.value);

    public handleSignInHeadingChange = (event: Msdyn365.ContentEditableEvent) =>
        (this.props.config.signInHeading.text = event.target.value);

    public handleSignUpHeadingChange = (event: Msdyn365.ContentEditableEvent) =>
        (this.props.config.signUpHeading.text = event.target.value);

    private readonly _onInit = () => {
        this._prePopulateData();
        this._updateErrorMessage();

        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.
        this.initializationTimer = setInterval(() => {
            this._isInitializationSuccessful();
        }, 100);
        setTimeout(() => {
            clearInterval(this.initializationTimer);
        }, 10_000);
    };

    // After successful AAD initialization, remove waiting and preload any data, if needed.
    private readonly _isInitializationSuccessful = () => {
        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
            clearInterval(this.initializationTimer);
            this.isInitialized = true;
        }
    };

    private readonly _prePopulateData = () => {
        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (window && window['CONTENT'] && window['CONTENT']['email_pattern']) {
            // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
            this.emailOrPhoneRegex = window['CONTENT']['email_pattern'];
        }

        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            // @ts-expect-error
            this.emailOrPhoneId = (window.SA_FIELDS.AttributeFields || [])[0].ID || this.emailOrPhoneId;
        }
    };

    private readonly _updateErrorMessage = () => {
        const resources: ICustomSignInResources = this.props.resources || {};

        // eslint-disable-next-line @typescript-eslint/dot-notation -- Auto-suppressed.
        if (window && window['CONTENT']) {
            const errorMessages = {
                requiredField_email: resources.requriedEmailError,
                requiredField_password: resources.requriedPasswordError,
                invalid_email: resources.invalidEmailError,
                invalid_phone: resources.invalidPhoneError,
                invalid_password: resources.invalidPasswordError,
                unknown_error: resources.unknownError
            };

            // eslint-disable-next-line @typescript-eslint/dot-notation -- Auto-suppressed.
            Object.assign(window['CONTENT'], errorMessages);
        }
    };

    private _renderInput(id: string, type: string, labelText: string, ariaLabel?: string, pattern?: string): ISignInItem {
        const className = `${this.moduleClassName}__account-item`;
        return {
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry')
            },
            key: id,
            label: (
                <SignInLabelComponent
                    {...{
                        id,
                        forId: id,
                        className,
                        text: labelText
                    }}
                />
            ),
            error: (
                <SignInErrorComponent
                    {...{
                        className: this.moduleClassName,
                        type: 'item'
                    }}
                />
            ),
            input: (
                <SignInInputComponent
                    {...{
                        id,
                        type,
                        pattern,
                        className,
                        ariaLabel
                    }}
                />
            )
        };
    }

    private _renderSocialAccount(id: string, text: string, ariaLabel: string, iconImage?: Msdyn365.IImageData): ISignInSocialItem {
        return {
            key: id,
            button: {
                id,
                tag: 'button',
                className: classnames(
                    `${this.moduleClassName}__social-account`,
                    `${this.moduleClassName}__social-account-${id}`,
                    'accountButton',
                    'msc-btn'
                ),
                'aria-label': ariaLabel
            },
            image: this._createImageMarkup(iconImage),
            text: <SignInTextComponent className={`${this.moduleClassName}__social-account-text`} text={text} />
        };
    }

    private _renderB2BSocialAccount(
        id: string,
        text: string,
        ariaLabel: string,
        _displayB2bAccountManagerSignin: boolean | undefined
    ): ISignInB2BItem | null {
        if (_displayB2bAccountManagerSignin) {
            return {
                key: id,
                button: {
                    id,
                    tag: 'button',
                    className: classnames(
                        `${this.moduleClassName}__social-account`,
                        `${this.moduleClassName}__social-account-${id}`,
                        'accountButton',
                        'msc-btn'
                    ),
                    'aria-label': ariaLabel
                },
                text: <SignInTextComponent className={`${this.moduleClassName}__social-account-text`} text={text} />
            };
        }
        return null;
    }

    private _createImageMarkup(iconImage?: Msdyn365.IImageData): React.ReactNode | null {
        if (iconImage) {
            const imageProps = {
                gridSettings: this.props.context.request.gridSettings || {},
                imageSettings: iconImage && iconImage.imageSettings
            };
            const pictureClassName = `${this.moduleClassName}__social-account-picture`;
            return (
                <div className={pictureClassName}>
                    <Msdyn365.Image
                        className={`${pictureClassName}__image`}
                        {...iconImage}
                        {...imageProps}
                        requestContext={this.props.context.request}
                        editProps={{ key: iconImage || {}, requestContext: this.props.context.request }}
                        shouldSkipToMainImage
                    />
                </div>
            );
        }
        return null;
    }
}

export default SignIn;
