/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { OrderDetailsProduct } from '@msdyn365-commerce/components';
import Msdyn365, { ContentEditableEvent, getUrlSync, isChannelTypeB2B, Text, isUserTypeB2B } from '@msdyn365-commerce/core';
import {
    ChannelDeliveryOptionConfiguration,
    FeatureState,
    LoyaltyRewardPoint,
    OrderOriginator,
    ProductCatalog,
    ProductDeliveryOptions,
    SalesLine,
    SalesOrder,
    SimpleProduct
} from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import { ArrayExtensions } from '@msdyn365-commerce-modules/retail-actions';
import { Button, getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import classname from 'classnames';
import get from 'lodash/get';
import { computed, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import {
    BuySelectedComponent,
    IGetOrderSummaryInput,
    IHelp,
    IOrderSummary,
    IPaymentMethods,
    IPaymentMethodsInput
} from '@msdyn365-commerce-modules/order-management';
import { getGroups, IGroups } from '@msdyn365-commerce-modules/order-management';
import { getOrderInformation, getOrderInformationInput, IOrderInformation } from '@msdyn365-commerce-modules/order-management';
import { ISalesLine } from '@msdyn365-commerce-modules/order-management';
import { getSalesLines, getSalesLinesInput } from '@msdyn365-commerce-modules/order-management';
import { Label } from '@msdyn365-commerce-modules/order-management';
import { getTenderIdOperationIdMap, IPriceContext } from '@msdyn365-commerce-modules/order-management';
import { getOrderDetailsHelp } from './components/get-help';
import { getOrderDetailsOrderSummary } from './components/get-order-summary';
import { getOrderDetailsPaymentMethods } from './components/get-payment-methods';
import { OrderDetailsTableComponent } from './components/table-view';
import { ICustomOrderDetailsData } from './custom-order-details.data';
import { addressOptions, ICustomOrderDetailsProps } from './custom-order-details.props.autogenerated';

/**
 * Specifies different layouts for order details.
 */
export enum OrderDetailsViewMode {
    listView = 0,
    detailedView = 1
}

export interface IOrderDetailsViewProps extends ICustomOrderDetailsProps<ICustomOrderDetailsData> {
    moduleProps: IModuleProps;
    tableViewActions?: React.ReactNode;
    viewModes?: React.ReactNode;
    table?: React.ReactNode;
    salesOrder?: SalesOrder;
    footerProps?: INodeProps;
    alert?: React.ReactNode;
    loading?: React.ReactNode;
    heading: React.ReactNode;
    placedBy?: React.ReactNode;
    backToShoppingLink?: React.ReactNode;
    orderInfomation?: IOrderInformation;
    salesLines?: ISalesLine[];
    groups?: IGroups;
    orderSummary?: IOrderSummary;
    payment?: IPaymentMethods;
    help?: IHelp;
    catalogs?: ProductCatalog[];
}

/**
 *
 * OrderDetails component.
 * @extends {React.PureComponent<ICustomOrderDetailsProps<ICustomOrderDetailsData>>}
 */
@observer
class OrderDetails extends React.PureComponent<ICustomOrderDetailsProps<ICustomOrderDetailsData>> {
    @observable private _viewMode: OrderDetailsViewMode;

    @observable private _products: OrderDetailsProduct[];

    @observable private _isSelectionModeEnabled: boolean;

    private readonly moduleName: string = 'ms-order-details';

    private readonly multiplePickupStoreSwitchName: string = 'Dynamics.AX.Application.RetailMultiplePickupDeliveryModeFeature';

    private readonly telemetryContent: ITelemetryContent;

    @computed get isCurrentChannel(): boolean {
        if (!this.order) {
            return false;
        }
        return this.order.ChannelId === get(this.props, 'context.request.apiSettings.channelId');
    }

    @computed get isDataReady(): boolean {
        return get(this.props, 'data.orderHydration.status') === 'SUCCESS';
    }

    @computed get hasError(): boolean {
        return get(this.props, 'data.orderHydration.status') === 'FAILED';
    }

    @computed get order(): SalesOrder | undefined {
        return get(this.props, 'data.orderHydration.result.salesOrder');
    }

    @computed get products(): SimpleProduct[] {
        return get(this.props, 'data.orderHydration.result.products') || [];
    }

    @computed get deliveryOptions(): ProductDeliveryOptions[] {
        return get(this.props, 'data.orderHydration.result.deliveryOptions') || [];
    }

    @computed get priceContext(): IPriceContext {
        const {
            id,
            typeName,
            context,
            telemetry,
            resources: { freePriceText }
        } = this.props;
        return {
            id,
            typeName,
            context,
            telemetry,
            freePriceText
        };
    }

    @computed get earnedPoints(): number {
        const loyaltyCard = this.props.data.loyaltyCard.result;
        if (loyaltyCard && loyaltyCard.RewardPoints && this.order) {
            const pointPrograms = new Set(loyaltyCard.RewardPoints.map((point: LoyaltyRewardPoint) => point.RewardPointId));
            const rewardLines = this.order.LoyaltyRewardPointLines || [];
            let total = 0;
            rewardLines.forEach(line => {
                if ((line.RewardPointAmountQuantity || 0) > 0 && pointPrograms.has(line.RewardPointId)) {
                    total += line.RewardPointAmountQuantity!;
                }
            });
            return total;
        }
        return 0;
    }

    @computed get orderSummaryProps(): IGetOrderSummaryInput | undefined {
        if (!this.order) {
            return;
        }
        const { request } = this.props.context;
        const { channelDeliveryOptionConfig, featureState } = this.props?.data;
        const isMultiplePickUpOptionEnabled = featureState?.result?.find(
            (item: FeatureState) => item.Name === this.multiplePickupStoreSwitchName
        )?.IsEnabled;
        const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
        const emailDeliveryModeCode = request && request.channel && request.channel.EmailDeliveryModeCode;
        const orderDetailsLines = this.order?.SalesLines;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- app configs are of generic type
        const isShowOrHideTaxEnabled = request.app.config.isEnableShowOrHideSalesTaxECommerceEnabled === true;

        const { salesId = '' } = request.query || {};
        const isCashAndCarryTransaction =
            (this.order.ChannelReferenceId === undefined || this.order.ChannelReferenceId === '') && salesId === '';

        const canShip =
            !isCashAndCarryTransaction &&
            orderDetailsLines?.some(orderDetailsLine =>
                orderDetailsLine.DeliveryMode && orderDetailsLine.DeliveryMode !== ''
                    ? orderDetailsLine.DeliveryMode !==
                          this.getDeliveryMode(
                              orderDetailsLine,
                              isMultiplePickUpOptionEnabled,
                              channelDeliveryOptionConfig?.result,
                              pickupDeliveryModeCode
                          ) && orderDetailsLine.DeliveryMode !== emailDeliveryModeCode
                    : orderDetailsLine
            );

        const {
            resources: {
                orderSummaryHeading,
                orderSummaryItemsTotalLabel,
                orderSummaryShippingFeeLabel,
                orderSummaryTaxLabel,
                orderSummaryGrandTotalLabel,
                pointsEarnedLabel
            }
        } = this.props;
        return {
            order: this.order,
            earnedPoints: this.earnedPoints,
            priceContext: this.priceContext,
            resource: {
                orderSummaryHeading,
                orderSummaryItemsTotalLabel,
                orderSummaryShippingFeeLabel,
                orderSummaryTaxLabel,
                pointsEarnedLabel,
                orderSummaryGrandTotalLabel
            },
            canShip,
            isTaxIncludedInPrice: this.order.IsTaxIncludedInPrice,
            isShowTaxBreakUp: isShowOrHideTaxEnabled
        };
    }

    @computed get paymentMethodsProps(): IPaymentMethodsInput | undefined {
        const tenderTypes = this.props.data.tenderTypes.result;
        if (!this.order || !this.order.TenderLines || !tenderTypes) {
            return;
        }

        const locale = get(this.props, 'context.request.locale') || 'en-US';

        const {
            resources: {
                paymentMethodsTitle,
                creditCardEndingLabel,
                giftCardEndingLabel,
                amountCoveredLabel,
                cashUsedLabel,
                loyaltyCardUsedLabel,
                customerAccountUsedLabel
            }
        } = this.props;

        return {
            priceContext: this.priceContext,
            tenderLines: this.order.TenderLines,
            tenderIdOperationIdMap: getTenderIdOperationIdMap(tenderTypes),
            locale,
            resource: {
                paymentMethodsTitle,
                creditCardEndingLabel,
                giftCardEndingLabel,
                amountCoveredLabel,
                cashUsedLabel,
                loyaltyCardUsedLabel,
                customerAccountUsedLabel
            },
            priceCurrency: this.order.CurrencyCode
        };
    }

    @computed
    private get _orderDetailsProducts(): OrderDetailsProduct[] {
        if (!ArrayExtensions.hasElements(this._products)) {
            this._initProductsModel();
        }

        return this._products;
    }

    @computed
    private get _orderDetailsAvailableProducts(): OrderDetailsProduct[] {
        if (!ArrayExtensions.hasElements(this._products)) {
            this._initProductsModel();
        }

        return this._products.filter(product => product.isProductAvailable);
    }

    @computed
    private get _selectedProducts(): OrderDetailsProduct[] {
        const products = this._orderDetailsAvailableProducts;
        const selectedProducts = products.filter(product => product.isSelected);
        if (!ArrayExtensions.hasElements(selectedProducts)) {
            return [];
        }

        return selectedProducts;
    }

    public constructor(props: ICustomOrderDetailsProps<ICustomOrderDetailsData>) {
        super(props);
        this._viewMode = OrderDetailsViewMode.detailedView;
        this._products = [];
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this._isSelectionModeEnabled = false;
    }

    public render(): JSX.Element {
        const {
            resources: { noSalesOrderDetailsText, loadingLabel },
            config: { shouldShowQrCode, showChannelInfo, showTimeslot, isReorderingEnabled }
        } = this.props;

        const showFullAddress =
            this.props.config.addressOptions !== undefined &&
            this.props.config.addressOptions === addressOptions.showAddressWithMultiplelines;
        const channelIdentities = this.props.data.channels.result?.channelIdentities;
        const orgUnitLocations = this.props.data.orgUnitLocations.result?.orgUnitLocations;
        const customer = this.props.data.customerInformation && this.props.data.customerInformation.result;
        const originators = this.props.data.orderOriginators && this.props.data.orderOriginators.result;
        const originator: OrderOriginator | undefined = originators && originators.length === 1 ? originators[0] : undefined;
        const channelMultipleCatalogsFeature = 'Dynamics.AX.Application.ChannelMultipleCatalogsFeature';
        const { channelDeliveryOptionConfig, featureState } = this.props.data;
        const isMultiplePickUpOptionEnabled = featureState.result?.find(
            (item: FeatureState) => item.Name === this.multiplePickupStoreSwitchName
        )?.IsEnabled;
        const isMultipleCatalogsFeatureEnabled = featureState.result?.find(
            (item: FeatureState) => item.Name === channelMultipleCatalogsFeature
        )?.IsEnabled;
        const { confirmationId = '', salesId = '', transactionId = '' } = this.props.context.actionContext.requestContext.query ?? {};

        const orderInformationInput =
            this.order &&
            getOrderInformationInput(
                this.props,
                this.moduleName,
                this.order,
                this.priceContext,
                channelIdentities,
                orgUnitLocations,
                customer,
                originator,
                showChannelInfo,
                false,
                shouldShowQrCode ?? true
            );

        const orderInformation =
            this._isSelectionModeEnabled || !orderInformationInput ? undefined : getOrderInformation(orderInformationInput);

        let viewProps: IOrderDetailsViewProps = this.getOrderDetailsProps();
        if (isUserTypeB2B(this.props.context.request) && orderInformationInput?.isOnlineStore && originator) {
            viewProps = {
                ...viewProps,
                placedBy: orderInformation?.placedBy
            };
        }

        if ((salesId || transactionId) && !this.props.context.actionContext.requestContext.user.isAuthenticated) {
            const signInUrl: string = this.props.context.actionContext.requestContext.user.signInUrl ?? '';
            if (Msdyn365.isBrowser) {
                window.location.assign(signInUrl);
            }

            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (this.hasError || !this.order) {
            if (((salesId || transactionId) && this.props.context.actionContext.requestContext.user.isAuthenticated) || confirmationId) {
                viewProps = {
                    ...viewProps,
                    alert: <Label className='ms-order-details__alert' label={noSalesOrderDetailsText} />
                };
            }

            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!this.isDataReady) {
            viewProps = {
                ...viewProps,
                loading: <Label className='ms-order-details__loading' label={loadingLabel} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }
        const isEnabled = isReorderingEnabled && this.props.data.orderHydration.result?.isSameSiteType;

        const isCatalogFetaure = isMultipleCatalogsFeatureEnabled && isChannelTypeB2B(this.props.context.actionContext.requestContext);
        const salesLinesInput = getSalesLinesInput(
            this.props,
            this.moduleName,
            this.order,
            this.products,
            this.priceContext,
            showFullAddress,
            showTimeslot,
            this.telemetryContent,
            isMultiplePickUpOptionEnabled,
            channelDeliveryOptionConfig.result,
            this.deliveryOptions,
            this._isSelectionModeEnabled,
            this._orderDetailsProducts,
            isEnabled,
            isCatalogFetaure,
            this.props.data.catalogs?.result
        );
        const salesLines = salesLinesInput && getSalesLines(salesLinesInput);
        viewProps = {
            ...viewProps,
            salesOrder: this.order,
            orderInfomation: orderInformation,
            tableViewActions: this._renderTableViewActions(),
            viewModes: this._renderViewModes(),
            salesLines,
            table: this._renderOrderDetailsTable(),
            groups: this._renderOrderGroups(salesLines, isMultiplePickUpOptionEnabled),
            orderSummary: this._renderOrderSummary(),
            payment: this._renderOrderPayment(),
            help: this._renderOrderHelp()
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleOrderDetailsHeadingChange = (event: ContentEditableEvent) => (this.props.config.heading!.text = event.target.value);

    /**
     * Updates view mode to be list view.
     */
    private readonly _setListViewMode = () => {
        this._viewMode = OrderDetailsViewMode.listView;
    };

    /**
     * Updates view mode to be detailed view.
     */
    private readonly _setDetailedViewMode = () => {
        this._viewMode = OrderDetailsViewMode.detailedView;
    };

    /**
     * Renders order groups for order details.
     * @param salesLines - Sale lines.
     * @param isRetailMultiplePickUpOptionEnabled - Flag which specifies pick up options.
     * @returns A react node or undefined.
     */
    private readonly _renderOrderGroups = (
        salesLines: ISalesLine[] | undefined,
        isRetailMultiplePickUpOptionEnabled: boolean | undefined
    ) => {
        if (!salesLines || this._viewMode !== OrderDetailsViewMode.detailedView) {
            return undefined;
        }

        const { salesId = '' } = this.props.context.request.query ?? {};
        const shouldShowAddress =
            (this.props.config.addressOptions !== undefined &&
                this.props.config.addressOptions === addressOptions.showAddressWithSingleLine) ||
            this.props.config.addressOptions === addressOptions.showAddressWithMultiplelines;
        const isCashAndCarryTransaction =
            (this.order!.ChannelReferenceId === undefined || this.order!.ChannelReferenceId === '') && salesId === '';
        return getGroups({
            moduleName: this.moduleName,
            salesLines,
            resources: {
                orderItemLabel: this.props.resources.orderItemLabel,
                orderItemsLabel: this.props.resources.orderItemsLabel
            },
            showAddress: shouldShowAddress,
            showTimeslot: this.props.config.showTimeslot,
            retailMultiplePickUpOptionEnabled: isRetailMultiplePickUpOptionEnabled,
            isCashAndCarryTransaction,
            isSelectionModeEnabled: this._isSelectionModeEnabled && !this.props.data.orderHydration.result?.isSameSiteType
        });
    };

    /**
     * Renders order summary for order details.
     * @returns A react node or undefined.
     */
    private readonly _renderOrderSummary = () => {
        if (this.orderSummaryProps && this._viewMode === OrderDetailsViewMode.detailedView) {
            return getOrderDetailsOrderSummary(this.orderSummaryProps);
        }
        return undefined;
    };

    /**
     * Renders order payment info for order details.
     * @returns A react node or undefined.
     */
    private readonly _renderOrderPayment = () => {
        if (this.paymentMethodsProps && this._viewMode === OrderDetailsViewMode.detailedView) {
            return getOrderDetailsPaymentMethods(this.paymentMethodsProps);
        }
        return undefined;
    };

    /**
     * Renders order help info for order details.
     * @returns A react node or undefined.
     */
    private readonly _renderOrderHelp = () => {
        const {
            resources: { needHelpLabel, helpLineNumberLabel, helpLineContactAriaLabel },
            config: { contactNumber }
        } = this.props;

        if (contactNumber && this._viewMode === OrderDetailsViewMode.detailedView) {
            return getOrderDetailsHelp({
                needHelpLabel,
                helpLineNumberLabel,
                contactNumber,
                helpLineContactAriaLabel,
                telemetryContent: this.telemetryContent
            });
        }

        return undefined;
    };

    /**
     * Renders order details table view.
     * @returns A react node or undefined.
     */
    private readonly _renderOrderDetailsTable = () => {
        if (this._viewMode !== OrderDetailsViewMode.listView) {
            return undefined;
        }

        const { featureState } = this.props.data;
        const channelMultipleCatalogsFeature = 'Dynamics.AX.Application.ChannelMultipleCatalogsFeature';
        const isMultiplePickUpOptionEnabled = featureState.result?.find(
            (item: FeatureState) => item.Name === this.multiplePickupStoreSwitchName
        )?.IsEnabled;
        const isMultipleCatalogsFeatureEnabled = featureState.result?.find(
            (item: FeatureState) => item.Name === channelMultipleCatalogsFeature
        )?.IsEnabled;
        const { salesId = '' } = this.props.context.request.query ?? {};
        const isCashAndCarryTransaction =
            (this.order!.ChannelReferenceId === undefined || this.order!.ChannelReferenceId === '') && salesId === '';
        const enableBuyAgain =
            this.props.data.orderHydration.result?.isSameSiteType === undefined
                ? true
                : this.props.data.orderHydration.result?.isSameSiteType;
        return (
            this.order && (
                <OrderDetailsTableComponent
                    id={this.props.id}
                    typeName={this.props.typeName}
                    context={this.props.context}
                    className='ms-order-details__table-list'
                    imageSettings={this.props.config.imageSettings}
                    isReorderingEnabled={this.props.config.isReorderingEnabled && enableBuyAgain}
                    isRetailMultiplePickUpOptionEnabled={isMultiplePickUpOptionEnabled}
                    isSelectionModeEnabled={this._isSelectionModeEnabled}
                    isCashAndCarryTransaction={isCashAndCarryTransaction}
                    data={{
                        order: this.order,
                        products: this._orderDetailsProducts,
                        deliveryOptions: this.deliveryOptions,
                        channelDeliveryOptionConfig: this.props.data.channelDeliveryOptionConfig.result
                    }}
                    resources={this.props.resources}
                    isChannelMultipleCatalogsFeatureEnabled={
                        isMultipleCatalogsFeatureEnabled && isChannelTypeB2B(this.props.context.actionContext.requestContext)
                    }
                />
            )
        );
    };

    /**
     * Switches to selection mode.
     */
    private readonly _enableSelection = () => {
        for (const product of this._orderDetailsAvailableProducts) {
            product.isSelected = true;
        }
        this._isSelectionModeEnabled = true;
    };

    /**
     * Disables selection mode.
     */
    private readonly _disableSelection = () => {
        this._isSelectionModeEnabled = false;
    };

    private _renderEnableSelectionButton(className: string): JSX.Element | undefined {
        if (this._isSelectionModeEnabled || !ArrayExtensions.hasElements(this._orderDetailsAvailableProducts)) {
            return undefined;
        }

        return (
            <Button
                className={`${className}__enable-selection`}
                onClick={this._enableSelection}
                aria-label={this.props.resources.orderDetailsEnableSelectionButtonAriaLabel}
                title={this.props.resources.orderDetailsEnableSelectionButtonText}
                disabled={!this.props.data.orderHydration.result?.isSameSiteType}
            >
                {this.props.resources.orderDetailsEnableSelectionButtonText}
            </Button>
        );
    }

    private _renderDisableSelectionButton(className: string): JSX.Element | undefined {
        if (!this._isSelectionModeEnabled) {
            return undefined;
        }

        return (
            <Button
                className={`${className}__disable-selection`}
                onClick={this._disableSelection}
                aria-label={this.props.resources.orderDetailsDisableSelectionButtonAriaLabel}
                title={this.props.resources.orderDetailsDisableSelectionButtonText}
            >
                {this.props.resources.orderDetailsDisableSelectionButtonText}
            </Button>
        );
    }

    private _renderBuySelected(className: string): JSX.Element | undefined {
        if (!this._isSelectionModeEnabled) {
            return undefined;
        }

        if (!this.props.data.orderHydration.result?.isSameSiteType) {
            return undefined;
        }

        return (
            <BuySelectedComponent
                className={`${className}__buy-selected msc-btn`}
                id={this.props.id}
                typeName={this.props.typeName}
                data={{ products: this._selectedProducts }}
                context={this.props.context}
                resources={this.props.resources}
                isReorderingEnabled={this.props.config.isReorderingEnabled}
            />
        );
    }

    /**
     * Renders actions for table view.
     * @returns A react node.
     */
    private readonly _renderTableViewActions = () => {
        if (!this.props.config.isReorderingEnabled) {
            return undefined;
        }

        const containerClassName = 'ms-order-details__table-view-actions';
        return (
            <div className={containerClassName}>
                {this._renderBuySelected(containerClassName)}
                {this._renderEnableSelectionButton(containerClassName)}
                {this._renderDisableSelectionButton(containerClassName)}
            </div>
        );
    };

    private _initProductsModel(): void {
        const orderDetailProducts = this.props.data.orderHydration.result?.salesOrder.SalesLines?.map(salesLine => {
            const salesOrderProduct = this.props.data.orderHydration.result?.products.find(
                product => product.RecordId === salesLine.ProductId
            );
            return new OrderDetailsProduct(salesLine, salesOrderProduct);
        });

        this._products = ArrayExtensions.validValues(orderDetailProducts);
    }

    /**
     * Renders view mode switches for order details.
     * @returns A react node.
     */
    private readonly _renderViewModes = () => {
        if (!this.props.config.isGridViewEnabled) {
            return null;
        }

        const viewModesClassName = 'ms-order-details__ms-order-details-view-modes';
        return (
            <div className={viewModesClassName}>
                <Button
                    className={classname(
                        `${viewModesClassName}__detailed-view`,
                        this._viewMode === OrderDetailsViewMode.detailedView ? 'msc-view-modes__selected' : ''
                    )}
                    role='button'
                    title={this.props.resources.orderDetailsDetailedViewModeAriaLabel}
                    aria-label={this.props.resources.orderDetailsDetailedViewModeAriaLabel}
                    onClick={this._setDetailedViewMode}
                />
                <Button
                    className={classname(
                        `${viewModesClassName}__list-view`,
                        this._viewMode === OrderDetailsViewMode.listView ? 'msc-view-modes__selected' : ''
                    )}
                    role='button'
                    title={this.props.resources.orderDetailsListViewModeAriaLabel}
                    aria-label={this.props.resources.orderDetailsListViewModeAriaLabel}
                    onClick={this._setListViewMode}
                />
            </div>
        );
    };

    /**
     * Get the order details view properties.
     * @returns The initial values of order details view properties.
     */
    private readonly getOrderDetailsProps = (): IOrderDetailsViewProps => {
        const {
            resources: { backToShopping, orderDetailsBuyItemsAgainHeaderText },
            config: { heading }
        } = this.props;
        const moduleProps = { moduleProps: this.props, className: classname('ms-order-details', this.props.config.className) };
        const backToShoppingUrl = getUrlSync('home', this.props.context.actionContext) ?? '';

        return {
            ...this.props,
            moduleProps,
            heading: heading && (
                <Text
                    {...heading}
                    className='ms-order-details__heading'
                    text={this._isSelectionModeEnabled ? orderDetailsBuyItemsAgainHeaderText : heading.text}
                    tag={heading.tag ?? 'h2'}
                    editProps={{ onEdit: this.handleOrderDetailsHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            backToShoppingLink: backToShoppingUrl && (
                <Button className='ms-order-details__btn-keep-shopping' href={backToShoppingUrl}>
                    {backToShopping}
                </Button>
            ),
            footerProps: { className: 'ms-order-details__footer' }
        };
    };

    private readonly getDeliveryMode = (
        salesLine: SalesLine,
        featureSate: boolean = false,
        channelDeliveryOptionConfig?: ChannelDeliveryOptionConfiguration,
        pickupDeliveryMode?: string
    ) => {
        if (!featureSate) {
            return pickupDeliveryMode;
        }
        return channelDeliveryOptionConfig?.PickupDeliveryModeCodes?.find(deliveryMode => deliveryMode === salesLine.DeliveryMode);
    };
}

export default OrderDetails;
