/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { EmailRegex, PasswordRegex, PhoneRegex } from '@msdyn365-commerce-modules/retail-actions';
import { IModuleProps, INodeProps, Modal, ModalBody } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import SignUpButtonComponent from './components/custom-sign-up-button';
import SignUpErrorComponent from './components/custom-sign-up-error';
import SignUpInputComponent from './components/custom-sign-up-input';
import SignUpLabelComponent from './components/custom-sign-up-label';
import SignUpLoadingIconComponent from './components/custom-sign-up-loading-icon';
import SignUpLoadingMessageComponent from './components/custom-sign-up-loading-message';
import SignUpSuccessComponent from './components/custom-sign-up-success';
import { ICustomSignUpConfig, ICustomSignUpProps, ICustomSignUpResources } from './custom-sign-up.props.autogenerated';

export interface ISignUpViewState {
    isShowLoading: boolean;
}

export interface ISignUpItem {
    wrapper: INodeProps;
    key: string;
    label: React.ReactNode;
    errorMessage: React.ReactNode;
    input: React.ReactNode;
}

export interface ISignUpEmailVerification {
    isRequired: boolean;
    email: ISignUpItem;
    buttonWrapper: INodeProps;
    buttons: React.ReactNode[];
    successMessage: React.ReactNode[];
    errorMessage: React.ReactNode[];
    verificationControlWrapper: INodeProps;
}

/**
 * SignUp Given Name Verification Interface.
 */
export interface ISignUpGivenNameVerification {
    isRequired: boolean;
    givenName: ISignUpItem;
    errorMessage: React.ReactNode[];
    verificationControlWrapper: INodeProps;
}

/**
 * SignUp Surname Verification Interface.
 */
export interface ISignUpSurnameVerification {
    isRequired: boolean;
    surname: ISignUpItem;
    errorMessage: React.ReactNode[];
    verificationControlWrapper: INodeProps;
}

export interface ISignUpLocalAccount {
    localAccount: INodeProps;
    items: ISignUpItem[];
    emailVerification: ISignUpEmailVerification;
    mobileVerification: ISignUpMobileVerification;
    givenNameVerification: ISignUpGivenNameVerification;
    surnameVerification: ISignUpSurnameVerification;
    buttons: React.ReactNode[];
    errorMessage: React.ReactNode[];
    disclaimer: React.ReactNode;
}

export interface ISignUpLoading {
    modal: INodeProps;
    modalBody: INodeProps;
    icon: React.ReactNode;
    message: React.ReactNode;
}

export interface ISignUpViewProps {
    className: string;
    viewState: ISignUpViewState;
    loading: ISignUpLoading;
    signUp: IModuleProps;
    defaultAADConainer: INodeProps;
    aadConainer: INodeProps;
    heading: React.ReactNode;
    signUpLocalAccount: ISignUpLocalAccount;
}

export interface ISignUpMobileVerification {
    isRequired: boolean;
    mobile: ISignUpItem;
    buttonWrapper: INodeProps;
    buttons: React.ReactNode[];
    successMessage: React.ReactNode[];
    errorMessage: React.ReactNode[];
    verificationControlWrapper: INodeProps;
}

/**
 *
 * SignUp component
 * All AAD related module is rendered on AAD page and we need to respect HTML contract provide by AAD.
 * Please ensure any change in module don't break contract with AAD.
 * @extends {React.Component<ICustomSignUpProps<ICustomSignUpConfig>>}
 */
@observer
class SignUp extends React.Component<ICustomSignUpProps<ICustomSignUpConfig>> {
    @observable private isGivenNameVerificationRequried: boolean;

    @observable private isSurnameVerificationRequried: boolean;

    private readonly moduleClassName: string = 'ms-sign-up';

    @observable private emailRegex: string;

    @observable private newPasswordRegex: string;

    @observable private reenterPasswordRegex: string;

    @observable private isEmailVerificationRequried: boolean;

    @observable private isInitialized: boolean;

    @observable private templateVersion: string;

    @observable private isMobileVerificationRequired: boolean;

    @observable private mobileRegex: string;

    @observable private mobileTemplateVersion: string;

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    private initializationTimer: any;

    constructor(props: ICustomSignUpProps<ICustomSignUpConfig>) {
        super(props);

        this.emailRegex = EmailRegex.defaultRegex.source;
        this.newPasswordRegex = PasswordRegex.defaultRegex.source;
        this.reenterPasswordRegex = PasswordRegex.defaultRegex.source;
        this.isEmailVerificationRequried = false;
        this.isGivenNameVerificationRequried = false;
        this.isSurnameVerificationRequried = false;
        this.isInitialized = false;
        this.templateVersion = '';
        this.isMobileVerificationRequired = false;
        this.mobileRegex = PhoneRegex.defaultRegex;
        this.mobileTemplateVersion = '';
    }

    public componentDidMount(): void {
        this._onInit();
    }

    // After successful AAD initialization, call initialize method provided by AAD to attach events.
    public componentDidUpdate(): void {
        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (this.isInitialized && window && window['$element'] && window['$element']['initialize']) {
            // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
            window['$element']['initialize']();
        }
    }

    public shouldComponentUpdate(nextProps: ICustomSignUpProps<ICustomSignUpConfig>, nextState: ISignUpViewState): boolean {
        if (this.state === nextState && this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element {
        const { config, resources } = this.props;

        const viewProps = {
            ...this.props,
            viewState: {
                isShowLoading: !this.isInitialized
            },
            signUp: {
                moduleProps: this.props,
                className: classnames(this.moduleClassName, config.className)
            },
            loading: {
                modal: {
                    tag: Modal,
                    isOpen: true
                },
                modalBody: {
                    tag: ModalBody
                },
                icon: <SignUpLoadingIconComponent className={this.moduleClassName} />,
                message: <SignUpLoadingMessageComponent className={this.moduleClassName} message={resources.loadingMessage} />
            },
            defaultAADConainer: {
                id: 'api',
                style: { display: 'none' }
            },
            aadConainer: {
                id: this.isInitialized ? 'api' : null,
                className: `${this.moduleClassName}__container`
            },
            heading: (
                <Msdyn365.Text
                    className={`${this.moduleClassName}__heading`}
                    {...config.heading}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            signUpLocalAccount: this._renderLocalAccount()
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    /**
     * Handles heading content change event.
     * @param event - Content editable event.
     * @returns - Heading Text.
     */
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.heading.text = event.target.value);

    /**
     * Handles paragraph content change event.
     * @param event - Content editable event.
     * @returns - Paragraph Text.
     */
    public handleParagraphChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.disclaimer = event.target.value);

    // eslint-disable-next-line @typescript-eslint/naming-convention
    public _onInit = () => {
        this._prePopulateData();
        this._updateErrorMessage();

        // Check if AAD initialization is complete. AAD do not provide any event to subscribe so we need to check variable set by AAD to check initialization status.
        this.initializationTimer = setInterval(() => {
            this._isInitializationSuccessful();
        }, 100);
        setTimeout(() => {
            clearInterval(this.initializationTimer);
        }, 10_000);
    };

    // After successful AAD initialization, remove waiting and preload any data, if needed.
    private readonly _isInitializationSuccessful = () => {
        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (window && window['$diags'] && window['$diags']['initializationSuccessful']) {
            clearInterval(this.initializationTimer);
            this.isInitialized = true;
        }
    };

    private readonly _prePopulateData = () => {
        const resources: ICustomSignUpResources = this.props.resources || {};

        // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
        if (window['SA_FIELDS'] && window['SA_FIELDS']['AttributeFields']) {
            // eslint-disable-next-line @typescript-eslint/dot-notation, @typescript-eslint/no-unsafe-member-access -- Auto-suppressed.
            window['SA_FIELDS']['AttributeFields'].map(
                (obj: { ID: string; PAT: string; UX_INPUT_TYPE: string; PAT_DESC: string; VERIFY: boolean }) => {
                    switch (obj.ID.toLowerCase()) {
                        case 'emailverificationcontrol': {
                            this.isEmailVerificationRequried = true;
                            this.templateVersion = 'v2';
                            break;
                        }
                        case 'email': {
                            this.emailRegex = obj.PAT;
                            this.isEmailVerificationRequried = obj.VERIFY;
                            this.templateVersion = 'v1';
                            break;
                        }
                        case 'mobileverificationcontrol': {
                            this.isMobileVerificationRequired = true;
                            this.mobileTemplateVersion = 'v2';
                            break;
                        }
                        case 'mobile': {
                            this.mobileRegex = obj.PAT;
                            this.isMobileVerificationRequired = obj.VERIFY;
                            this.mobileTemplateVersion = 'v1';
                            break;
                        }
                        case 'givennameverificationcontrol': {
                            this.isGivenNameVerificationRequried = true;
                            break;
                        }
                        case 'givenname': {
                            this.isGivenNameVerificationRequried = obj.VERIFY;
                            break;
                        }
                        case 'surnameverificationcontrol': {
                            this.isEmailVerificationRequried = true;
                            break;
                        }
                        case 'surname': {
                            this.isSurnameVerificationRequried = obj.VERIFY;
                            break;
                        }
                        case 'newpassword': {
                            this.newPasswordRegex = obj.PAT;
                            break;
                        }
                        case 'reenterpassword': {
                            this.reenterPasswordRegex = obj.PAT;
                            break;
                        }
                        default:
                    }

                    switch (obj.UX_INPUT_TYPE.toLowerCase()) {
                        case 'password': {
                            obj.PAT_DESC = resources.invalidPasswordError;
                            break;
                        }
                        case 'emailbox': {
                            obj.PAT_DESC = resources.invalidEmailAddressError;
                            break;
                        }
                        default:
                    }
                }
            );
        }
    };

    private readonly _updateErrorMessage = () => {
        const resources: ICustomSignUpResources = this.props.resources || {};

        // eslint-disable-next-line @typescript-eslint/dot-notation -- Auto-suppressed.
        if (window && window['CONTENT']) {
            const errorMessages = {
                required_field: resources.requiredFieldMissingError
            };

            // eslint-disable-next-line @typescript-eslint/dot-notation -- Auto-suppressed.
            Object.assign(window['CONTENT'], errorMessages);
        }
    };

    private readonly getValue = (v1Value: string, v2Value: string): string => {
        if (this.templateVersion) {
            return this.templateVersion === 'v1' ? v1Value : v2Value;
        }
        if (this.mobileTemplateVersion) {
            return this.mobileTemplateVersion === 'v1' ? v1Value : v2Value;
        }
        return '';
    };

    private _renderLocalAccount(): ISignUpLocalAccount {
        const { config, resources } = this.props;
        return {
            localAccount: {
                id: 'attributeList',
                className: `${this.moduleClassName}__account-items attr`
            },
            items: [
                this._renderInput('givenName', 'text', resources.firstNameLabelText, resources.firstNameMaxLength),
                this._renderInput('surname', 'text', resources.lastNameLabelText, resources.lastNameMaxLength),
                this._renderInput('email', 'email', resources.emailAddressLabelText, undefined, this.emailRegex),
                this._renderInput('mobile', 'tel', resources.mobileNumberLabelText, undefined, this.mobileRegex),
                this._renderInput('newPassword', 'password', resources.passwordLabelText, undefined, this.newPasswordRegex),
                this._renderInput('reenterPassword', 'password', resources.confirmPasswordLabelText, undefined, this.reenterPasswordRegex)
            ],
            emailVerification: {
                isRequired: this.isEmailVerificationRequried,
                email: this._renderInput(
                    this.getValue('email_ver_input', 'emailVerificationCode'),
                    'text',
                    resources.verificationCodeLabelText,
                    undefined,
                    undefined,
                    'VerificationCode'
                ),
                verificationControlWrapper: {
                    id: 'emailVerificationControl',
                    className: `${this.moduleClassName}__verification-control-content verificationControlContent`
                },
                buttonWrapper: {
                    className: `${this.moduleClassName}__email-verification-buttons ${this.getValue('verify', '')}`,
                    'data-claim_id': 'email'
                },
                buttons: [
                    <SignUpButtonComponent
                        key='email_ver_but_send'
                        id={this.getValue('email_ver_but_send', 'emailVerificationControl_but_send_code')}
                        className={`${this.moduleClassName}__email-verification-button ${
                            this.moduleClassName
                        }__verify-email-send-button ${this.getValue('sendButton', 'sendNewCode')}`}
                        ariaLabel={resources.sendCodeButtonAriaLabel}
                        text={resources.sendCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='email_ver_but_verify'
                        id={this.getValue('email_ver_but_verify', 'emailVerificationControl_but_verify_code')}
                        className={`${this.moduleClassName}__email-verification-button ${
                            this.moduleClassName
                        }__verify-email-verify-button ${this.getValue('verifyButton', 'verifyCode')}`}
                        ariaLabel={resources.verifyCodeButtonAriaLabel}
                        text={resources.verifyCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='email_ver_but_resend'
                        id={this.getValue('email_ver_but_resend', 'emailVerificationControl_but_send_new_code')}
                        className={`${this.moduleClassName}__email-verification-button ${
                            this.moduleClassName
                        }__verify-email-resend-button ${this.getValue('sendButton', 'sendNewCode')}`}
                        ariaLabel={resources.resendCodeButtonAriaLabel}
                        text={resources.resendCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='email_ver_but_edit'
                        id={this.getValue('email_ver_but_edit', 'emailVerificationControl_but_change_claims')}
                        className={`${this.moduleClassName}__email-verification-button ${
                            this.moduleClassName
                        }__verify-email-edit-button ${this.getValue('editButton', 'changeClaims')}`}
                        ariaLabel={resources.changeEmailButtonAriaLabel}
                        text={resources.changeEmailButtonText}
                    />
                ],
                successMessage: [
                    <SignUpSuccessComponent
                        key='email_info'
                        id={this.getValue('email_info', 'emailVerificationControl_info_message')}
                        className={this.moduleClassName}
                        message={resources.verificationCodeSendSuccess}
                    />,
                    <SignUpSuccessComponent
                        key='email_success'
                        id={this.getValue('email_success', 'emailVerificationControl_success_message')}
                        className={this.moduleClassName}
                        message={resources.emailAddressVerifiedSuccess}
                    />
                ],
                errorMessage: [
                    <SignUpErrorComponent
                        key='emailVerificationControl_error_message'
                        id='emailVerificationControl_error_message'
                        className={this.moduleClassName}
                    />,
                    <SignUpErrorComponent
                        key='email_fail_retry'
                        id='email_fail_retry'
                        className={this.moduleClassName}
                        message={resources.retryError}
                    />,
                    <SignUpErrorComponent
                        key='email_fail_no_retry'
                        id='email_fail_no_retry'
                        className={this.moduleClassName}
                        message={resources.retryNotAllowedError}
                    />,
                    <SignUpErrorComponent
                        key='email_fail_throttled'
                        id='email_fail_throttled'
                        className={this.moduleClassName}
                        message={resources.throttledError}
                    />,
                    <SignUpErrorComponent
                        key='email_fail_code_expired'
                        id='email_fail_code_expired'
                        className={this.moduleClassName}
                        message={resources.codeExpiredError}
                    />,
                    <SignUpErrorComponent
                        key='email_fail_server'
                        id='email_fail_server'
                        className={this.moduleClassName}
                        message={resources.serverError}
                    />,
                    <SignUpErrorComponent
                        key='email_incorrect_format'
                        id='email_incorrect_format'
                        className={this.moduleClassName}
                        message={resources.invalidEmailError}
                    />
                ]
            },
            mobileVerification: {
                isRequired: this.isMobileVerificationRequired,
                mobile: this._renderInput(
                    this.getValue('mobile_ver_input', 'mobileVerificationCode'),
                    'text',
                    resources.mobileVerificationLabelText,
                    undefined,
                    undefined,
                    'VerificationCode'
                ),
                verificationControlWrapper: {
                    id: 'mobileVerificationControl',
                    className: `${this.moduleClassName}__verification-control-content verificationControlContent`
                },
                buttonWrapper: {
                    className: `${this.moduleClassName}__mobile-verification-buttons ${this.getValue('verify', '')}`,
                    'data-claim_id': 'mobile'
                },
                buttons: [
                    // Customize buttons as per your requirement
                    <SignUpButtonComponent
                        key='mobile_ver_but_send'
                        id={this.getValue('mobile_ver_but_send', 'mobileVerificationControl_but_send_code')}
                        className={`${this.moduleClassName}__mobile-verification-button ${
                            this.moduleClassName
                        }__verify-mobile-send-button ${this.getValue('sendButton', 'sendNewCode')}`}
                        ariaLabel={resources.sendCodeButtonAriaLabel}
                        text={resources.sendCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='mobile_ver_but_verify'
                        id={this.getValue('mobile_ver_but_verify', 'mobileVerificationControl_but_verify_code')}
                        className={`${this.moduleClassName}__mobile-verification-button ${
                            this.moduleClassName
                        }__verify-mobile-verify-button ${this.getValue('verifyButton', 'verifyCode')}`}
                        ariaLabel={resources.verifyCodeButtonAriaLabel}
                        text={resources.verifyCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='mobile_ver_but_resend'
                        id={this.getValue('mobile_ver_but_resend', 'mobileVerificationControl_but_send_new_code')}
                        className={`${this.moduleClassName}__mobile-verification-button ${
                            this.moduleClassName
                        }__verify-mobile-resend-button ${this.getValue('sendButton', 'sendNewCode')}`}
                        ariaLabel={resources.resendCodeButtonAriaLabel}
                        text={resources.resendCodeButtonText}
                    />,
                    <SignUpButtonComponent
                        key='mobile_ver_but_edit'
                        id={this.getValue('mobile_ver_but_edit', 'mobileVerificationControl_but_change_claims')}
                        className={`${this.moduleClassName}__mobile-verification-button ${
                            this.moduleClassName
                        }__verify-mobile-edit-button ${this.getValue('editButton', 'changeClaims')}`}
                        ariaLabel={resources.changeEmailButtonAriaLabel}
                        text={resources.changeEmailButtonText}
                    />
                ],
                successMessage: [
                    // Customize success messages as per your requirement
                    <SignUpSuccessComponent
                        key='mobile_info'
                        id={this.getValue('mobile_info', 'mobileVerificationControl_info_message')}
                        className={this.moduleClassName}
                        message={resources.verificationCodeSendSuccess}
                    />,
                    <SignUpSuccessComponent
                        key='mobile_success'
                        id={this.getValue('mobile_success', 'mobileVerificationControl_success_message')}
                        className={this.moduleClassName}
                        message={resources.mobileNumberVerifiedSuccess}
                    />
                ],
                errorMessage: [
                    // Customize error messages as per your requirement
                    <SignUpErrorComponent
                        key='mobileVerificationControl_error_message'
                        id='mobileVerificationControl_error_message'
                        className={this.moduleClassName}
                    />,
                    <SignUpErrorComponent
                        key='mobile_fail_retry'
                        id='mobile_fail_retry'
                        className={this.moduleClassName}
                        message={resources.retryError}
                    />,
                    <SignUpErrorComponent
                        key='mobile_fail_no_retry'
                        id='mobile_fail_no_retry'
                        className={this.moduleClassName}
                        message={resources.retryNotAllowedError}
                    />,
                    <SignUpErrorComponent
                        key='mobile_fail_throttled'
                        id='mobile_fail_throttled'
                        className={this.moduleClassName}
                        message={resources.throttledError}
                    />,
                    <SignUpErrorComponent
                        key='mobile_fail_code_expired'
                        id='mobile_fail_code_expired'
                        className={this.moduleClassName}
                        message={resources.codeExpiredError}
                    />,
                    <SignUpErrorComponent
                        key='mobile_fail_server'
                        id='mobile_fail_server'
                        className={this.moduleClassName}
                        message={resources.serverError}
                    />,
                    <SignUpErrorComponent
                        key='mobile_incorrect_format'
                        id='mobile_incorrect_format'
                        className={this.moduleClassName}
                        message={resources.invalidEmailError}
                    />
                ]
            },
            givenNameVerification: {
                isRequired: this.isGivenNameVerificationRequried,
                givenName: this._renderInput(
                    this.getValue('givenName_ver_input', 'givenNameVerificationCode'),
                    'text',
                    resources.verificationCodeLabelText,
                    undefined,
                    undefined,
                    'VerificationCode'
                ),
                verificationControlWrapper: {
                    id: 'givenNameVerificationControl',
                    className: `${this.moduleClassName}__verification-control-content verificationControlContent`
                },
                errorMessage: [
                    <SignUpErrorComponent
                        key='requiredFieldMissing'
                        id='requiredFieldMissing'
                        className={this.moduleClassName}
                        message={resources.requiredFieldMissingSummaryError}
                    />
                ]
            },
            surnameVerification: {
                isRequired: this.isSurnameVerificationRequried,
                surname: this._renderInput(
                    this.getValue('surname_ver_input', 'surnameVerificationCode'),
                    'text',
                    resources.verificationCodeLabelText,
                    undefined,
                    undefined,
                    'VerificationCode'
                ),
                verificationControlWrapper: {
                    id: 'surnameVerificationControl',
                    className: `${this.moduleClassName}__verification-control-content verificationControlContent`
                },
                errorMessage: [
                    <SignUpErrorComponent
                        key='requiredFieldMissing'
                        id='requiredFieldMissing'
                        className={this.moduleClassName}
                        message={resources.requiredFieldMissingSummaryError}
                    />
                ]
            },
            buttons: [
                <SignUpButtonComponent
                    key='continue'
                    id='continue'
                    className={`${this.moduleClassName}__create-button`}
                    ariaLabel={resources.signUpButtonArialabel}
                    text={resources.signUpButtonText}
                />,
                <SignUpButtonComponent
                    key='cancel'
                    id='cancel'
                    className={`${this.moduleClassName}__cancel-button`}
                    ariaLabel={resources.cancelButtonArialabel}
                    text={resources.cancelButtonText}
                />
            ],
            errorMessage: [
                <SignUpErrorComponent
                    key='passwordEntryMismatch'
                    id='passwordEntryMismatch'
                    className={this.moduleClassName}
                    message={resources.passwordEntryMismatchError}
                />,
                <SignUpErrorComponent
                    key='requiredFieldMissing'
                    id='requiredFieldMissing'
                    className={this.moduleClassName}
                    message={resources.requiredFieldMissingSummaryError}
                />,
                <SignUpErrorComponent
                    key='fieldIncorrect'
                    id='fieldIncorrect'
                    className={this.moduleClassName}
                    message={resources.fieldIncorrectError}
                />,
                <SignUpErrorComponent
                    key='claimVerificationServerError'
                    id='claimVerificationServerError'
                    className={this.moduleClassName}
                />
            ],
            disclaimer: config.disclaimer && (
                <Msdyn365.RichTextComponent
                    className={`${this.moduleClassName}__sign-up-disclaimer`}
                    text={config.disclaimer}
                    editProps={{ onEdit: this.handleParagraphChange, requestContext: this.props.context.request }}
                />
            )
        };
    }

    private _renderInput(
        id: string,
        type: string,
        labelText: string,
        maxLength?: string,
        pattern?: string,
        cssClassName?: string
    ): ISignUpItem {
        const className = `${this.moduleClassName}__account-item`;
        return {
            wrapper: {
                className: classnames(className, `${className}-${id}`, 'entry-item', 'attrEntry', cssClassName)
            },
            key: id,
            label: (
                <SignUpLabelComponent
                    {...{
                        id,
                        forId: id,
                        className,
                        text: labelText
                    }}
                />
            ),
            errorMessage: (
                <SignUpErrorComponent
                    {...{
                        className: this.moduleClassName,
                        type: 'item'
                    }}
                />
            ),
            input: (
                <SignUpInputComponent
                    {...{
                        id,
                        type,
                        maxLength,
                        pattern,
                        className
                    }}
                />
            )
        };
    }
}

export default SignUp;
