import React, { useState, useEffect } from 'react';
import StoreSelectorAccordionList from './custom-store-selector-accordion-list';
import { StoreSelectorLocationLines } from './custom-store-selector-location-lines';
import { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions';
import { DeliveryOption, OrgUnitLocation } from '@msdyn365-commerce/retail-proxy';
import { ICustomStoreSelectorResources } from '../custom-store-selector.props.autogenerated';
import { ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import { StoreSelectorMap } from './custom-store-selector-map';

interface Props {
    locations?: IFullOrgUnitAvailability[];
    resources: ICustomStoreSelectorResources;
    preferredDistanceUnit?: string;

    alreadySelectedLocation?: OrgUnitLocation;
    outOfStockThreshold: number;
    enableOutOfStockCheck: boolean;
    storeLocatorView?: boolean;
    selectedStoreLocationId?: string;
    isPreferredStoreEnabled?: boolean;
    displayList?: boolean;
    isLocationDisabled?: boolean;
    productPickUpDeliveryOptions?: DeliveryOption[];
    onClick: (locationId: string | undefined) => void;
    preferredStoreLocationId: string | null;
    onSetAsPreferredStore: (locationId: string | undefined) => void;
    onRemovePreferredStore: () => void;
    filteredPickupMode?: string;
    shouldShowIndex?: boolean;

    telemetryContent?: ITelemetryContent;
    onLocationSelected(location: OrgUnitLocation | undefined): void;
    maps?: React.ReactNode;
    showMap: boolean;
}

const transformStoreLocations = (
    storeLocationList: IFullOrgUnitAvailability[] | undefined
): { countries: { [key: string]: { [key: string]: IFullOrgUnitAvailability[] } } } => {
    const result: { countries: { [key: string]: { [key: string]: IFullOrgUnitAvailability[] } } } = { countries: {} };

    storeLocationList?.forEach(store => {
        const location = store.OrgUnitAvailability?.OrgUnitLocation;
        const countryCode = location?.Country;
        const stateCode = location?.StateName;

        if (countryCode && stateCode) {
            if (!result.countries[countryCode]) {
                result.countries[countryCode] = {};
            }

            if (!result.countries[countryCode][stateCode]) {
                result.countries[countryCode][stateCode] = [];
            }

            result.countries[countryCode][stateCode].push(store);
        }
    });

    return result;
};

const StoreSelectorCustomLocationLines: React.FC<Props> = props => {
    const [data, setData] = useState<{ countries: { [key: string]: { [key: string]: IFullOrgUnitAvailability[] } } }>({ countries: {} });
    const [selectedLocations, setSelectedLocations] = useState<IFullOrgUnitAvailability[]>([]);

    useEffect(() => {
        const transformedData = transformStoreLocations(props.locations);
        setData(transformedData);
    }, [props.locations]);

    const handleStateSelected = (locations: IFullOrgUnitAvailability[]) => {
        setSelectedLocations(locations);
    };

    return (
        <div className='msc-our-stores-mainContainer'>
            <div className='msc-country-mainContainer'>
                <StoreSelectorAccordionList data={data} onStateSelected={handleStateSelected} />
            </div>
            <div className='msc-address-mainContainer'>
                <div className='msc-addressLineItems-mainContainer'>
                    <StoreSelectorLocationLines
                        locations={selectedLocations}
                        resources={props.resources}
                        preferredDistanceUnit={props.preferredDistanceUnit}
                        alreadySelectedLocation={props.alreadySelectedLocation}
                        outOfStockThreshold={props.outOfStockThreshold}
                        enableOutOfStockCheck={props.enableOutOfStockCheck}
                        onLocationSelected={props.onLocationSelected}
                        storeLocatorView={props.storeLocatorView}
                        selectedStoreLocationId={props.selectedStoreLocationId}
                        onClick={props.onClick}
                        preferredStoreLocationId={props.preferredStoreLocationId}
                        onSetAsPreferredStore={props.onSetAsPreferredStore}
                        onRemovePreferredStore={props.onRemovePreferredStore}
                        isPreferredStoreEnabled={props.isPreferredStoreEnabled}
                        displayList={props.displayList}
                        telemetryContent={props.telemetryContent}
                        isLocationDisabled={props.isLocationDisabled}
                        productPickUpDeliveryOptions={props.productPickUpDeliveryOptions}
                        filteredPickupMode={props.filteredPickupMode}
                        shouldShowIndex={props.shouldShowIndex}
                    />
                </div>
                {/* {props.maps} */}
                {props.showMap && (
                    <StoreSelectorMap
                        locations={selectedLocations}
                        preferredStoreLocationId={props.preferredStoreLocationId}
                        isPreferredStoreEnabled={props.isPreferredStoreEnabled}
                        selectedStoreLocationId={props.selectedStoreLocationId}
                        onClick={props.onClick}
                    />
                )}
            </div>
        </div>
    );
};

export default StoreSelectorCustomLocationLines;
