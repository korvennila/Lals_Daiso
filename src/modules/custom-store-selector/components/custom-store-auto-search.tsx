import React, { ChangeEvent, useEffect } from 'react';
import debounce from 'lodash.debounce';
import { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions';
import { ICustomStoreSelectorProps } from '../custom-store-selector.props.autogenerated';
import { ICustomStoreSelectorData } from '../custom-store-selector.data';
import { useLocationContext } from './custom-store-location-context'; // Use the hook

export interface IStoreSelectorAutoCompleteSearchProps extends ICustomStoreSelectorProps<ICustomStoreSelectorData> {
    locations?: IFullOrgUnitAvailability[];
    onStateSelected: (locations: IFullOrgUnitAvailability[]) => void;
    dataLocation: { countries: { [key: string]: { [key: string]: IFullOrgUnitAvailability[] } } };
}

const StoreSelectorAutoCompleteSearch: React.FC<IStoreSelectorAutoCompleteSearchProps> = props => {
    const {
        setSelectedCountry,
        setSelectedState,
        setActiveCountry,
        selectedFromDropdown,
        selectedState,
        setSelectedFromDropdown
    } = useLocationContext(); // Use the hook to get the context
    const [searchInput, setSearchInput] = React.useState<string>('');
    const [searchResults, setSearchResults] = React.useState<IFullOrgUnitAvailability[]>([]);
    const [isLoading, setIsLoading] = React.useState<boolean>(false);
    const [showResults, setShowResults] = React.useState<boolean>(false);

    const debouncedFetchResults = debounce((query: string) => fetchResults(query), 300);

    useEffect(() => {
        if (selectedFromDropdown && searchInput.length > 0) {
            setSearchInput('');
        }
    }, [selectedState]);

    const fetchResults = (query: string) => {
        const { locations } = props;

        if (query.length <= 1) {
            setSearchResults([]);
            return;
        }

        setIsLoading(true);

        const filteredResults =
            locations?.filter(location => {
                const locationName = location.OrgUnitAvailability?.OrgUnitLocation?.OrgUnitName?.toLowerCase();
                const state = location.OrgUnitAvailability?.OrgUnitLocation?.State;
                return locationName?.includes(query.toLowerCase()) && state;
            }) || [];

        const limitedResults = filteredResults.slice(0, 5);

        setSearchResults(limitedResults);
        setShowResults(true);
        setIsLoading(false);
    };

    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
        const query = event.target.value;
        setSearchInput(query);
        debouncedFetchResults(query);
    };

    const handleClick = (storeLocation: IFullOrgUnitAvailability) => {
        const orgUnitLocation = storeLocation.OrgUnitAvailability?.OrgUnitLocation;

        // Safely access the properties
        if (orgUnitLocation) {
            const { OrgUnitNumber, Country, State, StateName, OrgUnitName } = orgUnitLocation;

            // Check if Country and State are available
            if (Country && State) {
                // Set selected country and state via context
                setSelectedCountry(Country);
                setActiveCountry(Country);
                setSelectedState(State);
                setSelectedFromDropdown(false);
                setSearchInput(`${OrgUnitName}, ${StateName}, ${Country}`);

                // Call the parent component's method
                props.onStateSelected(props.dataLocation.countries[Country][State]);

                handleDistributorLocationClick(OrgUnitNumber);
                setShowResults(false);
            }
        }
    };

    const handleDistributorLocationClick = (orgUnitNumber: string | undefined) => {
        const storeSelectorStateManager = props.data.storeSelectorStateManager.result;
        storeSelectorStateManager?.setSelectedStoreLocationId(undefined);
        if (orgUnitNumber) {
            setTimeout(() => {
                storeSelectorStateManager?.setSelectedStoreLocationId(orgUnitNumber);
            }, 500);
        }
    };

    return (
        <div className='msc-custom-store-autocomplete-search'>
            <input type='search' value={searchInput} onChange={handleInputChange} placeholder='Search locations...' />
            {isLoading && <div>Loading...</div>}
            {searchResults.length > 0 && showResults && (
                <ul className='msc-custom-store-autocomplete-result'>
                    {searchResults.map((result, index) => (
                        <li key={index} onClick={() => handleClick(result)}>
                            {result.OrgUnitAvailability?.OrgUnitLocation?.OrgUnitName},{' '}
                            {result.OrgUnitAvailability?.OrgUnitLocation?.StateName}, {result.OrgUnitAvailability?.OrgUnitLocation?.Country}
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default StoreSelectorAutoCompleteSearch;
