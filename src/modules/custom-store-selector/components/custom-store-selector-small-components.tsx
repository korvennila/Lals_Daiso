/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { IFullOrgUnitAvailability } from '@msdyn365-commerce-modules/retail-actions';
import classnames from 'classnames';
import * as React from 'react';

import { ICustomStoreSelectorResources, ITermsOfServiceLinkData } from '../custom-store-selector.props.autogenerated';

export interface IStoreSelectorEmptyMessageProps {
    resources: ICustomStoreSelectorResources;
}
export const StoreSelectorEmptyMessage: React.FC<IStoreSelectorEmptyMessageProps> = ({ resources }) => (
    <div className='ms-store-select__no-locations'>
        <p>{resources.emptyLocationsText}</p>
    </div>
);

export const StoreSelectorWaiting: React.FC = () => <div className={classnames('msc-waiting', 'ms-store-select__search-in-progress')} />;

export interface IStoreSelectorTermsOfServiceProps {
    link?: ITermsOfServiceLinkData;
    requestContext: Msdyn365.IRequestContext;
    onTextChange?(event: Msdyn365.ContentEditableEvent): void;
}

export const StoreSelectorTermsOfService: React.FC<IStoreSelectorTermsOfServiceProps> = ({ link, requestContext, onTextChange }) => {
    if (link) {
        const editableLink: Msdyn365.ILinksData = {
            ariaLabel: link.ariaLabel,
            className: 'ms-store-select__terms-link',
            linkText: link.linkText,
            linkUrl: link.linkUrl.destinationUrl,
            openInNewTab: link.openInNewTab,
            role: 'link'
        };

        return (
            <div className='ms-store-select__footer'>
                <Msdyn365.Link link={editableLink} editProps={{ onTextChange, requestContext }} />
            </div>
        );
    }
    return null;
};

export interface IStoreSelectorFoundLocationsMessage {
    resources: ICustomStoreSelectorResources;
    locations?: IFullOrgUnitAvailability[];
    searchRadius: number;
    preferredDistanceUnit: string;
    isSeeAllStore: boolean;
}
export const StoreSelectorFoundLocationsMessage: React.FC<IStoreSelectorFoundLocationsMessage> = ({
    locations,
    searchRadius,
    resources,
    isSeeAllStore,
    preferredDistanceUnit
}) => {
    if (locations) {
        const storeCountMessage =
            preferredDistanceUnit === resources.milesShortText ? resources.storeCountMessage : resources.storeCountMessageInKm;
        return (
            <div className='ms-store-select__found-locations'>
                {isSeeAllStore
                    ? resources.storeAllCountMessage.replace('{count}', locations.length.toString())
                    : storeCountMessage.replace('{count}', locations.length.toString()).replace('{radius}', searchRadius.toString())}
            </div>
        );
    }

    return null;
};
