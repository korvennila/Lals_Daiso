/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { Alert, Button, INodeProps, NodeTag } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { showAdditionalFields } from '../gift-card-balance-check.props.autogenerated';

export interface IGetFormInput {
    errorMessage: string;
    giftCardNumber: string;
    giftCardPin: string;
    giftCardExp: string;
    inputRef?: React.RefObject<HTMLInputElement>;
    inputPinRef?: React.RefObject<HTMLInputElement>;
    inputExpRef?: React.RefObject<HTMLInputElement>;
    supportExternalGiftCard?: boolean;
    additionalFields?: showAdditionalFields;
    resources: {
        balanceCheckButton: string;
        giftCardFormLabel: string;
        giftCardNumberLabel: string;
        giftCardPinLabel: string;
        giftCardExpLabel: string;
        giftCardAlertLabel: string;
        giftCardPinPlaceholderText: string;
        giftCardExpPlaceholderText: string;
    };
    onEnterGiftCardNumber(giftCardNumber: string): void;
    onEnterGiftCardPin(giftCardPin: string): void;
    onEnterGiftCardExp(giftCardExp: string): void;
    onApplyGiftCard(): Promise<void>;
}

export interface IForm {
    formProps: INodeProps;
    label: React.ReactNode;
    inputPinLabel: React.ReactNode;
    inputExpLabel: React.ReactNode;
    alert: React.ReactNode;
    inputProps: INodeProps;
    inputNumProps: INodeProps;
    inputPinProps: INodeProps;
    inputExpProps: INodeProps;
    inputNumber: React.ReactNode;
    inputPin: React.ReactNode;
    inputExp: React.ReactNode;
    applyButton: React.ReactNode;
    supportExternalGiftCard: boolean | undefined;
    showGiftCardPinInput: boolean | undefined;
    showGiftCardExpInput: boolean | undefined;
    alertFieldLabel: React.ReactNode;
}

/**
 * On apply function.
 * @param onApplyGiftCard -On apply gift card.
 * @returns Apply gift card.
 */
const onApplyHandler = (onApplyGiftCard: () => Promise<void>) => async (event: React.SyntheticEvent): Promise<void> => {
    event.preventDefault();
    await onApplyGiftCard();
};

/**
 * On change number function.
 * @param onEnterGiftCardNumber -On enter gift card number.
 * @returns On gift card enter pin function result.
 */
const onChangeNumberHandler = (onEnterGiftCardNumber: (giftCardNumber: string) => void) => (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
    onEnterGiftCardNumber(value);
};

/**
 * On change pin function.
 * @param onEnterGiftCardPin -On enter gift card pin.
 * @returns On enter gift card pin function result.
 */
const onChangePinHandler = (onEnterGiftCardPin: (giftCardPin: string) => void) => (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
    onEnterGiftCardPin(value);
};

/**
 * On change exp function.
 * @param onEnterGiftCardExp -On enter gift card.
 * @returns On enter gift card function result.
 */
const onChangeExpHandler = (onEnterGiftCardExp: (giftCardExp: string) => void) => (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
    onEnterGiftCardExp(value);
};

export const getForm = (options: IGetFormInput): IForm => {
    const {
        errorMessage,
        inputRef,
        inputPinRef,
        inputExpRef,
        giftCardNumber,
        giftCardPin,
        giftCardExp,
        onEnterGiftCardNumber,
        onEnterGiftCardPin,
        onEnterGiftCardExp,
        onApplyGiftCard,
        supportExternalGiftCard,
        additionalFields,
        resources: {
            balanceCheckButton,
            giftCardFormLabel,
            giftCardNumberLabel,
            giftCardPinLabel,
            giftCardExpLabel,
            giftCardAlertLabel,
            giftCardPinPlaceholderText,
            giftCardExpPlaceholderText
        }
    } = options;

    const formProps = {
        className: classnames('ms-gift-card-balance-check__form', { 'is-invalid': !!errorMessage }),
        onSubmit: onApplyHandler(onApplyGiftCard),
        tag: 'form' as NodeTag
    };

    const label = (
        <label id='ms-gift-card-balance-check__label' className='ms-gift-card-balance-check__input-label'>
            {giftCardFormLabel}
        </label>
    );

    const inputPinLabel = (
        <label id='ms-gift-card-balance-check__input-pin-label' className='ms-gift-card-balance-check__input-pin-label'>
            {giftCardPinLabel}
        </label>
    );

    const inputExpLabel = (
        <label id='ms-gift-card-balance-check__input-exp-label' className='ms-gift-card-balance-check__input-exp-label'>
            {giftCardExpLabel}
        </label>
    );

    const alertFieldLabel = (
        <label id='ms-gift-card-balance-check__input-alert' className='ms-gift-card-balance-check__input-alert-label'>
            {giftCardAlertLabel}
        </label>
    );

    const alert = (
        <Alert
            tag='span'
            id='ms-gift-card-balance-check__error'
            className='ms-gift-card-balance-check__input-error'
            role='alert'
            assertive={false}
            fade={false}
            includeAlertClass={false}
            isOpen={!!errorMessage}
        >
            {errorMessage}
        </Alert>
    );

    const inputProps = {
        className: 'ms-gift-card-balance-check__input-fields'
    };

    const inputNumProps = {
        className: 'ms-gift-card-balance-check__input-num-fields'
    };

    const inputPinProps = {
        className: 'ms-gift-card-balance-check__input-pin-fields'
    };

    const inputExpProps = {
        className: 'ms-gift-card-balance-check__input-exp-fields'
    };

    const inputNumber = (
        <input
            ref={inputRef}
            type='text'
            className='ms-gift-card-balance-check__input-text form-control'
            aria-label={giftCardNumberLabel}
            onChange={onChangeNumberHandler(onEnterGiftCardNumber)}
            value={giftCardNumber}
            aria-labelledby='ms-gift-card-balance-check__label ms-gift-card-balance-check__error'
        />
    );

    const inputPin = (
        <input
            ref={inputPinRef}
            type='text'
            className='ms-gift-card-balance-check__input-pin-text form-contol'
            aria-label={giftCardPinLabel}
            placeholder={giftCardPinPlaceholderText}
            onChange={onChangePinHandler(onEnterGiftCardPin)}
            value={giftCardPin}
            aria-labelledby='ms-gift-card-balance-check__label ms-gift-card-balance-check__error'
        />
    );

    const inputExp = (
        <input
            ref={inputExpRef}
            type='text'
            className='ms-gift-card-balance-check__input-exp-text form-contol'
            aria-label={giftCardExpLabel}
            placeholder={giftCardExpPlaceholderText}
            onChange={onChangeExpHandler(onEnterGiftCardExp)}
            value={giftCardExp}
            aria-labelledby='ms-gift-card-balance-check__label ms-gift-card-balance-check__error'
        />
    );

    const applyButton = (
        <Button
            className='ms-gift-card-balance-check__btn-apply'
            onClick={onApplyHandler(onApplyGiftCard)}
            aria-label={balanceCheckButton}
            disabled={!giftCardNumber}
        >
            {balanceCheckButton}
        </Button>
    );

    let showGiftCardPinInput = false;
    let showGiftCardExpInput = false;

    switch (additionalFields) {
        case showAdditionalFields.pin:
            showGiftCardPinInput = true;
            break;
        case showAdditionalFields.expirationDate:
            showGiftCardExpInput = true;
            break;
        case showAdditionalFields.pinAndExpirationDate:
            showGiftCardPinInput = true;
            showGiftCardExpInput = true;
            break;
        default:
    }

    return {
        formProps,
        label,
        inputPinLabel,
        inputExpLabel,
        alert,
        inputProps,
        inputNumProps,
        inputPinProps,
        inputExpProps,
        inputNumber,
        inputPin,
        inputExp,
        applyButton,
        supportExternalGiftCard,
        showGiftCardPinInput,
        showGiftCardExpInput,
        alertFieldLabel
    };
};
