/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';
import MsDyn365, { IActionContext, IGridSettings, IImageSettings, isEmptyOrNullObject } from '@msdyn365-commerce/core';
import { TextValueTranslation } from '@msdyn365-commerce/retail-proxy';
import { ArrayExtensions, getCategoryUrl } from '@msdyn365-commerce-modules/retail-actions';
import { addThrottledEvent, IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { computed, observable } from 'mobx';
import * as React from 'react';

import { IMenuItemData, INavigationMenuData, MenuSource, MenuTypeIndexId } from './navigation-menu.data';
import { ICmsNavItemsData, INavigationMenuProps, ISubMenusData, navigationMenuSource } from './navigation-menu.props.autogenerated';

export interface INavigationMenuViewProps extends INavigationMenuProps<INavigationMenuData> {
    className: string;
    menuItemData: IMenuItemData[];
    Navigation: IModuleProps;
    MenuList: INodeProps;
    ListItem: INodeProps;
    Link: INodeProps;
    Button: INodeProps;
    Span: INodeProps;
    ImageContainer: INodeProps;
    MobileDescriptionContainer: INodeProps;
    MobileBackButton: INodeProps;
    MobileDescriptionLabel: INodeProps;
    imageSettings: IImageSettings;
    gridSettings: IGridSettings;
    isMobileView: boolean;
    DivContainer?: INodeProps;
    ImageDivContainer?: INodeProps;
    showCategoryImage?: boolean;
    showPromotionalContent?: boolean;
}

export type GridSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

export interface INavigationMenuState {
    isMobile: boolean;
}

/**
 *
 * NavigationMenu component.
 * @extends {React.PureComponent<INavigationMenuProps<INavigationMenuData>>}
 */
class NavigationMenu extends React.PureComponent<INavigationMenuProps<INavigationMenuData>, INavigationMenuState> {
    private static CMSItemIdInit: number = MenuTypeIndexId.Cms;

    private static RSItemIdInit: number = MenuTypeIndexId.Retail;

    private resizeThrottledEventHandler?: (event: Event) => void;

    private menuItemList: IMenuItemData[];

    private isRetail: boolean = true;

    private isCMS: boolean = true;

    @observable
    private viewport: GridSize;

    public static getFriendlyName(locale: string, nameTranslations?: TextValueTranslation[]): string | undefined {
        let nameTranslation: TextValueTranslation | undefined;
        if (locale && nameTranslations && nameTranslations.length > 0) {
            nameTranslation = nameTranslations.find(item => item.Language!.toLowerCase() === locale.toLowerCase());
        }

        return nameTranslation && nameTranslation.Text;
    }

    constructor(props: INavigationMenuProps<INavigationMenuData>) {
        super(props);
        this._updateViewport = this._updateViewport.bind(this);
        this.viewport =
            props.context.request && props.context.request.device && props.context.request.device.Type === 'Mobile' ? 'xs' : 'lg';
        this._setNavigationSource(this.props.config && this.props.config.navigationMenuSource);
        this.state = { isMobile: this.isMobile };
        this.menuItemList = [];
    }

    @computed get isMobile(): boolean {
        return this.viewport === 'xs' || this.viewport === 'sm';
    }

    public componentDidMount(): void {
        if (MsDyn365.isBrowser) {
            this.resizeThrottledEventHandler = addThrottledEvent(window, 'resize', this._updateViewport as EventListener);
        }
        this._updateViewport();
    }

    public componentWillUnmount(): void {
        if (MsDyn365.isBrowser) {
            window.removeEventListener('resize', this.resizeThrottledEventHandler!, false);
        }
    }

    public render(): JSX.Element | null {
        this.menuItemList = this._mapData();
        if (isEmptyOrNullObject(this.props.data)) {
            this.props.telemetry.error('Navigatiomenu returned null');
            return null;
        }

        const defaultImageSettings: IImageSettings = {
            viewports: {
                xs: { q: 'w=224&h=300&m=6', w: 0, h: 0 },
                xl: { q: 'w=224&h=300&m=6', w: 0, h: 0 }
            },
            lazyload: true
        };

        const viewProps = {
            ...this.props,
            ...this.state,
            imageSettings: defaultImageSettings,
            gridSettings: this.props.context.request.gridSettings,
            Navigation: {
                moduleProps: this.props,
                className: classnames('ms-nav', this.props.config.className, this.state.isMobile ? 'mobile-vp' : 'desktop-vp'),
                tag: 'nav',
                role: this.isMobile ? 'listbox' : 'navigation'
            },
            MenuList: {
                className: 'ms-nav__list',
                tag: 'ul',
                role: this.isMobile ? 'listbox' : 'menu'
            },
            ListItem: {
                className: 'ms-nav__list__item',
                role: 'presentation',
                tag: 'li'
            },
            showCategoryImage: this.props.config.displayCategoryImage ?? false,
            showPromotionalContent: this.props.config.displayPromotionalImage ?? false,
            Link: {
                tag: 'a',
                className: 'ms-nav__list__item__link',
                role: this.isMobile ? 'option' : 'menuitem'
            },
            DivContainer: {
                tag: 'div',
                className: 'ms-nav__feature'
            },
            ImageDivContainer: {
                tag: 'div',
                className: 'category-image',
                role: 'tabpanel'
            },
            Button: {
                className: 'ms-nav__list__item__button',
                tag: 'button',
                role: this.isMobile ? 'option' : 'menuitem',
                onClick: this.props
            },
            ImageContainer: {
                className: 'ms-nav__list__item__image'
            },
            Span: {
                className: 'ms-nav__list__item__span',
                tag: 'span'
            },
            MobileDescriptionContainer: {
                className: 'ms-nav__list__mobile__container'
            },
            MobileBackButton: {
                className: 'ms-nav__list__mobile__container__button',
                tag: 'button',
                'aria-label': this.props.resources.backButtonAriaLabel,
                onClick: this.props
            },
            MobileDescriptionLabel: {
                className: 'ms-nav__list__mobile__container__span',
                tag: 'span'
            },
            isMobileView: this.state.isMobile,
            menuItemData: this.menuItemList,
            className: classnames('ms-nav', this.props.config.className)
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _mapData(): IMenuItemData[] {
        const { data, config } = this.props;
        const mergedData: IMenuItemData[] = [];
        if (this.isRetail && data && data.categories && data.categories.result && data.categories.result.length > 0) {
            data.categories.result.map((item: CategoryHierarchy, index) =>
                mergedData.push(this._constructMenuItemData(item, undefined, true, index, true))
            );
        }

        if (this.isCMS && config.cmsNavItems && config.cmsNavItems.length > 0) {
            config.cmsNavItems.map((item: ICmsNavItemsData, idx: number) =>
                mergedData.push(this._constructMenuItemData(undefined, item, false, idx + 1))
            );
        }
        return this._constructTopMenuItemData(mergedData);
    }

    private _constructTopMenuItemData(mergedData: IMenuItemData[]): IMenuItemData[] {
        const enableTopLevelMenu = this.props.config.enabletopMenu ?? false;
        if (!enableTopLevelMenu) {
            return mergedData;
        }
        const mergedRootMenuData: IMenuItemData[] = [];
        const topMenu = {
            id: 1,
            linkText: this.props.config.rootMenuNavigation ?? '...',
            linkURL: '#',
            imageSource: undefined,
            subMenu: mergedData
        } as IMenuItemData;
        mergedRootMenuData.push(topMenu);

        return mergedRootMenuData;
    }

    private _constructMenuItemData(
        retailItem?: CategoryHierarchy,
        cmsItem?: ICmsNavItemsData,
        isRetail?: boolean,
        idx?: number,
        addedAllMenu?: boolean
    ): IMenuItemData {
        const locale =
            this.props.context && this.props.context.request && this.props.context.request.locale
                ? this.props.context.request.locale
                : 'en-us';
        const { categoryPromotionalContent } = this.props.config;
        const cmsItemText = (cmsItem && cmsItem.linkText) || '';
        const { menuAriaLabel } = this.props.resources;

        // Filter category promotional data based on category name
        const promotionalData =
            retailItem &&
            categoryPromotionalContent?.filter(promoItem => promoItem.categoryName?.toLowerCase() === retailItem?.Name?.toLowerCase());

        // First check if image is available from promotional data else read from retail server
        let imageSource: string = 'empty';
        if (ArrayExtensions.hasElements(retailItem?.Images) && retailItem!.Images[0].Uri) {
            imageSource = retailItem!.Images[0].Uri;
        }
        if (isRetail) {
            return {
                id: NavigationMenu.RSItemIdInit++,
                linkText: NavigationMenu.getFriendlyName(locale, retailItem?.NameTranslations) ?? '',
                linkURL: retailItem?.Url,
                imageSource,
                subMenu: this._getNestedChildren(retailItem, imageSource, addedAllMenu),
                promotionalContent: this.props.config.displayPromotionalImage && promotionalData,
                menuSource: MenuSource.Retail,
                ariaLabel: `${NavigationMenu.getFriendlyName(locale, retailItem?.NameTranslations) ?? ''} ${menuAriaLabel}`
            } as IMenuItemData;
        }
        return {
            id: NavigationMenu.CMSItemIdInit++,
            linkText: cmsItemText,
            linkURL: (cmsItem && cmsItem.linkUrl && cmsItem.linkUrl.destinationUrl) || '',
            imageDestinationURL: (cmsItem && cmsItem.imageLink && cmsItem.imageLink.destinationUrl) || '',
            imageSource: (cmsItem && cmsItem.image && cmsItem.image.src) || '',
            subMenu: this._getCMSNestedChildren(cmsItem),
            menuSource: MenuSource.Cms,
            shouldOpenNewTab: cmsItem?.openInNewTab,
            ariaLabel: `${cmsItemText} ${menuAriaLabel}`
        } as IMenuItemData;
    }

    private _getNestedChildren(category?: CategoryHierarchy, imageSourceUrl?: string, addedAllMenu: boolean = false): IMenuItemData[] {
        const nestedChildren: IMenuItemData[] = [];
        if (!category || !category.Children || category.Children.length === 0) {
            return [];
        }
        if (!this.props.config.enabletopMenu && addedAllMenu) {
            nestedChildren.push({
                linkText: this.props.resources.allCategoryMenuText,
                imageSource: imageSourceUrl,
                linkURL: getCategoryUrl(category, (this.props.context as unknown) as IActionContext, {})
            });
        }
        category.Children.map((item: CategoryHierarchy, index) => {
            nestedChildren.push(this._constructMenuItemData(item, undefined, true, index, false));
        });
        return nestedChildren;
    }

    private _getCMSNestedChildren(category?: ICmsNavItemsData): IMenuItemData[] {
        const nestedChildren: IMenuItemData[] = [];

        if (!category || !category.subMenus || category.subMenus.length === 0) {
            return [];
        }

        category.subMenus.map((item: ISubMenusData, idx: number) => {
            nestedChildren.push(this._constructMenuItemData(undefined, item, false, idx));
        });
        return nestedChildren;
    }

    private readonly _setNavigationSource = (sourceType?: navigationMenuSource): void => {
        switch (sourceType) {
            case navigationMenuSource.retailServerOnly:
                this.isRetail = true;
                this.isCMS = false;
                break;
            case navigationMenuSource.cmsOnly:
                this.isRetail = false;
                this.isCMS = true;
                break;
            case navigationMenuSource.all:
                this.isRetail = true;
                this.isCMS = true;
                break;
            default:
        }
    };

    private _updateViewport(): void {
        this.viewport = this._getViewport();
        this.setState({ isMobile: this.isMobile });
    }

    private _getViewport(): GridSize {
        const { context } = this.props;

        // Always render in mobile viewport on a mobile device
        if (context.request && context.request.device && context.request.device.Type === 'Mobile') {
            return 'xs';
        }

        if (MsDyn365.isBrowser && window.innerWidth) {
            const gridSettings = context.request.gridSettings;
            if (gridSettings) {
                if (gridSettings.xs && window.innerWidth <= gridSettings.xs.w) {
                    return 'xs';
                } else if (gridSettings.sm && window.innerWidth <= gridSettings.sm.w) {
                    return 'sm';
                } else if (gridSettings.md && window.innerWidth <= gridSettings.md.w) {
                    return 'md';
                } else if (gridSettings.lg && window.innerWidth <= gridSettings.lg.w) {
                    return 'lg';
                }
                return 'xl';
            }
        }

        return 'xs';
    }
}

export default NavigationMenu;
