/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { Customer } from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
import {
    ArrayExtensions,
    updateCustomerPersonalization,
    updateCustomerPersonalizationInput
} from '@msdyn365-commerce-modules/retail-actions';
import {
    Button,
    getPayloadObject,
    getTelemetryAttributes,
    getTelemetryObject,
    IModuleProps,
    INodeProps,
    IPayLoad,
    ITelemetryContent
} from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import get from 'lodash/get';
import { computed, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { IAccountProfileData } from './account-profile.data';
import {
    IAccountProfileProps,
    IEmailAddressSectionHeadingData,
    IHeadingData,
    INameSectionHeadingData
} from './account-profile.props.autogenerated';
import AccountProfileAttributes from './components/account-profile-attributes';
import DescriptionComponent from './components/account-profile-description';
import LinksComponent, { ILinksData } from './components/account-profile-links';
import TextComponent from './components/account-profile-text';

export interface IAccountPreference {
    accountPreference: INodeProps;
    heading: React.ReactNode;
    buttonWrapper: INodeProps;
    buttonYesText: React.ReactNode;
    buttonNoText: React.ReactNode;
    button: React.ReactNode;
    description: React.ReactNode;
    onUpdateAccountPreference(preferenceType?: string): void;
}

export interface IAccountPreferences {
    accountPreferences: INodeProps;
    heading?: React.ReactNode;
    personalization: IAccountPreference;
    extraPreferences?: IAccountPreference[];
}

export interface IAccountProfileItem {
    AccountProfileItem: INodeProps;
    heading?: React.ReactNode;
    links?: React.ReactNode;
    description?: React.ReactNode;
}

export interface IAccountCustomerAttributes {
    customerAttributes?: React.ReactNode;
}

export interface IAccountProfileViewProps extends IAccountProfileProps<IAccountProfileData> {
    AccountProfile: IModuleProps;
    accountProfileWrapper?: INodeProps;
    className: string;
    heading?: React.ReactNode;
    emailSection: IAccountProfileItem;
    nameSection: IAccountProfileItem;
    preferenceSection: IAccountPreferences;
    customerAttributesWrapper?: INodeProps;
    customerAttributesSection?: IAccountCustomerAttributes;
    infoMessageBar?: React.ReactNode;
}

/**
 *
 * AccountProfile component.
 * @extends {React.Component<IAccountProfileProps<IAccountProfileData>>}
 */
@observer
class AccountProfile extends React.Component<IAccountProfileProps<IAccountProfileData>> {
    @observable private isUpdatingPreference: boolean = false;

    private readonly telemetryContent?: ITelemetryContent;
    private readonly payLoad: IPayLoad;
    private readonly editAsyncCustomerFeatureName: string = 'Dynamics.AX.Application.RetailEnableAsyncCustomerEditFeature';

    private isEditAsyncCustomerFeatureEnabled: boolean = false;

    constructor(props: IAccountProfileProps<IAccountProfileData>) {
        super(props);
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }

    public shouldComponentUpdate(nextProps: IAccountProfileProps<IAccountProfileData>): boolean {
        if (this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element {
        const { config, resources, data } = this.props;
        const { className, heading, emailAddressSectionHeading, nameSectionHeading, showAttributes, showPhone, showVatNumber } = config;

        const { editButtonText, editButtonAriaLabel } = resources;
        const customerInformation = data.customerInformation.result;

        this.isEditAsyncCustomerFeatureEnabled =
            data.featureState?.result?.find(feature => feature.Name === this.editAsyncCustomerFeatureName)?.IsEnabled || false;

        const invalidAsyncCustomerState: boolean =
            (this.props.context.app?.config?.canRenderAsyncCustomerDataAsUnmodifiable || false) &&
            (customerInformation?.IsAsyncCustomer || false) &&
            !this.isEditAsyncCustomerFeatureEnabled;

        // As per the design, phone and vat numbers are part of the profile attributes section
        const shouldRenderAttributes = (showAttributes && showAttributes.length > 0) || showPhone || showVatNumber || false;
        const editLink: ILinksData = {
            linkUrl: {
                destinationUrl: get(this.props, 'context.request.user.editProfileUrl', '')
            },
            linkText: editButtonText,
            ariaLabel: editButtonAriaLabel,
            isDisabled: invalidAsyncCustomerState
        };

        console.log('CustomerInformation---->', this.props.data.customerInformation.result);

        const viewProps = {
            ...this.props,
            className,
            AccountProfile: {
                moduleProps: this.props,
                className: classnames('ms-account-profile', config.className)
            },
            infoMessageBar: invalidAsyncCustomerState && (
                <Msdyn365.Text className='ms-account-profile__info' text={resources.accountProcessingPendingInfoMessage} />
            ),
            accountProfileWrapper: {
                className: classnames('ms-account-profile-wrapper')
            },
            heading: heading && (
                <Msdyn365.Text
                    className='ms-account-loyalty-tile__heading'
                    tag={heading.tag || 'h2'}
                    text={heading.text}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            emailSection: this._renderEmailSection(
                classnames('ms-account-profile__section', 'ms-account-profile__section-email'),
                emailAddressSectionHeading as IEmailAddressSectionHeadingData,
                customerInformation && customerInformation.Email
            ),
            nameSection: this._renderNameSection(
                classnames('ms-account-profile__section', 'ms-account-profile__section-name'),
                nameSectionHeading as INameSectionHeadingData,
                this.getDescription(customerInformation),
                Msdyn365.isOboRequest(this.props.context.request) ? undefined : [editLink]
            ),
            preferenceSection: this._renderPreferenceSection(
                classnames('ms-account-profile__section', 'ms-account-profile__section-preferences'),
                invalidAsyncCustomerState,
                customerInformation
            ),
            customerAttributesWrapper: {
                className: classnames('ms-account-profile__attributes-wrapper')
            },
            customerAttributesSection: shouldRenderAttributes && this._renderCustomerAttributes()
        };
        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.heading.text = event.target.value);

    public handleEmailHeadingChange = (event: Msdyn365.ContentEditableEvent) =>
        (this.props.config.emailAddressSectionHeading!.text = event.target.value);

    public handleNameHeadingChange = (event: Msdyn365.ContentEditableEvent) =>
        (this.props.config.nameSectionHeading!.text = event.target.value);

    public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
        if (this.props.resources.editButtonText) {
            this.props.resources.editButtonText = event.target.value;
        }
    };

    @computed get editProfileUrl(): string {
        return get(this.props, 'context.request.user.editProfileUrl', '');
    }

    private getDescription(customerInformation: Customer | undefined): string {
        let description = '';
        if (customerInformation !== undefined) {
            if (customerInformation.FirstName) {
                description += customerInformation.FirstName;
            }
            if (customerInformation.LastName) {
                description += customerInformation.FirstName ? ` ${customerInformation.LastName}` : customerInformation.LastName;
            }
        }
        return description;
    }

    private _renderEmailSection(
        className: string,
        heading?: IEmailAddressSectionHeadingData,
        description?: string,
        links?: ILinksData[]
    ): IAccountProfileItem {
        return {
            AccountProfileItem: {
                className
            },
            heading: heading && heading.text && (
                <Msdyn365.Text
                    className='ms-account-profile__section-heading'
                    tag={heading.tag || 'h2'}
                    text={heading.text}
                    editProps={{ onEdit: this.handleEmailHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            links: links && links.length > 0 && (
                <LinksComponent
                    {...{
                        links,
                        onTextChange: this.handleLinkTextChange,
                        requestContext: this.props.context.request,
                        telemetryContent: this.telemetryContent
                    }}
                />
            ),
            description: description && (
                <DescriptionComponent className='ms-account-profile__section-description' description={description} />
            )
        };
    }

    private _renderNameSection(
        className: string,
        heading?: INameSectionHeadingData,
        description?: string,
        links?: ILinksData[]
    ): IAccountProfileItem {
        if (!ArrayExtensions.hasElements(links)) {
            return {
                AccountProfileItem: {
                    className
                },
                heading: heading && (
                    <Msdyn365.Text
                        className='ms-account-profile__section-heading'
                        tag={heading.tag || 'h2'}
                        text={heading.text}
                        editProps={{ onEdit: this.handleNameHeadingChange, requestContext: this.props.context.request }}
                    />
                ),
                description: description && (
                    <DescriptionComponent className='ms-account-profile__section-description' description={description} />
                )
            };
        }
        return {
            AccountProfileItem: {
                className
            },
            heading: heading && (
                <Msdyn365.Text
                    className='ms-account-profile__section-heading'
                    tag={heading.tag || 'h2'}
                    text={heading.text}
                    editProps={{ onEdit: this.handleNameHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            links: (
                <LinksComponent
                    {...{
                        links,
                        onTextChange: this.handleLinkTextChange,
                        requestContext: this.props.context.request,
                        telemetryContent: this.telemetryContent
                    }}
                />
            ),
            description: description && (
                <DescriptionComponent className='ms-account-profile__section-description' description={description} />
            )
        };
    }

    private readonly onClickEventHandler = (className: string) => async () => {
        return this._updateAccountPersonalization(className);
    };

    private _renderPreferenceSection(
        className: string,
        invalidAsyncCustomerState: boolean,
        customerInformation?: Customer
    ): IAccountPreferences | null {
        const {
            personalizationDescription,
            personalizationEnableButtonAriaLabel,
            webTrackingDescription,
            webTrackingEnableButtonAriaLabel
        } = this.props.resources;
        const { preferencesSectionHeading, personalizationSectionHeading, webTrackingSectionHeading } = this.props.config;
        const { enableDataAnalytics } = this.props.context.request.features;
        const extraPreferences: IAccountPreference[] = [];

        if (!customerInformation) {
            this.props.context.telemetry.error('Account profile data is empty, module wont render');
            return null;
        }

        // Show browser activity login preference if switch is enabled AND a heading is provided
        enableDataAnalytics &&
            webTrackingSectionHeading &&
            extraPreferences.push(
                this._renderPreference(
                    'web-tracking',
                    webTrackingSectionHeading as IHeadingData,
                    webTrackingEnableButtonAriaLabel,
                    webTrackingDescription,
                    customerInformation.OptOutWebActivityTracking || false,
                    invalidAsyncCustomerState
                )
            );

        return {
            accountPreferences: {
                className
            },
            heading: preferencesSectionHeading && (
                <Msdyn365.Text
                    className='ms-account-profile__section-heading'
                    tag={preferencesSectionHeading.tag || 'h2'}
                    text={preferencesSectionHeading.text}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            personalization: this._renderPreference(
                'personalization',
                personalizationSectionHeading as IHeadingData,
                personalizationEnableButtonAriaLabel,
                personalizationDescription,
                customerInformation.OptOutPersonalization || false,
                invalidAsyncCustomerState
            ),
            extraPreferences: extraPreferences || undefined
        };
    }

    private readonly _renderPreference = (
        className: string,
        sectionHeading: IHeadingData,
        enableAriaLabel: string,
        description: string,
        isOptOut: boolean,
        disableBtn: boolean
    ) => {
        const { toggleDisableText, toggleEnableText } = this.props.resources;
        const toggleState = isOptOut ? 'disable' : 'enable';
        const onClickHandler = this.onClickEventHandler(className);
        this.payLoad.contentAction.etext = sectionHeading.text;
        const attributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);

        return {
            accountPreference: {
                className: classnames('ms-account-profile__preference', `ms-account-profile__preference-${className}`, {
                    'ms-account-profile__personalization-updating': this.isUpdatingPreference
                })
            },
            heading: sectionHeading && (
                <Msdyn365.Text
                    className='ms-account-profile__preference-heading'
                    tag={sectionHeading.tag || 'h2'}
                    text={sectionHeading.text}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            buttonWrapper: {
                className: classnames('ms-account-profile__toggle-wrapper', `ms-account-profile__toggle-${toggleState}`, {
                    // Disable the toggle completely if customer is async.
                    'ms-account-profile__toggle-disabled': disableBtn
                })
            },
            buttonYesText: <TextComponent className='ms-account-profile__toggle-enable-text' text={toggleEnableText} />,
            buttonNoText: <TextComponent className='ms-account-profile__toggle-disable-text' text={toggleDisableText} />,
            button: (
                <Button
                    className={classnames('ms-account-profile__toggle-button', `ms-account-profile__toggle-${toggleState}-button`)}
                    aria-label={enableAriaLabel}
                    value={isOptOut.toString()}
                    aria-pressed={!isOptOut}
                    onClick={onClickHandler}
                    disabled={disableBtn}
                    {...attributes}
                />
            ),
            description: <DescriptionComponent className='ms-account-profile__preference-description' description={description} />,
            onUpdateAccountPreference: async () => this._updateAccountPersonalization(className)
        };
    };

    private readonly _updateAccountPersonalization = async (preferenceType?: string) => {
        const customerInformation = this.props.data.customerInformation.result;

        if (customerInformation) {
            const {
                telemetry,
                context: { request, actionContext }
            } = this.props;

            let isOptOutPersonalization = false;
            let input;

            switch (preferenceType) {
                case 'web-tracking':
                    isOptOutPersonalization = customerInformation.OptOutWebActivityTracking || false;
                    input = new updateCustomerPersonalizationInput(
                        customerInformation.AccountNumber,
                        !isOptOutPersonalization,
                        request.apiSettings,
                        preferenceType
                    );
                    break;
                case undefined:
                case 'personalization':
                default:
                    isOptOutPersonalization = customerInformation.OptOutPersonalization || false;
                    input = new updateCustomerPersonalizationInput(
                        customerInformation.AccountNumber,
                        !isOptOutPersonalization,
                        request.apiSettings,
                        preferenceType
                    );
            }

            this.isUpdatingPreference = true;

            try {
                await updateCustomerPersonalization(input, actionContext);
            } catch (error) {
                if (telemetry) {
                    telemetry.exception(error);
                    telemetry.debug('Unable to update customer personalization');
                }
            }

            this.isUpdatingPreference = false;
        }
    };

    private readonly _renderCustomerAttributes = (): React.ReactNode => {
        return <AccountProfileAttributes accountProfileProps={this.props} />;
    };
}

export default AccountProfile;
