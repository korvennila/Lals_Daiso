/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import {
    Button,
    getPayloadObject,
    getTelemetryAttributes,
    getTelemetryObject,
    IModuleProps,
    INodeProps,
    IPayLoad,
    ITelemetryContent,
    TelemetryConstant
} from '@msdyn365-commerce-modules/utilities';
import classname from 'classnames';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { OrderOriginator, OrderShipments } from '@msdyn365-commerce/retail-proxy';
import { Label } from '@msdyn365-commerce-modules/order-management';
import {
    getSalesOrderHistoryWithHydrationsAction,
    GetSalesOrderHistoryWithHydrationsInput,
    IOrderHistory,
    IPaging
} from './actions/get-order-shipment-history';
import { getOriginatorsAction, GetOrderOriginatorsInput } from '@msdyn365-commerce-modules/order-management';
import { getSalesOrder, ISalesOrder } from './components/get-sales-order';
import { OrderHistoryFilterComponent, OrderHistoryFilterState } from './components/order-history-filter';
import { OrderHistoryTableComponent } from './components/table-view';
import { IOrderHistoryData } from './order-history.data';
import { IOrderHistoryProps } from './order-history.props.autogenerated';

/**
 * Specifies different layouts for order history.
 */
export enum OrderHistoryViewMode {
    listView = 0,
    detailedView = 1
}

export interface IHeader {
    headerProps: INodeProps;
    heading: React.ReactNode;
    orderCountLabel?: React.ReactNode;
    extraActions?: React.ReactNode;
}

export interface IList {
    listProps: INodeProps;
    salesOrders: ISalesOrder[];
}

export interface IOrderHistoryViewState {
    isDataReady: boolean;
    hasError: boolean;
    isLoading: boolean;
    isShowMoreButton: boolean;
    errorCode?: string;
    errorMessage?: string;
}

export interface IOrderHistoryViewProps extends IOrderHistoryProps<IOrderHistoryData> {
    orderHistory: IOrderHistory;
    orderHistoryProps: IModuleProps;
    alert?: React.ReactNode;
    loading?: React.ReactNode;
    emptyMessage?: React.ReactNode;
    header: IHeader;
    backToShoppingLink?: React.ReactNode;
    list?: IList;
    table?: React.ReactNode;
    moreButton?: React.ReactNode;
    viewState: IOrderHistoryViewState;
}

/**
 *
 * OrderHistory component.
 * @extends {React.Component<IOrderHistoryProps<IOrderHistoryData>>}
 */
@observer
class OrderHistory extends React.Component<IOrderHistoryProps<IOrderHistoryData>> {
    @observable private orderHistory!: IOrderHistory;

    @observable private viewState!: IOrderHistoryViewState;

    @observable private _viewMode: OrderHistoryViewMode;

    private originatorList!: OrderOriginator[];

    private filterState: OrderHistoryFilterState;

    private pageSize!: number;

    private paging!: IPaging;

    private readonly telemetryContent?: ITelemetryContent;

    private readonly payLoad: IPayLoad;

    constructor(props: IOrderHistoryProps<IOrderHistoryData>) {
        super(props);
        this.initState();
        this._viewMode = OrderHistoryViewMode.detailedView;
        this.filterState = OrderHistoryFilterState.CurrentUser;
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this.payLoad = getPayloadObject('click', this.telemetryContent, '');
    }

    public componentDidMount(): void {
        if (this.props.context.actionContext.requestContext.user.isAuthenticated) {
            this._updateOrderHistory();
        } else {
            this.viewState.isDataReady = true;
        }
    }

    public shouldComponentUpdate(nextProps: IOrderHistoryProps<IOrderHistoryData>, nextState: IOrderHistoryViewState): boolean {
        if (this.state === nextState && this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element {
        const {
            config: { heading, className, showChannelInfo, shouldShowCount },
            resources: {
                genericErrorMessage,
                noOrderHistoryLable,
                moreButtonText,
                backToShopping,
                orderCountLabel,
                ordersCountLabel,
                loadingLabel
            }
        } = this.props;
        const { salesOrders, products } = this.orderHistory;
        const { isDataReady, hasError, isShowMoreButton, isLoading } = this.viewState;
        const backToShoppingUrl = Msdyn365.getUrlSync('home', this.props.context.actionContext) || '';
        const channelIdentities = this.props.data.channels.result && this.props.data.channels.result.channelIdentities;
        const orgUnitLocations = this.props.data.orgUnitLocations.result && this.props.data.orgUnitLocations.result.orgUnitLocations;
        const customer = this.props.data.customerInformation && this.props.data.customerInformation.result;

        let viewProps: IOrderHistoryViewProps = {
            ...this.props,
            orderHistory: this.orderHistory,
            viewState: this.viewState,
            orderHistoryProps: {
                moduleProps: this.props,
                className: classname('ms-order-history', className)
            },
            header: {
                headerProps: { className: 'ms-order-history__header' },
                heading: heading && heading.text && (
                    <Msdyn365.Text
                        {...heading}
                        className='ms-order-history__heading'
                        text={heading.text}
                        tag={heading.tag || 'h2'}
                        editProps={{ onEdit: this.handleOrderHistoryHeadingChange, requestContext: this.props.context.request }}
                    />
                ),
                extraActions: this.renderExtraActions()
            },
            backToShoppingLink: backToShoppingUrl && (
                <Button className='ms-order-history__btn-keep-shopping' href={backToShoppingUrl}>
                    {backToShopping}
                </Button>
            )
        };

        if (hasError) {
            viewProps = {
                ...viewProps,
                alert: <Label className='ms-order-history__alert' label={genericErrorMessage} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!isDataReady) {
            viewProps = {
                ...viewProps,
                loading: <Label className='ms-order-history__loading' label={loadingLabel} />
            };
            return this.props.renderView(viewProps) as React.ReactElement;
        }

        if (!salesOrders || salesOrders.length === 0) {
            if (this.viewState.errorCode === 'Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed') {
                viewProps = {
                    ...viewProps,
                    emptyMessage: <p className='ms-order-history__empty-message'>{this.viewState.errorMessage}</p>
                };
            } else {
                viewProps = {
                    ...viewProps,
                    emptyMessage: <p className='ms-order-history__empty-message'>{noOrderHistoryLable}</p>
                };
            }

            return this.props.renderView(viewProps) as React.ReactElement;
        }

        const _orderCountLabel = salesOrders.length === 1 ? orderCountLabel : ordersCountLabel;
        this.payLoad.contentAction.etext = TelemetryConstant.ViewMore;
        const viewMoreAttributes = getTelemetryAttributes(this.telemetryContent!, this.payLoad);

        const productsDetailedViewLimit = 5;

        viewProps = {
            ...viewProps,
            header: {
                ...viewProps.header,
                orderCountLabel: shouldShowCount ? (
                    <span className='ms-order-history__order-count'>{`(${salesOrders.length} ${_orderCountLabel})`}</span>
                ) : (
                    undefined
                ),
                extraActions: this.renderExtraActions()
            },
            table:
                this._viewMode === OrderHistoryViewMode.listView ? (
                    <OrderHistoryTableComponent
                        id={this.props.id}
                        typeName={this.props.typeName}
                        context={this.props.context}
                        className='ms-order-history__table-list'
                        shouldShowChannelInfo={this.props.config.showChannelInfo ?? false}
                        shouldShowOrderPlacedBy={Msdyn365.isChannelTypeB2B(this.props.context.request) ?? false}
                        data={{
                            orderHistory: this.orderHistory,
                            channelIdentities,
                            orgUnitLocations,
                            customer,
                            originators: this.originatorList
                        }}
                        resources={this.props.resources}
                    />
                ) : (
                    undefined
                ),
            list:
                this._viewMode === OrderHistoryViewMode.detailedView
                    ? {
                          listProps: { className: 'ms-order-history__sales-order-list' },
                          salesOrders: salesOrders.map(salesOrder =>
                              getSalesOrder({
                                  ...this.props,
                                  products,
                                  salesOrder,
                                  channelIdentities,
                                  orgUnitLocations,
                                  showChannelInfo,
                                  customer,
                                  originator: this.originatorList.find(
                                      o =>
                                          (salesOrder.SalesId && o.SalesId === salesOrder.SalesId) ||
                                          (salesOrder.TransactionId && o.TransactionId === salesOrder.TransactionId)
                                  ),
                                  salesLinesLimit: productsDetailedViewLimit,
                                  telemetryContent: this.telemetryContent
                              })
                          )
                      }
                    : undefined,
            moreButton: isShowMoreButton && (
                <Button
                    className={`ms-order-history__btn-more ${isLoading ? 'is-busy' : ''}`}
                    {...viewMoreAttributes}
                    disabled={isLoading}
                    onClick={this.onMoreButtonClick}
                >
                    {moreButtonText}
                </Button>
            )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    public handleOrderHistoryHeadingChange = (event: Msdyn365.ContentEditableEvent) =>
        (this.props.config.heading!.text = event.target.value);

    private readonly onMoreButtonClick = () => {
        this.getOrderHistory();
    };

    private readonly renderExtraActions = () => {
        return (
            <>
                {this._renderOrderHistoryFilter()}
                {this._renderViewModes()}
            </>
        );
    };

    /**
     * Renders a filter for order history.
     * @returns A react node or undefined if customer info is not ready.
     */
    private readonly _renderOrderHistoryFilter = () => {
        return (
            this.props.data.customerInformation &&
            this.props.data.customerInformation.result && (
                <OrderHistoryFilterComponent
                    id={this.props.id}
                    typeName={this.props.typeName}
                    context={this.props.context}
                    className='ms-order-history__ms-order-history-filter'
                    resources={this.props.resources}
                    data={{ customerInformation: this.props.data.customerInformation.result }}
                    currentState={this.filterState}
                    onFilterStateChanged={this.onFilterStateChanged}
                />
            )
        );
    };

    /**
     * Renders view mode switches for order history.
     * @returns A react node.
     */
    private readonly _renderViewModes = () => {
        if (!this.props.config.isGridViewEnabled) {
            return null;
        }

        const viewModesClassName = 'ms-order-history__ms-order-history-view-modes';
        return (
            <div className={viewModesClassName}>
                <Button
                    className={classname(
                        `${viewModesClassName}__detailed-view`,
                        this._viewMode === OrderHistoryViewMode.detailedView ? 'msc-view-modes__selected' : ''
                    )}
                    title={this.props.resources.orderHistoryDetailedViewModeAriaLabel}
                    aria-label={this.props.resources.orderHistoryDetailedViewModeAriaLabel}
                    role='button'
                    onClick={this._setDetailedViewMode}
                />
                <Button
                    className={classname(
                        `${viewModesClassName}__list-view`,
                        this._viewMode === OrderHistoryViewMode.listView ? 'msc-view-modes__selected' : ''
                    )}
                    title={this.props.resources.orderHistoryListViewModeAriaLabel}
                    aria-label={this.props.resources.orderHistoryListViewModeAriaLabel}
                    role='button'
                    onClick={this._setListViewMode}
                />
            </div>
        );
    };

    private readonly initState = () => {
        this.orderHistory = {
            salesOrders: [],
            products: [],
            nextPageToken: ''
        };
        this.originatorList = [];
        this.viewState = {
            isDataReady: false,
            hasError: false,
            isShowMoreButton: (this.props.config.pageSize || 0) > 0,
            isLoading: false,
            errorCode: '',
            errorMessage: ''
        };
        this.pageSize = this.props.config.pageSize || 10;
        this.paging = {
            top: this.pageSize,
            skip: 0
        };
    };

    /**
     * Updates view mode to be list view.
     */
    private readonly _setListViewMode = () => {
        this._viewMode = OrderHistoryViewMode.listView;
    };

    /**
     * Updates view mode to be detailed view.
     */
    private readonly _setDetailedViewMode = () => {
        this._viewMode = OrderHistoryViewMode.detailedView;
    };

    private readonly onFilterStateChanged = (state: OrderHistoryFilterState) => {
        this.initState();
        this.filterState = state;
        this._updateOrderHistory();
    };

    /**
     * Retrieves the data and updates the view state.
     */
    private readonly _updateOrderHistory = () => {
        this.getOrderHistory()
            .then(() => {
                this.viewState.isDataReady = true;
            })
            .catch(() => {
                this.viewState.hasError = true;
            });
    };

    private readonly getOriginator = async (salesOrders: OrderShipments[]): Promise<void> => {
        if (Msdyn365.isUserTypeB2B(this.props.context.request)) {
            const actionContext = this.props.context.actionContext;
            let result: OrderOriginator[] | undefined;
            try {
                const salesIds = salesOrders.map(order => order.SalesId ?? '').filter(id => id !== '');
                const transactionIds = salesOrders.map(order => order.TransactionId ?? '').filter(id => id !== '');
                const originatorsInput = new GetOrderOriginatorsInput(transactionIds, salesIds, this.props.context.request.apiSettings);
                result = await getOriginatorsAction(originatorsInput, actionContext);
            } catch (error) {
                result = undefined;
            }
            if (result) {
                this.originatorList.push(...result);
            }
        }
    };

    private readonly getOrderHistory = async (): Promise<void> => {
        const actionContext = this.props.context.actionContext;
        const input = new GetSalesOrderHistoryWithHydrationsInput(
            this.paging,
            this.props.context.request.apiSettings,
            this.filterState,
            this.orderHistory.nextPageToken
        );

        try {
            this.viewState.isLoading = true;
            const response = await getSalesOrderHistoryWithHydrationsAction(input, actionContext);
            if (response) {
                const { products, salesOrders } = response;
                this.orderHistory.products.push(...products);
                this.orderHistory.salesOrders.push(...salesOrders);
                this.viewState.isShowMoreButton =
                    this.viewState.isShowMoreButton && response.salesOrders.length > 0 && response.salesOrders.length === this.pageSize;
                this.paging.skip += this.pageSize;
                this.orderHistory.nextPageToken = response.nextPageToken;
                await this.getOriginator(salesOrders);
            }
            this.viewState.isLoading = false;

            await Promise.resolve();
            return;
        } catch (error) {
            this.viewState.isLoading = false;

            if (error?.error?.name === 'Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed') {
                this.viewState.errorCode = 'Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed';
                this.viewState.errorMessage = error.error?.name;
                return Promise.reject();
            }

            return Promise.reject();
        }
    };
}

export default OrderHistory;
