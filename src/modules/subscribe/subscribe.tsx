/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { Button, IModuleProps, INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ISubscribeConfig, ISubscribeProps } from './subscribe.props.autogenerated';

/**
 * Subscribe view props.
 */
export interface ISubscribeViewProps extends ISubscribeProps<ISubscribeConfig> {
    subscribe: IModuleProps;
    subscribeContainer: INodeProps;
    heading: React.ReactNode;
    text: React.ReactNode;
    submitButton?: INodeProps;
    submitButtonLabelText?: string;
    subscribeForm?: INodeProps;
    emailInput?: INodeProps;
    handleText(): void;
}

/**
 * Subscribe component.
 * @extends {React.PureComponent<ISubscribeProps<ISubscribeData>>}
 */
export class Subscribe extends React.PureComponent<ISubscribeProps<ISubscribeConfig>> {
    private readonly _emailAddressInputRef: React.RefObject<HTMLInputElement>;

    public constructor(props: ISubscribeViewProps) {
        super(props);
        this._emailAddressInputRef = React.createRef();
    }

    public render(): JSX.Element | null {
        const { heading, paragraph } = this.props.config;

        const moduleClassName = 'ms-subscribe';

        const subscribeParagraph = paragraph && (
            <Msdyn365.RichTextComponent
                text={paragraph}
                className='ms-subscribe__details__text'
                editProps={{ onEdit: this.handleParagraphChange, requestContext: this.props.context.request }}
            />
        );

        const subscribeHeading = heading && (
            <Msdyn365.Text
                className='ms-subscribe__details__heading'
                tag={heading.tag ?? 'h1'}
                text={heading.text}
                editProps={{ onEdit: this.handleTextChange, requestContext: this.props.context.request }}
            />
        );
        const viewProps = {
            ...this.props,
            handleText: this.handleTextChange,
            subscribe: {
                moduleProps: this.props,
                className: moduleClassName
            },
            subscribeContainer: {
                className: 'ms-subscribe__details'
            },
            heading: subscribeHeading,
            text: subscribeParagraph,
            subscribeForm: {
                className: 'ms-subscribe__details__form',
                tag: 'form',
                'aria-label': this.props.resources.subscribeFormAriaLabel,
                name: 'subscribeForm',
                role: 'form',
                autoComplete: 'off'
            },
            emailInput: {
                className: 'ms-subscribe__details__form__email',
                tag: 'input',
                ref: this._emailAddressInputRef,
                type: 'email',
                'aria-label': this.props.resources.subscribeFormEmailAriaLabel,
                placeholder: this.props.resources.subscribeEmailPlaceholderText
            },
            submitButton: {
                className: 'ms-subscribe__details__form__submit',
                tag: Button,
                'aria-label': this.props.resources.subscribeFormSubmitAriaLabel,
                type: 'submit',
                title: this.props.resources.subscribeButtonLabel
            },
            submitButtonLabelText: this.props.resources.subscribeButtonLabel
        };

        return this.props.renderView(viewProps);
    }

    /**
     * Handle text change.
     * @param event - The dialog that is allowed to remain open.
     */
    public handleTextChange = (event: Msdyn365.ContentEditableEvent): void => {
        this.props.config.heading!.text = event.target.value;
    };

    /**
     * Handle paragraph change.
     * @param event - The dialog that is allowed to remain open.
     */
    public handleParagraphChange = (event: Msdyn365.ContentEditableEvent): void => {
        this.props.config.paragraph = event.target.value;
    };
}

export default Subscribe;
