/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { Customer } from '@msdyn365-commerce/retail-proxy';
import { Alert, Button, INodeProps, NodeTag, getLocaleBasedCustomizedPrice, ILocalizedPrice } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ICheckoutCustomerAccountPaymentResources } from '../checkout-customer-account-payment.props.autogenerated';

export interface IGetAccountPaymentEditViewFormInput {
    resources: ICheckoutCustomerAccountPaymentResources;
    customizedAmt: string;
    amount: number;
    amountVariable: string;
    maxAmount: number;
    customer: Customer | undefined;
    customerCreatedDate: string;
    availableCredit: string;
    showCreditLimit: boolean;
    errorMessage: string | undefined;
    creditSectionIsExpanded: boolean;
    orderTotal: string;
    excessCredit: string | undefined;
    appliedAmount: string | undefined;
    locale: string;
    onAddPayment(): Promise<void>;
    onChangePaymentAmount(customizedAmt: string, paymentAmount: number, amountVariable: string): void;
    onToggleCreditSection(): void;
    onRemovePayment(): Promise<void>;
    skipOnChangeLogic?: boolean;
}

export interface IAccountPaymentEditViewForm {
    formProps: INodeProps;
    inputLabel: React.ReactNode;
    inputAmount: React.ReactNode;
    addPaymentButton: React.ReactNode;
    customerName: React.ReactNode;
    customerAccountNumber: React.ReactNode;
    customerSince: React.ReactNode;
    accountCredit: React.ReactNode;
    alert: React.ReactNode;
    accountDetails: React.ReactNode;
    appliedLine: React.ReactNode;
    bottomBorder: React.ReactNode;
}

/**
 * On Add Account Payment Function.
 * @param onAddPayment -On Add Payment Function.
 * @returns Call of Add payment function.
 */
const onAddAccountPayment = (onAddPayment: () => Promise<void>) => async (event: React.SyntheticEvent): Promise<void> => {
    event.preventDefault();
    await onAddPayment();
};

/**
 * On Change Amount Function.
 * @param onChangePaymentAmount -On Change Payment Amount Function.
 * @returns Call of Change payment Amount function.
 */
const onChangeAmountHandler = (
    customizedAmt: string,
    paymentAmount: number,
    amountVariable: string,
    locale: string,
    onChangePaymentAmount: (customizedAmt: string, paymentAmount: number, amountVariable: string) => void
) => (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    const customState: ILocalizedPrice = {
        customizedAmount: customizedAmt,
        amountVariable: amountVariable,
        paymentAmount: paymentAmount
    };
    const returnModifiedState = getLocaleBasedCustomizedPrice(value, customState, locale, keyCode);
    customizedAmt = returnModifiedState.customizedAmount as string;
    paymentAmount = returnModifiedState.paymentAmount as number;
    amountVariable = returnModifiedState.amountVariable as string;
    onChangePaymentAmount(customizedAmt, paymentAmount, amountVariable);
    keyCode = 0;
};

let keyCode: number = 0;
export const getAccountPaymentFormEditMode = (options: IGetAccountPaymentEditViewFormInput): IAccountPaymentEditViewForm => {
    const {
        resources,
        onAddPayment,
        amount,
        customizedAmt,
        amountVariable,
        onChangePaymentAmount,
        maxAmount,
        customer,
        customerCreatedDate,
        availableCredit,
        showCreditLimit,
        errorMessage,
        onToggleCreditSection,
        creditSectionIsExpanded,
        orderTotal,
        excessCredit,
        onRemovePayment,
        appliedAmount,
        locale,
        skipOnChangeLogic
    } = options;

    const {
        addPaymentButtonLabel,
        inputAmountLabel,
        inputAmountAriaLabel,
        customerSinceLabel,
        accountCreditLabel,
        creditDetailsSectionLabel,
        orderTotalLabel,
        availableCreditLabel,
        creditExcessLabel,
        appliedCustomerAccountPaymentLabel,
        removeCustomerAccountPaymentLabel,
        accountCreditDetails
    } = resources;

    const inputLabel = (
        <span id='ms-checkout-customer-account__label' className='ms-checkout-customer-account__input-label'>
            {inputAmountLabel}
        </span>
    );

    const formProps = {
        className: 'ms-checkout-customer-account__form-edit',
        onSubmit: onAddAccountPayment(onAddPayment),
        tag: 'form' as NodeTag
    };

    const addPaymentButton = (
        <Button
            className='ms-checkout-customer-account__btn-pay'
            onClick={onAddAccountPayment(onAddPayment)}
            disabled={amount > maxAmount || amount < 0 || Number.isNaN(amount)}
        >
            {addPaymentButtonLabel}
        </Button>
    );

    const inputAmount = (
        <input
            type='text'
            className='ms-checkout-customer-account__input-amount form-control'
            value={customizedAmt}
            onInput={
                skipOnChangeLogic
                    ? ({ currentTarget: { value } }) => onChangePaymentAmount(value, Number(value), value)
                    : onChangeAmountHandler(customizedAmt, amount, amountVariable, locale, onChangePaymentAmount)
            }
            onKeyDown={event => (keyCode = event.which)}
            aria-label={inputAmountAriaLabel}
            aria-valuemin={0}
            aria-valuemax={maxAmount}
            aria-valuenow={amount}
            min={0}
            max={maxAmount}
        />
    );

    const customerName = <div className='ms-checkout-customer-account__account-name'>{customer?.Name}</div>;

    const customerAccountNumber = <div className='ms-checkout-customer-account__account-number'>#{customer?.AccountNumber}</div>;

    const customerSince = (
        <div className='ms-checkout-customer-account__customer-since'>
            {customerSinceLabel}
            {customerCreatedDate}
        </div>
    );

    const accountCredit = (
        <>
            <span className='ms-checkout-customer-account__account-credit-label'>{accountCreditLabel}</span>
            {showCreditLimit && <span className='ms-checkout-customer-account__account-credit'>{availableCredit}</span>}
            <span
                className={
                    creditSectionIsExpanded
                        ? 'ms-checkout-customer-account__account-credit-toggle-up'
                        : 'ms-checkout-customer-account__account-credit-toggle-down'
                }
                onClick={onToggleCreditSection}
                role='button'
                aria-label={accountCreditDetails}
            />
        </>
    );

    const accountDetails = creditSectionIsExpanded ? (
        <div className='ms-checkout-customer-account__credit-details-section'>
            <>
                <div className='ms-checkout-customer-account__account-credit-current-order-preview'>
                    <span className='ms-checkout-customer-account__account-credit-current-order-icon' />
                    <span className='ms-checkout-customer-account__account-credit-current-order-preview-label'>
                        {creditDetailsSectionLabel}
                    </span>
                </div>
            </>
            <div className='ms-checkout-customer-account__available-credit-section'>
                <span className='ms-checkout-customer-account__available-credit-label'>{availableCreditLabel}</span>
                <span className='ms-checkout-customer-account__available-credit'>{availableCredit}</span>
            </div>
            <div className='ms-checkout-customer-account__order-total-section'>
                <span className='ms-checkout-customer-account__order-total-label'>{orderTotalLabel}</span>
                <span className='ms-checkout-customer-account__order-total'>{orderTotal}</span>
            </div>
            <div className='ms-checkout-customer-account__excess-credit-section'>
                <span className='ms-checkout-customer-account__excess-credit-label'>{creditExcessLabel}</span>
                <span className='ms-checkout-customer-account__excess-credit'>{excessCredit ?? '0'}</span>
            </div>
        </div>
    ) : (
        undefined
    );

    const alert = (
        <Alert
            tag='span'
            id='ms-checkout-customer-account__error'
            className='ms-checkout-customer-account__input-error'
            role='alert'
            assertive={false}
            fade={false}
            includeAlertClass={false}
            isOpen={!!errorMessage}
        >
            {errorMessage}
        </Alert>
    );

    const appliedLine = appliedAmount ? (
        <div className='ms-checkout-customer-account__applied-line'>
            <span className='ms-checkout-customer-account__applied-label'>{appliedCustomerAccountPaymentLabel}</span>
            <span className='ms-checkout-customer-account__applied-amount'>{appliedAmount}</span>
            <a className='ms-checkout-customer-account__remove' onClick={onRemovePayment} role='button'>
                {removeCustomerAccountPaymentLabel}
            </a>
        </div>
    ) : (
        undefined
    );

    const bottomBorder = <div className='ms-checkout-customer-account__bottom-border' />;

    return {
        formProps,
        inputLabel,
        inputAmount,
        addPaymentButton,
        customerName,
        customerAccountNumber,
        customerSince,
        accountCredit,
        alert,
        accountDetails,
        appliedLine,
        bottomBorder
    };
};
