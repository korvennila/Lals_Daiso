/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { IUnsubscribeData } from './unsubscribe.data';
import { IUnsubscribeProps } from './unsubscribe.props.autogenerated';

export interface IUnsubscribeViewProps extends IUnsubscribeProps<IUnsubscribeData> {
    unsubscribeResponse: string | null;
    handleUnsubscribe: () => void;
    emailInputRef: React.RefObject<HTMLInputElement>;
    validationError: string | null;
    apiCalled: boolean;
}

/**
 *
 * Unsubscribe component
 * @extends {React.PureComponent<IUnsubscribeProps<IUnsubscribeData>>}
 */
interface IUnsubscribeState {
    unsubscribeResponse: string | null;
    validationError: string | null;
    apiCalled: boolean;
}

class Unsubscribe extends React.PureComponent<IUnsubscribeProps<IUnsubscribeData>, IUnsubscribeState> {
    private emailInputRef: React.RefObject<HTMLInputElement>;

    public constructor(props: IUnsubscribeProps<IUnsubscribeData>) {
        super(props);
        this.state = {
            unsubscribeResponse: null,
            validationError: null,
            apiCalled: false
        };
        this.emailInputRef = React.createRef();
    }

    private validateEmail(email: string): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    private handleUnsubscribe = async (): Promise<void> => {
        const email = this.emailInputRef.current?.value;
        if (!email) {
            this.setState({ validationError: this.props.resources.emailRequiredText, unsubscribeResponse: null, apiCalled: false });
            return;
        }
        if (!this.validateEmail(email)) {
            this.setState({ validationError: this.props.resources.emailValidateText, unsubscribeResponse: null, apiCalled: false });
            return;
        }

        this.setState({ validationError: null, apiCalled: true });

        const apiUrl = `https://yourapiendpoint.com/unsubscribe?email=${email}`;
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            this.setState({ unsubscribeResponse: data.message });

            // Redirect to home page after a delay
            setTimeout(() => {
                window.location.href = '/';
            }, 3000);
        } catch (error) {
            console.error('Failed to unsubscribe:', error);
            this.setState({ unsubscribeResponse: 'Failed to unsubscribe. Please try again.' });
        }
    };

    public render(): JSX.Element | null {
        const viewProps: IUnsubscribeViewProps = {
            ...this.props,
            unsubscribeResponse: this.state.unsubscribeResponse,
            handleUnsubscribe: this.handleUnsubscribe,
            emailInputRef: this.emailInputRef,
            validationError: this.state.validationError,
            apiCalled: this.state.apiCalled
        };

        return this.props.renderView(viewProps);
    }
}

export default Unsubscribe;
