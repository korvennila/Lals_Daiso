/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { IUnsubscribeData } from './unsubscribe.data';
import { IUnsubscribeProps } from './unsubscribe.props.autogenerated';

export interface IUnsubscribeViewProps extends IUnsubscribeProps<IUnsubscribeData> {
    unsubscribeResponse: string | null;
    handleUnsubscribe: () => void;
    emailInputRef: React.RefObject<HTMLInputElement>;
    validationError: string | null;
    apiCalled: boolean;
    email: string;
    onEmailChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

interface IUnsubscribeState {
    unsubscribeResponse: string | null;
    validationError: string | null;
    apiCalled: boolean;
    email: string;
}

class Unsubscribe extends React.PureComponent<IUnsubscribeProps<IUnsubscribeData>, IUnsubscribeState> {
    private emailInputRef: React.RefObject<HTMLInputElement>;

    public constructor(props: IUnsubscribeProps<IUnsubscribeData>) {
        super(props);

        // Context Variables
        const cCustomerEmailAddress = props.context.request.user.emailAddress ? props.context.request.user.emailAddress : '';

        this.state = {
            unsubscribeResponse: null,
            validationError: null,
            apiCalled: false,
            email: cCustomerEmailAddress
        };

        this.emailInputRef = React.createRef();
    }

    private validateEmail(email: string): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    private handleUnsubscribe = async (): Promise<void> => {
        const cRetailURL = this.props.context.request.apiSettings.baseUrl;
        const cRetailOUN = this.props.context.request.apiSettings.oun ? this.props.context.request.apiSettings.oun : '';
        const cCustomerAccount = this.props.context.request.user.customerAccountNumber
            ? this.props.context.request.user.customerAccountNumber
            : '';
        const email = this.state.email;
        if (!email) {
            this.setState({ validationError: this.props.resources.emailRequiredText, unsubscribeResponse: null, apiCalled: false });
            return;
        }
        if (!this.validateEmail(email)) {
            this.setState({ validationError: this.props.resources.emailValidateText, unsubscribeResponse: null, apiCalled: false });
            return;
        }

        this.setState({ validationError: null, apiCalled: true });

        const apiUrl = `${cRetailURL}commerce/SaveSubscriptionsRequest?api-version=7.3`;
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    OUN: cRetailOUN,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0'
                },
                body: JSON.stringify({
                    Email: email,
                    CustAccount: cCustomerAccount,
                    Subscribe: 0,
                    Unsubscribe: 1
                })
            });

            if (response.status === 200) {
                const data = await response.json();
                if (data.value === 1) {
                    this.setState({
                        unsubscribeResponse: this.props.resources.unsubscriptionSuccessMessage
                    });
                } else {
                    this.setState({ unsubscribeResponse: this.props.resources.unsubscriptionAlreadySenteMessage });
                }
            } else {
                this.setState({ unsubscribeResponse: this.props.resources.unsubscriptionFailureMessage });
            }

            // Redirect to home page after a delay
            setTimeout(() => {
                window.location.href = this.props.config.unsubscribeRedirectionLink
                    ? `${this.props.config.unsubscribeRedirectionLink?.linkUrl.destinationUrl}`
                    : '#';
            }, 3000);
        } catch (error) {
            console.error('Failed to unsubscribe:', error);
            this.setState({ unsubscribeResponse: 'Failed to unsubscribe. Please try again.' });
        }
    };

    private handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        this.setState({ email: event.target.value });
    };

    public render(): JSX.Element | null {
        const viewProps: IUnsubscribeViewProps = {
            ...this.props,
            unsubscribeResponse: this.state.unsubscribeResponse,
            handleUnsubscribe: this.handleUnsubscribe,
            emailInputRef: this.emailInputRef,
            validationError: this.state.validationError,
            apiCalled: this.state.apiCalled,
            email: this.state.email,
            onEmailChange: this.handleEmailChange
        };

        return this.props.renderView(viewProps);
    }
}

export default Unsubscribe;
