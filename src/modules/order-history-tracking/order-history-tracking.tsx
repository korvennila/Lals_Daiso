import * as React from 'react';

import { IOrderHistoryTrackingData } from './order-history-tracking.data';
import { IOrderHistoryTrackingProps } from './order-history-tracking.props.autogenerated';

export interface IOrderHistoryTrackingViewProps extends IOrderHistoryTrackingProps<IOrderHistoryTrackingData> {
    orderHistory: any;
    handleTrackOrder: () => void;
    orderIdInputRef: React.RefObject<HTMLInputElement>;
    errorMessage: string | null;
}

/**
 *
 * OrderHistoryTracking component
 * @extends {React.PureComponent<IOrderHistoryTrackingProps<IOrderHistoryTrackingData>>}
 */
interface IOrderHistoryTrackingState {
    orderHistory: any;
    errorMessage: string | null;
}

class OrderHistoryTracking extends React.PureComponent<IOrderHistoryTrackingProps<IOrderHistoryTrackingData>, IOrderHistoryTrackingState> {
    private orderIdInputRef: React.RefObject<HTMLInputElement>;

    constructor(props: IOrderHistoryTrackingProps<IOrderHistoryTrackingData>) {
        super(props);
        this.state = {
            orderHistory: null,
            errorMessage: null
        };
        this.orderIdInputRef = React.createRef();
    }

    private handleTrackOrder = async (): Promise<void> => {
        const orderId = this.orderIdInputRef.current?.value;
        if (!orderId) {
            this.setState({ errorMessage: 'Order ID cannot be empty.' });
            return;
        }

        this.setState({ errorMessage: null }); // Clear any previous error message

        const apiUrl = `https://yourapiendpoint.com/orderhistory?orderId=${orderId}`;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(this.props.resources.networkResponseText);
            }
            const data = await response.json();
            this.setState({ orderHistory: data });
        } catch (error) {
            console.error('Failed to fetch order history:', error);
            this.setState({ orderHistory: null, errorMessage: 'Failed to fetch order history. Please try again.' });
        }
    };

    public render(): JSX.Element | null {
        const viewProps: IOrderHistoryTrackingViewProps = {
            ...this.props,
            orderHistory: this.state.orderHistory,
            handleTrackOrder: this.handleTrackOrder,
            orderIdInputRef: this.orderIdInputRef,
            errorMessage: this.state.errorMessage
        };

        return this.props.renderView(viewProps);
    }
}

export default OrderHistoryTracking;
