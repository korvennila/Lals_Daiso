import * as React from 'react';

import { IOrderHistoryTrackingData } from './order-history-tracking.data';
import { IOrderHistoryTrackingProps } from './order-history-tracking.props.autogenerated';
import ProgressTracker from './components/progress-tracker';

export interface IOrderHistoryTrackingViewProps extends IOrderHistoryTrackingProps<IOrderHistoryTrackingData> {
    orderHistory: any;
    handleTrackOrder: () => void;
    orderIdInputRef: React.RefObject<HTMLInputElement>;
    errorMessage: string | null;
    progressTracker: React.ReactNode;
}

export enum OrderHistorySteps {
    OrderPlaced = 'Open Order',
    OrderConfirmed = 'Confirmed',
    ReadyToShip = 'Ready to Ship',
    Shipped = 'Shipped',
    OutForDelivery = 'Out for Delivery',
    Delivered = 'Delivered'
}

/**
 *
 * OrderHistoryTracking component
 * @extends {React.PureComponent<IOrderHistoryTrackingProps<IOrderHistoryTrackingData>>}
 */
interface IOrderHistoryTrackingState {
    orderHistory: string | null;
    errorMessage: string | null;
}

class OrderHistoryTracking extends React.PureComponent<IOrderHistoryTrackingProps<IOrderHistoryTrackingData>, IOrderHistoryTrackingState> {
    private orderIdInputRef: React.RefObject<HTMLInputElement>;

    constructor(props: IOrderHistoryTrackingProps<IOrderHistoryTrackingData>) {
        super(props);
        this.state = {
            orderHistory: null,
            errorMessage: null
        };
        this.orderIdInputRef = React.createRef();
    }

    private handleTrackOrder = async (): Promise<void> => {
        const orderId = this.orderIdInputRef.current?.value;
        if (!orderId) {
            this.setState({ errorMessage: 'Order ID cannot be empty.' });
            return;
        }

        this.setState({ errorMessage: null }); // Clear any previous error message

        const cRetailURL = this.props.context.request.apiSettings.baseUrl;
        const cRetailOUN = this.props.context.request.apiSettings.oun ? this.props.context.request.apiSettings.oun : '';

        const cKORGetOrderStatusRequestUrl = `${cRetailURL}commerce/KORGetOrderStatusRequest?api-version=7.3`;

        try {
            const response = await fetch(cKORGetOrderStatusRequestUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    OUN: cRetailOUN,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0'
                },
                body: JSON.stringify({
                    OrderId: orderId
                })
            });

            if (response.status === 200) {
                const data = await response.json();
                let status: string = data.value;
                if (status.toLowerCase() === 'order not found') {
                    this.setState({ orderHistory: null, errorMessage: data.value });
                } else {
                    this.setState({ orderHistory: data.value, errorMessage: '' });
                }
            } else {
                this.setState({ orderHistory: null, errorMessage: 'Failed to fetch order history. Please try again.' });
            }
        } catch (error) {
            this.setState({ orderHistory: null, errorMessage: 'Failed to fetch order history. Please try again.' });
        }
    };

    public render(): JSX.Element | null {
        const { config } = this.props;
        const steps = [
            config.orderPlacedText || OrderHistorySteps.OrderPlaced,
            config.orderConfirmedText || OrderHistorySteps.OrderConfirmed,
            config.readyToShipText || OrderHistorySteps.ReadyToShip,
            config.shippedText || OrderHistorySteps.Shipped,
            config.outForDeliveryText || OrderHistorySteps.OutForDelivery,
            config.deliveredText || OrderHistorySteps.Delivered
        ];

        const viewProps: IOrderHistoryTrackingViewProps = {
            ...this.props,
            orderHistory: this.state.orderHistory,
            handleTrackOrder: this.handleTrackOrder,
            orderIdInputRef: this.orderIdInputRef,
            errorMessage: this.state.errorMessage,
            progressTracker: this.state.orderHistory ? <ProgressTracker steps={steps} currentStep={this.state.orderHistory} /> : null
        };

        return this.props.renderView(viewProps);
    }
}

export default OrderHistoryTracking;
