/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IImageSettings, Image } from '@msdyn365-commerce/core';
import {
    IReportReviewModalViewProps,
    IReviewCardViewProps,
    IReviewsListData,
    IReviewsListResources,
    IReviewsListState,
    IReviewsListViewProps
} from '@msdyn365-commerce-modules/ratings-reviews';
import { ArrayExtensions, generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { IReviewsListProps } from '../definition-extensions/reviews-list.ext.props.autogenerated';

/**
 * Build Review Card.
 * @param props - Review Card ViewProps.
 * @param resources - Resource Strings.
 * @param isUserReview - User review flag.
 * @returns JSX Element.
 */
const buildReviewCard = (props: IReviewCardViewProps, resources: IReviewsListResources, isUserReview: boolean) => {
    return (
        <Node {...props.cardProps}>
            <Node {...props.headerProps}>
                <div>
                    {props.rating}
                    {props.date}
                </div>
                {props.name}
            </Node>
            <Node {...props.cardBodyProps}>
                <Node {...props.reviewProps}>
                    {props.reviewTitle}
                    {props.reviewText}
                </Node>
                <Node {...props.responseProps}>
                    {props.responseName}
                    {props.responseDate}
                    {props.responseText}
                </Node>
                <Node {...props.controlsProps}>
                    {isUserReview ? undefined : <p className='ms-reviews-list__helpful'>{resources.wasReviewHelpfulText}</p>}
                    {props.like}
                    {props.dislike}
                    {props.edit}
                </Node>
            </Node>
        </Node>
    );
};

/**
 * Render Product Image.
 * @param props - WriteReview ViewProps.
 * @returns JSX Element.
 */
const renderProductImage = (props: IReviewsListViewProps & IReviewsListProps<IReviewsListData>): JSX.Element => {
    const primaryImageSource = props.data.product.result?.PrimaryImageUrl;
    const imageUrl = generateImageUrl(primaryImageSource, props.context.request.apiSettings);
    const defaultImageSettings: IImageSettings = {
        viewports: {
            xs: { q: 'w=111&h=111&m=6', w: 111, h: 111 },
            sm: { q: 'w=130&h=130&m=6', w: 130, h: 130 },
            md: { q: 'w=130&h=130&m=6', w: 130, h: 130 },
            lg: { q: 'w=130&h=130&m=6', w: 130, h: 130 },
            xl: { q: 'w=130&h=130&m=6', w: 130, h: 130 }
        },
        lazyload: true,
        cropFocalRegion: true
    };

    return (
        <Image
            src={imageUrl ?? ''}
            gridSettings={props.context.request.gridSettings!}
            imageSettings={props.config.imageSettings ? props.config.imageSettings : defaultImageSettings}
        />
    );
};

/**
 * Render Product Description.
 * @param props - WriteReview ViewProps.
 * @returns JSX Element.
 */
const renderProductDescription = (props: IReviewsListViewProps & IReviewsListProps<IReviewsListData>): JSX.Element => {
    const product = props.data.product.result;
    return (
        <Node className='ms-review-product-description'>
            <div className='ms-review-product-image'>{renderProductImage(props)}</div>
            <div className='ms-review-product-details'>
                <div className='ms-review-product-title'>{product?.Name}</div>
                <div className='ms-review-product-brand-name'>{product?.Name}</div>
                <div className='ms-review-product-sku-id'>{product?.ItemId}</div>
            </div>
        </Node>
    );
};

/**
 * Build Review modal.
 * @param props - Review list ViewProps.
 * @returns JSX Element.
 */
const createReviewModal = (props: IReviewsListViewProps & IReviewsListProps<IReviewsListData>): JSX.Element => {
    const { resources, moduleProps, reviewModal } = props;
    return (
        <Module {...reviewModal.modal} {...moduleProps}>
            {reviewModal.modalHeader}
            <Node {...reviewModal.modalBody}>
                <Node {...reviewModal.form}>
                    <Node className='ms-review-product'>
                        {renderProductDescription(props)}
                        <Node {...reviewModal.inputRow} className='ms-review-product__rating'>
                            <div className='ms-review-product__overallProductRatingLabel'>{resources.selectRatingLabel}</div>
                            {reviewModal.rating}
                        </Node>
                    </Node>
                    <Node {...reviewModal.inputRow} className='ms-review-product__title'>
                        {resources.reviewTitleLabel}
                        {reviewModal.titleInput}
                    </Node>
                    <Node {...reviewModal.inputRow} className='ms-review-product__write-review'>
                        {resources.reviewTextLabel}
                        {reviewModal.textInput}
                    </Node>
                    {reviewModal.privacyPolicyUrl}
                    {reviewModal.error}
                </Node>
            </Node>
            <Node {...reviewModal.modalFooter}>
                {reviewModal.submitButton}
                {reviewModal.cancelButton}
            </Node>
        </Module>
    );
};

/**
 * Build Review modal.
 * @param props - Review modal ViewProps.
 * @param state - Review List State.
 * @returns JSX Element.
 */
const createReportModal = (props: IReportReviewModalViewProps, state: IReviewsListState): JSX.Element => {
    return (
        <Node {...props.modal}>
            <Node {...props.modalHeader}>{state.reported ? props.headerSubmitted : props.header}</Node>
            <Node {...props.modalBody}>
                {state.reported ? props.reportSubmittedMessage : [props.reportMessage, props.radioButtons, props.error]}
            </Node>
            <Node {...props.modalFooter}>{state.reported ? props.succesfulButton : [props.submitButton, props.cancelButton]}</Node>
        </Node>
    );
};

/**
 * ReviewsList view.
 * @param props - Ratings ReviewsList ViewProps.
 * @returns ReviewsList view module.
 */
const ReviewsListview: React.FC<IReviewsListViewProps & IReviewsListProps<IReviewsListData>> = props => {
    const {
        filterByDropdown,
        heading,
        moduleProps,
        noReviewsMessage,
        noReviewsWithFilterMessage,
        pageControls,
        refineReviewsProps,
        reportReviewModal,
        reviewsListProps,
        reviewCards,
        sortByDropdown,
        state,
        userReview,
        resources
    } = props;

    if (!userReview && !ArrayExtensions.hasElements(reviewCards) && !state.isFilterApplied) {
        return <Module {...moduleProps}>{noReviewsMessage}</Module>;
    }

    return (
        <Module {...moduleProps}>
            {heading}
            <Node {...refineReviewsProps}>
                {sortByDropdown}
                {filterByDropdown}
            </Node>
            <Node {...reviewsListProps}>
                {userReview && buildReviewCard(userReview, resources, true)}
                {reviewCards.map(review => {
                    return buildReviewCard(review, resources, false);
                })}
            </Node>
            {!ArrayExtensions.hasElements(reviewCards) && state.isFilterApplied && noReviewsWithFilterMessage}
            {pageControls}
            {createReviewModal(props)}
            {createReportModal(reportReviewModal, state)}
        </Module>
    );
};

export default ReviewsListview;
