/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import {
    IBusinessFormItem,
    IBusinessOrganizationListViewProps,
    IFormViewProps,
    InputID
} from '@msdyn365-commerce-modules/business-organization-list';
import { Modal, ModalBody, ModalFooter, ModalHeader, Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import {
    IBusinessOrganizationListProps,
    IBusinessOrganizationListResources
} from '../definition-extensions/business-organization-list.ext.props.autogenerated';

/**
 * Business Form Item component.
 * @param props - View props.
 * @returns The JSX Element.
 */
const BusinessFormItemComponent: React.FC<IBusinessFormItem> = (props: IBusinessFormItem) => {
    const { wrapper, label, errorMessage, input } = props;
    return (
        <Node {...wrapper}>
            {label}
            {errorMessage}
            {input}
        </Node>
    );
};

/**
 * To render modal.
 * @param className - The modal classname.
 * @param isModalOpen - The boolean for modal open status.
 * @param headingSection - The heading section of modal.
 * @param bodySection - The body section of modal.
 * @param footerSection - The footer section of modal.
 * @param toggleModal - The toggle modal callback function.
 * @returns The JSX Element.
 */
const renderModal = (
    className: string,
    isModalOpen: boolean,
    headingSection: React.ReactNode,
    bodySection: React.ReactNode,
    footerSection: React.ReactNode,
    toggleModal?: () => void
) => {
    return (
        <Modal
            className='msc-modal-input-required'
            wrapClassName={className}
            autoFocus
            fade={false}
            applicationNode='renderPage'
            isOpen={isModalOpen}
            toggle={toggleModal}
        >
            <ModalHeader toggle={toggleModal}>{headingSection}</ModalHeader>
            <ModalBody>{bodySection}</ModalBody>
            <ModalFooter>{footerSection}</ModalFooter>
        </Modal>
    );
};

/**
 * Business User Form component.
 * @param props - View props.
 * @returns The JSX Element.
 */
const BusinessUserFormComponent: React.FC<IFormViewProps> = (props: IFormViewProps) => {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
    const { modalClassName, FormWrapper, modalHeading, modalDescription, inputs, buttons, errorMessage, toggle } = props;

    const modalBody = (
        <>
            {modalDescription}
            <Node {...FormWrapper}>
                {inputs &&
                    inputs.map((item: IBusinessFormItem) => {
                        return <BusinessFormItemComponent {...item} key={item.key} />;
                    })}
                {errorMessage?.map((error: React.ReactNode, index: number) => {
                    return <React.Fragment key={index.toString()}>{error}</React.Fragment>;
                })}
            </Node>
        </>
    );

    const modalFooter =
        buttons &&
        buttons.map((button: React.ReactNode, index: number) => {
            return <React.Fragment key={index.toString()}>{button}</React.Fragment>;
        });

    return renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};

/**
 * Selected user interface.
 */
interface ISelectedUser {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
    FirstName?: string;
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
    LastName?: string;
}

/**
 * Business User Details component.
 * @param props - View props.
 * @returns The JSX Element.
 */
const BusinessUserDetailsComponent: React.FC<IFormViewProps> = (props: IFormViewProps) => {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
    const { modalClassName, FormWrapper, modalHeading, modalDescription, buttons, errorMessage, resources, toggle } = props;
    let modalBody = null;
    const selectedUser = props.selectedUser as ISelectedUser | string;

    if (!selectedUser) {
        modalBody = errorMessage;
    } else {
        // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
        const { FirstName, LastName } = selectedUser as ISelectedUser;
        const userFullName = `${FirstName as string} ${LastName as string}`;

        modalBody = (
            <>
                {modalDescription}
                <Node tag='ul' className={`${FormWrapper.className}-list`}>
                    <Node tag='li' className={`${FormWrapper.className}-list-item-name`}>
                        {userFullName}
                    </Node>
                    {Object.keys(selectedUser).map((data, index) => {
                        if (data === InputID.FirstName || data === InputID.LastName) {
                            return null;
                        }
                        const label = (resources[`table${data}HeadingText`] as string) || data;
                        return (
                            <Node tag='li' className={`${FormWrapper.className}-list-item`} key={index.toString()}>
                                {label}
                                {': '}
                                {selectedUser[data]}
                            </Node>
                        );
                    })}
                </Node>
            </>
        );
    }

    const modalFooter =
        buttons &&
        buttons.map((button: React.ReactNode, index: number) => {
            return <React.Fragment key={index.toString()}>{button}</React.Fragment>;
        });

    return renderModal(modalClassName, true, modalHeading, modalBody, modalFooter, toggle);
};

/**
 * To get form.
 * @param type - The type of form.
 * @param formProps - The form props.
 * @param toggleModal - The toggle modal callback function.
 * @returns The JSX Element.
 */
const getForm = (type: string, formProps: IFormViewProps, toggleModal?: () => void) => {
    switch (type) {
        case 'ADD':
        case 'EDIT':
            return <BusinessUserFormComponent {...formProps} toggle={toggleModal} />;
        case 'VIEW':
        case 'REMOVE':
            return <BusinessUserDetailsComponent {...formProps} toggle={toggleModal} />;
        default:
            return null;
    }
};

/**
 * Business Organization List component.
 * @param props - View props.
 * @returns The JSX Element.
 */
const BusinessOrganizationListComponent: React.FC<IBusinessOrganizationListViewProps &
    IBusinessOrganizationListProps<IBusinessOrganizationListResources>> = props => {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
    const {
        OrganizationUserList,
        moduleContainer,
        heading,
        noUsersText,
        addUserButton,
        organizationListTable,
        form,
        formType,
        toggleModal,
        requestAccountStatementButton,
        requestStatementModal
    } = props;

    const buttonList: React.ReactNode = (
        <Node className='ms-business-organization-list__buttonBar'>
            {addUserButton}
            {requestAccountStatementButton}
        </Node>
    );

    if (noUsersText) {
        return (
            <Module {...OrganizationUserList}>
                <Node {...moduleContainer}>
                    {heading}
                    <Node className='ms-business-organization-list__container-no-users'>
                        <Node className='ms-business-organization-list__container-no-users-heading'>
                            {props.resources.headingForEmptyUserOrganizationList}
                        </Node>
                        <Node className='ms-business-organization-list__container-no-users-text'>
                            {props.resources.textForEmptyUserOrganizationList}
                        </Node>
                        {buttonList}
                    </Node>
                    {requestStatementModal}
                    {noUsersText}
                </Node>
            </Module>
        );
    }

    return (
        <Module {...OrganizationUserList}>
            <Node {...moduleContainer}>
                {heading}
                {buttonList}
                {requestStatementModal}
                {organizationListTable}
            </Node>
            {form && getForm(formType, form, toggleModal)}
        </Module>
    );
};

export default BusinessOrganizationListComponent;
