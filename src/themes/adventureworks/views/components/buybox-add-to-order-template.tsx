/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import {
    AddToOrderTemplateComponent,
    IAddToOrderTemplateDialogResources,
    IDuplicateItemsWhenAddingToOrderTemplateDialogResources,
    IItemAddedToOrderTemplateDialogResources,
    IOrderTemplateActionErrorResult,
    IOrderTemplateNameDialogResources
} from '@msdyn365-commerce/components';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import {
    getConfigureErrors,
    IBuyboxCallbacks,
    IBuyboxCommonResources,
    IBuyboxData,
    IBuyboxState,
    IBuyboxViewProps
} from '@msdyn365-commerce-modules/buybox';
import * as React from 'react';

import { IBuyboxProps as IBuyboxExtentionProps } from '../../definition-extensions/buybox.ext.props.autogenerated';

/**
 * To generate AddToOrderTemplateDialog resources.
 * @param resources - The resources.
 * @returns -- Returns the list of AddToOrderTemplateDialog resources..
 */
function generateAddToOrderTemplateDialogResources(resources: IBuyboxCommonResources): IAddToOrderTemplateDialogResources {
    return {
        addToOrderTemplateHeader: resources.addToOrderTemplateHeader,

        noOrderTemplatesMessage: resources.noOrderTemplatesMessage,
        noOrderTemplatesDescription: resources.noOrderTemplatesDescription,

        createAnOrderTemplateButtonText: resources.createAnOrderTemplateButtonText,
        createNewOrderTemplateButtonText: resources.createNewOrderTemplateButtonText,
        cancelOrderTemplateCreationButtonText: resources.cancelOrderTemplateCreationButtonText,

        selectTemplatesText: resources.selectTemplatesText,
        addToTemplateButtonText: resources.addToTemplateButtonText,
        lineItemsText: resources.lineItemsText
    };
}

/**
 * To generate OrderTemplateNameDialog resources.
 * @param resources - The resources.
 * @returns -- Returns the list of OrderTemplateNameDialog resources..
 */
function generateOrderTemplateNameDialogResources(resources: IBuyboxCommonResources): IOrderTemplateNameDialogResources {
    return {
        orderTemplateHeaderLabel: resources.createOrderTemplateHeader,
        orderTemplateTitleLabel: resources.orderTemplateTitle,
        orderTemplateNameAriaLabel: resources.orderTemplateNameAriaLabel,
        orderTemplateDescription: resources.createOrderTemplateDescription,

        defaultOrderTemplateName: resources.defaultOrderTemplateName,

        orderTemplateButtonLabel: resources.createOrderTemplateButtonText,
        orderTemplateCancelButtonLabel: resources.cancelNewOrderTemplateCreationButtonText
    };
}

/**
 * To generate ItemAddedToOrderTemplateDialog resources.
 * @param resources - The resources.
 * @returns -- Returns the list of ItemAddedToOrderTemplateDialog resources..
 */
function generateItemAddedToOrderTemplateDialogResources(resources: IBuyboxCommonResources): IItemAddedToOrderTemplateDialogResources {
    return {
        viewOrderTemplateButtonText: resources.viewOrderTemplateButtonText,
        continueShoppingButtonText: resources.continueShoppingButtonText,
        itemAddedToOrderTemplateHeaderItemOneText: resources.itemAddedToOrderTemplateHeaderItemOneText,
        itemAddedToOrderTemplateHeaderItemFormatText: resources.itemAddedToOrderTemplateHeaderItemFormatText,
        itemAddedToOrderTemplateHeaderMessageText: resources.itemAddedToOrderTemplateHeaderMessageText,
        freePriceText: resources.priceFree,
        originalPriceText: resources.originalPriceText,
        currentPriceText: resources.currentPriceText
    };
}

/**
 * To generate DuplicateItemsWhenAddingToOrderTemplateDialog resources.
 * @param resources - The resources.
 * @returns -- Returns the list of DuplicateItemsWhenAddingToOrderTemplateDialog resources..
 */
function generateDuplicateItemsWhenAddingToOrderTemplateDialogResources(
    resources: IBuyboxCommonResources
): IDuplicateItemsWhenAddingToOrderTemplateDialogResources {
    return {
        duplicatedProductsHeader: resources.duplicatedProductsHeader,
        duplicatedProductsDescription: resources.duplicatedProductsDescription,
        updateQuantityButtonText: resources.updateQuantityButtonText,
        cancelDuplicateItemsButtonText: resources.cancelDuplicateItemsButtonText
    };
}

/**
 * Add to wishlist failed function.
 * @param callbacks -Buybox callbacks.
 * @param resources -Buybox resources.
 * @param product -Simple product.
 * @returns Update error state.
 */
const onAddToOrderTemplateFailed = (callbacks: IBuyboxCallbacks, resources: IBuyboxCommonResources, product: SimpleProduct | undefined) => (
    result: IOrderTemplateActionErrorResult
) => {
    callbacks.updateErrorState({
        errorHost: 'ORDER_TEMPLATE',
        configureErrors:
            result.status === 'MISSING_DIMENSION' ? getConfigureErrors(result.missingDimensions, resources, product?.IsGiftCard) : {}
    });
};

/**
 * RenderAddToOrderTemplateButton.
 * @param props - Buybox view props.
 * @param state - Buybox state.
 * @param callbacks - Buybox callbacks.
 * @param product - Product data.
 * @returns -- Returns JSX element.
 */
export const renderAddToOrderTemplateButton = (
    props: IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxData>,
    state: IBuyboxState,
    callbacks: IBuyboxCallbacks,
    product: SimpleProduct
): React.ReactNode => {
    const {
        // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from module file.
        id,
        typeName,
        context,
        data: {
            orderTemplates: { result: orderTemplates },
            customerInformation: { result: customerInformation }
        },
        resources,
        config
    } = props;

    const { quantity } = state;

    const isShowButtonText = true;
    const isMultipleCatalogsFeatureEnabled = props.isChannelMultipleCatalogsFeatureEnabled || false;
    return (
        orderTemplates && (
            <AddToOrderTemplateComponent
                className='msc-add-to-cart-extra-actions'
                addToOrderTemplateButtonText={resources.addToOrderTemplateButtonText}
                addToOrderTemplateButtonTooltip={resources.addToOrderTemplateButtonTooltip}
                addToOrderTemplateDialogResources={generateAddToOrderTemplateDialogResources(resources)}
                createOrderTemplateDialogResources={generateOrderTemplateNameDialogResources(resources)}
                itemAddedToOrderTemplateDialogResources={generateItemAddedToOrderTemplateDialogResources(resources)}
                duplicateItemsWhenAddingToOrderTemplateDialogResources={generateDuplicateItemsWhenAddingToOrderTemplateDialogResources(
                    resources
                )}
                data={{ product, quantity, orderTemplates, customerInformation }}
                context={context}
                id={id}
                typeName={typeName}
                onError={onAddToOrderTemplateFailed(callbacks, resources, product)}
                shouldShowButtonFailedTooltip={state.isCustomPriceSelected}
                showButtonTooltip={false}
                showButtonText={isShowButtonText}
                imageSettings={config && config.imageSettings !== undefined ? config.imageSettings : undefined}
                isMultipleCatalogFeatureEnabledInHq={isMultipleCatalogsFeatureEnabled}
                {...(isMultipleCatalogsFeatureEnabled && { catalogId: props.currentCatalogId })}
            />
        )
    );
};
