/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { ISearchData, ISearchFormViewProps } from '@msdyn365-commerce-modules/search';
import { Button, INodeProps, Node } from '@msdyn365-commerce-modules/utilities';
import React from 'react';

import { ISearchProps } from '../../definition-extensions/search.ext.props.autogenerated';
import { MobileAutoSuggestEmptyComponent } from './search.mobile.empty';

/**
 * Render Clear button for mobile viewport.
 * @param clearSearchButtonText -The Clear button text.
 * @param clearSearch -Clear Search callback.
 * @returns -The JSX Element.
 */
const renderClearButton = (clearSearchButtonText: string, clearSearch: () => void): JSX.Element => {
    return (
        <Button className='ms-search__form-control__clear' title={clearSearchButtonText || 'Clear'} onClick={clearSearch}>
            {clearSearchButtonText || 'Clear'}
        </Button>
    );
};

/**
 * Render Search form.
 * @param form -Form view props.
 * @param searchForm -Search Form props.
 * @param formWrapper -Form Wrapper props.
 * @param isMobile -Is mobile viewport flag.
 * @param clearSearchButtonText -The Clear button text.
 * @param props -The props for resource.
 * @param isSearchText -Is SearchText flag for input text.
 * @param clearSearch -Clear Search callback.
 * @returns -The JSX Element.
 */
export const FormComponent = (
    form: ISearchFormViewProps,
    searchForm: INodeProps,
    formWrapper: INodeProps,
    isMobile: boolean,
    clearSearchButtonText: string,
    props: ISearchProps<ISearchData>,
    isSearchText: boolean,
    clearSearch: () => void
): JSX.Element => {
    const cancelButtonNode = (
        <Button
            className='ms-search__form-cancelSearch'
            aria-label={props.resources.cancelBtnAriaLabel}
            onClick={clearSearch}
            type='button'
        />
    );

    return isMobile ? (
        <Node {...searchForm}>
            {form.cancelBtn}
            <Node {...formWrapper}>
                {form.input}
                {isSearchText && renderClearButton(clearSearchButtonText, clearSearch)}
                {!isSearchText ? MobileAutoSuggestEmptyComponent(props) : null}
            </Node>
        </Node>
    ) : (
        <Node {...searchForm}>
            <Node {...formWrapper}>
                {form.submitBtn}
                {form.input}
                {isSearchText && cancelButtonNode}
            </Node>
        </Node>
    );
};
