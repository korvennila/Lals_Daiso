/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { IImageData, Image } from '@msdyn365-commerce/core';
import { ISearchData, ISearchProductViewProps } from '@msdyn365-commerce-modules/search';
import { INodeProps, Node } from '@msdyn365-commerce-modules/utilities';
import React from 'react';

import { ISearchProps } from '../../definition-extensions/search.ext.props.autogenerated';

/**
 * Render Products Suggestion result heading.
 * @param productSuggestionsHeading -The products suggestion result heading.
 * @returns The JSX Element.
 */
const renderProductSuggestionsTitle = (productSuggestionsHeading: string): JSX.Element => {
    const productAutoSuggestionHeading = productSuggestionsHeading ? productSuggestionsHeading : 'Products';

    return <div className='msc-autoSuggest__productResults-title'>{productAutoSuggestionHeading}</div>;
};

/**
 * Render Products Suggestion result heading.
 * @param props -The props.
 * @returns The JSX Element.
 */
const renderProductNotFoundResultsImage = (props: ISearchProps<ISearchData>): JSX.Element | null => {
    const noSearchResultImage: IImageData | undefined = props.config.noSearchResultImage;
    if (!noSearchResultImage || !noSearchResultImage.src) {
        return null;
    }
    return (
        <Image
            altText={noSearchResultImage.altText}
            className='msc-autoSuggest__productResults-no-results-image-img'
            gridSettings={props.context.request.gridSettings!}
            src={noSearchResultImage.src}
        />
    );
};

/**
 * Render Products No result section.
 * @param props -The props.
 * @returns The JSX Element.
 */
const renderProductNotFoundResults = (props: ISearchProps<ISearchData>): JSX.Element => {
    return (
        <Node className='msc-autoSuggest__productResults-no-results-content'>
            <div className='msc-autoSuggest__productResults-no-results-image'>{renderProductNotFoundResultsImage(props)}</div>
            <div className='msc-autoSuggest__productResults-no-results-content-title'>{props.resources.noResultContentHeadingText}</div>
            <div className='msc-autoSuggest__productResults-no-results-content-paragraph'>
                {props.resources.noResultContentParagraphText}
            </div>
        </Node>
    );
};

/**
 * Render Product suggestion result.
 * @param productSuggest -The product suggest Node props.
 * @param ulProduct -The List Node props.
 * @param props -The props.
 * @param productSuggestions -The Product suggestion result.
 * @param isLoadingAutoSuggest - The autosuggestion loading flag.
 * @param isLoadingNode - The autosuggestion loading node.
 * @returns The JSX Element.
 */
export const ProductSuggestionsComponent = (
    productSuggest: INodeProps,
    ulProduct: INodeProps,
    props: ISearchProps<ISearchData>,
    productSuggestions?: ISearchProductViewProps,
    isLoadingAutoSuggest?: boolean,
    isLoadingNode?: React.ReactNode
): JSX.Element => {
    const liProduct: INodeProps = {
        tag: 'li',
        className: 'msc-no-result-content'
    };
    return productSuggestions ? (
        <Node {...productSuggest}>
            {renderProductSuggestionsTitle(props.resources.productSuggestionHeading)}
            <Node {...ulProduct}>
                {isLoadingAutoSuggest && isLoadingNode}
                {!isLoadingAutoSuggest &&
                    productSuggestions.items.map((item, index) => {
                        return (
                            <Node {...item.LiProduct} key={item.id ?? index}>
                                <Node {...item.AProduct}>
                                    {item.thumbnail}
                                    {item.text}
                                    {item.price}
                                </Node>
                            </Node>
                        );
                    })}
            </Node>
        </Node>
    ) : (
        <Node {...productSuggest}>
            {renderProductSuggestionsTitle(props.resources.productSuggestionHeading)}
            <Node {...ulProduct}>
                <Node {...liProduct}>{renderProductNotFoundResults(props)}</Node>
            </Node>
        </Node>
    );
};
