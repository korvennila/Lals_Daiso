/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import MsDyn365, { RichTextComponent } from '@msdyn365-commerce/core';
import {
    ContactInformationType,
    DeliveryOption,
    IDictionary,
    OrgUnitContact,
    OrgUnitLocation,
    StoreHours
} from '@msdyn365-commerce/retail-proxy';
import { ArrayExtensions, StringExtensions } from '@msdyn365-commerce-modules/retail-actions';
import {
    buildStoreHours,
    IHoursDisplayInfo,
    ILocationHours,
    IStoreSelectorFoundLocationsMessage,
    IStoreSelectorLocationLineItemProps,
    IStoreSelectorLocationLineItemResources,
    IStoreSelectorViewProps,
    secondsToTime
} from '@msdyn365-commerce-modules/store-selector';
import { ISelectedStoreViewProps } from '@msdyn365-commerce-modules/store-selector/src/modules/store-selector/components/selected-store/selected-store';
import {
    getPayloadObject,
    getTelemetryAttributes,
    getTelemetryObject,
    IPayLoad,
    isMobile,
    Module,
    Node,
    TelemetryConstant,
    VariantType
} from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { IStoreSelectorProps, IStoreSelectorResources } from '../definition-extensions/store-selector.ext.props.autogenerated';

/**
 * PickUpMethodComponent View Props Interface.
 */
export interface IPickupComponent extends IStoreSelectorLocationLineItemProps {
    pickUpStatesProps: IStoreSelectorViewProps;
}

export interface IPickUpButtonComponent {
    attributes: IDictionary<string> | undefined;
    onPickupInStoreClickHandler?(): void;
}

/**
 * Found Locations Message component in Store Selector.
 * @param props - The component props.
 * @returns The JSX Element.
 */
const StoreSelectorFoundLocationsMessageComponent: React.FC<IStoreSelectorFoundLocationsMessage> = props => {
    const { locations, searchRadius, resources, isSeeAllStore, preferredDistanceUnit } = props;
    if (locations) {
        const storeCountMessage =
            preferredDistanceUnit === resources.milesShortText ? resources.storeCountMessage : resources.storeCountMessageInKm;

        return (
            <RichTextComponent
                className='ms-store-select__found-locations__text'
                text={
                    isSeeAllStore
                        ? resources.storeAllCountMessage.replace(
                              '{count}',
                              `<span class='ms-store-select__found-locations__count'>${locations.length.toString()}</span>`
                          )
                        : storeCountMessage
                              .replace(
                                  '{count}',
                                  `<span class='ms-store-select__found-locations__count'>${locations.length.toString()}</span>`
                              )
                              .replace(
                                  '{radius}',
                                  `<span class='ms-store-select__found-locations__radius'>${searchRadius.toString()}</span>`
                              )
                }
            />
        );
    }

    return null;
};

/**
 * Build distance string.
 * @param distance - The distance.
 * @param preferredDistanceUnit - The preferred distance unit.
 * @param resources - The module resources.
 * @param isLocationDisabled - True if location is disabled.
 * @returns The distance string.
 */
const buildDistanceString = (
    distance: number | undefined,
    preferredDistanceUnit: string,
    resources: IStoreSelectorResources & IStoreSelectorResources,
    isLocationDisabled?: boolean
): string | undefined => {
    const closeDistance: number = 1;
    if (distance === undefined || isLocationDisabled) {
        return undefined;
    } else if (distance < closeDistance) {
        const closeDistanceString: string = resources.closeDistanceString;
        return closeDistanceString.replace('{preferredDistanceUnit}', preferredDistanceUnit);
    }
    const distanceAsString: string = resources.distanceString;
    return distanceAsString
        .replace('{preferredDistanceUnit}', preferredDistanceUnit)
        .replace('{distance}', Math.floor(distance).toString());
};

/**
 * Extract phone number.
 * @param contacts - Contacts array.
 * @returns Phone number.
 */
const extractPhoneNumber = (contacts: OrgUnitContact[] | undefined): string | undefined => {
    if (!contacts) {
        return undefined;
    }

    const allPhoneContacts = contacts.filter(contact => contact.ContactTypeValue === ContactInformationType.Phone && !contact.IsPrivate);

    if (ArrayExtensions.hasElements(allPhoneContacts)) {
        const primaryPhoneContact = allPhoneContacts.find(contact => contact.IsPrimary);

        if (primaryPhoneContact) {
            return primaryPhoneContact.Locator;
        }

        return allPhoneContacts[0].Locator;
    }

    return undefined;
};

/**
 * Render Store Hours Day.
 * @param displayTime - Store Hours Information.
 * @param storeHoursDayPeriodString - The string for store hours day period.
 * @param storeHoursDayString - The string for store hours day period.
 * @returns JSX element with store hours day.
 */
const buildStoreHoursDay = (displayTime: IHoursDisplayInfo, storeHoursDayPeriodString: string, storeHoursDayString: string) => {
    return (
        <RichTextComponent
            className='ms-store-select__store-hours-day'
            text={
                displayTime.endDayShort
                    ? storeHoursDayPeriodString
                          .replace('{startDay}', `<abbr title=${displayTime.startDayFull}>${displayTime.startDayShort}</abbr>`)
                          .replace(
                              '{endDay}',
                              `<abbr title=${displayTime.endDayFull ? displayTime.endDayFull : ''}>${displayTime.endDayShort}</abbr>`
                          )
                    : storeHoursDayString.replace(
                          '{startDay}',
                          `<abbr title=${displayTime.startDayFull}>${displayTime.startDayShort}</abbr>`
                      )
            }
        />
    );
};

/**
 * Render Store Hours.
 * @param storeHours - Store hours.
 * @param storeHoursList - Store hours list.
 * @param locationOpen - Location open.
 * @param resources - The module resources.
 * @returns JSX element with store hours.
 */
const renderStoreHours = (
    storeHours: StoreHours | undefined,
    storeHoursList: IHoursDisplayInfo[] | undefined,
    locationOpen: ILocationHours | undefined,
    resources: IStoreSelectorResources & IStoreSelectorResources
): JSX.Element | null => {
    // First, use the store hours. This will allow listing day by day hours
    if (storeHours?.RegularStoreHours) {
        return (
            <div className='ms-store-select__store-hours-details-group'>
                {storeHoursList?.map(displayTime => (
                    <div className='ms-store-select__store-hours-details' key={JSON.stringify(displayTime)}>
                        {buildStoreHoursDay(displayTime, resources.storeHoursDayPeriod, resources.storeHoursDay)}
                        <div className='ms-store-select__store-hours-time'>{displayTime.timeRange}</div>
                    </div>
                ))}
            </div>
        );
    }

    // If that fails, fall back to using the OpenFrom and OpenTo properties on the location
    const storeOpenFrom: string = locationOpen?.openFrom ? locationOpen.openFrom : '';
    const storeOpenTo: string = locationOpen?.openTo ? locationOpen.openTo : '';
    return (
        <div className='ms-store-select__store-hours-details'>
            {resources.storeHoursDayPeriod.replace('{startDay}', storeOpenFrom).replace('{endDay}', storeOpenTo)}
        </div>
    );
};

/**
 * Match delivery options.
 * @param productDeliveryOptions - The list of product delivery options.
 * @param storePickUpOptionList - The list of store pick up options.
 * @returns Matched delivery option.
 */
const matchDeliveryOptions = (
    productDeliveryOptions: DeliveryOption[] | undefined,
    storePickUpOptionList: DeliveryOption[] | undefined
): DeliveryOption[] => {
    if (!productDeliveryOptions) {
        return [] as DeliveryOption[];
    }
    return productDeliveryOptions
        .map(productDeliveryOption => storePickUpOptionList?.find(delivery => delivery.Code === productDeliveryOption.Code))
        .filter(productDeliveryOption => productDeliveryOption) as DeliveryOption[];
};

/**
 * PickUpMethod Resources Interface.
 */
export interface IPickUpButtonResources {
    pickupInStoreAriaLabel: string;
    pickupInStoreButtonText: string;
    pickupDeliveryOptionErrorMessage: string;
}

/**
 * PickUpMethod Resources Interface.
 */
export interface IPickUpMethodResources {
    selectStoreText: string;
    pickUpMethodLabel: string;
    pickUpOptionPlaceholder: string;
    pickupOptionDropdownError: string;
    pickupButtonAriaLabel: string;
}

/**
 * PickUp method dropdown component.
 * @param props - The view props.
 * @returns JSX Element.
 */
const PickUpMethodDropdownComponent = (props: IPickupComponent & IPickUpMethodResources) => {
    const {
        handlers,
        location,
        pickUpStatesProps,
        selectStoreText,
        pickUpMethodLabel,
        pickUpOptionPlaceholder,
        pickupOptionDropdownError,
        pickupButtonAriaLabel,
        productPickUpOptionList,
        storePickUpOptionList
    } = props;
    const deliveryOptionList = matchDeliveryOptions(productPickUpOptionList, storePickUpOptionList);
    const [selectedStorePickUpOption, selectStorePickUpOption] = React.useState('');
    const [currentStorePickUpOption, setCurrentStorePickUpOption] = React.useState(pickUpOptionPlaceholder);
    const [isDropdownOpen, toggleDropdown] = React.useState(false);
    const [isError, setError] = React.useState(false);

    /**
     * Method to handle the store pickup option change.
     * @param event - Change Event.
     */
    const onChangeHandler = React.useCallback((event: React.MouseEvent<HTMLButtonElement>) => {
        event.preventDefault();
        selectStorePickUpOption(event.currentTarget.value);
        setCurrentStorePickUpOption(event.currentTarget.dataset.description ? event.currentTarget.dataset.description : '');
        toggleDropdown(false);
        setError(false);
    }, []);

    /**
     * Method to render store location line pick up button.
     * @param filteredDeliveryMode - Filtered Delivery Mode.
     * @returns JSX Element.
     */
    const renderLocationLinePickupButton = (filteredDeliveryMode: DeliveryOption | undefined) => {
        return filteredDeliveryMode !== undefined ? (
            <div className='ms-store-select__location-line-pickup-list-container'>
                <button
                    role='menuitem'
                    aria-label={filteredDeliveryMode.Description}
                    value={filteredDeliveryMode.Code}
                    data-description={filteredDeliveryMode.Description}
                    className='ms-store-select__location-line-pickup-list-toggle preselected'
                >
                    {filteredDeliveryMode.Description}
                </button>
            </div>
        ) : null;
    };

    /**
     * Method to handle the store pickup option submit.
     */
    const onClickHandler = React.useCallback(() => {
        if (!StringExtensions.isNullOrEmpty(selectedStorePickUpOption)) {
            handlers.onSelected(location, selectedStorePickUpOption);
        } else if (pickUpStatesProps.state.filteredPickupMode !== undefined) {
            handlers.onSelected(location, pickUpStatesProps.state.filteredPickupMode);
        } else {
            toggleDropdown(false);
            setError(true);
        }
    }, [location, selectedStorePickUpOption, handlers, pickUpStatesProps.state.filteredPickupMode]);

    const handleDropdownToggle = React.useCallback(() => {
        toggleDropdown(!isDropdownOpen);
        setError(false);
    }, [isDropdownOpen]);

    const filterDeliveryOption = deliveryOptionList.find(
        (delivery: DeliveryOption) => delivery.Code === pickUpStatesProps.state.filteredPickupMode
    );

    const pickupInStoreButtonText: string = selectStoreText;
    const filteredDeliveryMode: DeliveryOption | undefined =
        pickUpStatesProps.state.filteredPickupMode !== undefined ? filterDeliveryOption : undefined;

    return (
        <div
            className='ms-store-select__location-line-pickup'
            data-selected={
                (pickUpStatesProps.state.filteredPickupMode !== undefined && filteredDeliveryMode !== undefined) ||
                selectedStorePickUpOption !== ''
            }
            data-error={isError}
        >
            <div className='ms-store-select__location-line-pickup-label'>{pickUpMethodLabel}</div>
            {pickUpStatesProps.state.filteredPickupMode === undefined ? (
                <div className='ms-store-select__location-line-pickup-list-container'>
                    <button
                        className='ms-store-select__location-line-pickup-list-toggle'
                        onClick={handleDropdownToggle}
                        aria-expanded={isDropdownOpen}
                    >
                        {currentStorePickUpOption}
                    </button>
                    <ul className={classnames('ms-store-select__location-line-pickup-list', isDropdownOpen ? 'show' : '')}>
                        {deliveryOptionList.map((delivery: DeliveryOption) => (
                            <li
                                role='presentation'
                                className='ms-store-select__location-line-pickup-list-item'
                                key={delivery.Code}
                                value={delivery.Code}
                            >
                                <button
                                    role='menuitem'
                                    aria-label={delivery.Description}
                                    value={delivery.Code}
                                    data-description={delivery.Description}
                                    onClick={onChangeHandler}
                                    className='ms-store-select__location-line-pickup-list-item-button'
                                >
                                    {delivery.Description}
                                </button>
                            </li>
                        ))}
                    </ul>
                    <div className='ms-store-select__location-line-pickup-list-error'>{pickupOptionDropdownError}</div>
                </div>
            ) : (
                renderLocationLinePickupButton(filteredDeliveryMode)
            )}
            <button className='ms-store-select__location-line-pickup-menu' aria-label={pickupButtonAriaLabel} onClick={onClickHandler}>
                {pickupInStoreButtonText}
            </button>
        </div>
    );
};

/**
 * PickUp button component.
 * @param props - The view props.
 * @returns JSX Element.
 */
const PickUpButtonComponent = (props: IPickUpButtonComponent & IPickUpButtonResources) => {
    const { pickupInStoreAriaLabel, pickupInStoreButtonText, pickupDeliveryOptionErrorMessage, attributes } = props;
    const [isError, setError] = React.useState(false);
    const onPickupButtonClickHandler = () => () => {
        setError(true);
    };

    return (
        <>
            <button
                className='ms-store-select__location-line-select-store'
                aria-label={pickupInStoreAriaLabel}
                onClick={onPickupButtonClickHandler()}
                {...attributes}
            >
                {pickupInStoreButtonText}
            </button>
            <div className='ms-store-select__location-line-pickup-button-error' data-pickup-error={isError}>
                {pickupDeliveryOptionErrorMessage}
            </div>
        </>
    );
};

/**
 * Method to render store location line item.
 * @param locationLineItem - The Location Line item view props.
 * @param props - The view props.
 * @returns JSX Element.
 */
const renderStoreLocationLineItem = (
    locationLineItem: IStoreSelectorLocationLineItemProps,
    props: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>
) => {
    const {
        // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from store-selector.tsx file
        hideStockStatus,
        index,
        isInStock,
        preferredStoreLocationId,
        isPreferredStoreEnabled,
        location,
        resources,
        storeHours,
        storeHoursList,
        stockStatusLabel,
        // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from store-selector.tsx file
        storeLocatorView,
        telemetryContent
    } = locationLineItem;
    const storeName = location.OrgUnitName;
    const distanceAsString: string | undefined = buildDistanceString(
        location.Distance,
        locationLineItem.preferredDistanceUnit,
        props.resources,
        locationLineItem.isLocationDisabled
    );
    const storeAddress: string | undefined = location.Address;
    const phoneNumber: string | undefined = extractPhoneNumber(location.Contacts);

    const resourceLabel = isInStock ? resources.inStock : resources.outOfStock;
    const stockStatus = stockStatusLabel ? stockStatusLabel : resourceLabel;
    const stockText: string | undefined = hideStockStatus ? undefined : stockStatus;

    const payLoad: IPayLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.PickupInStore);

    /**
     * Method to handle the change for preferred store.
     * @returns Void.
     */
    const onSetPreferredStoreClickHandler = () => {
        locationLineItem.handlers.onSetAsPreferredStore(locationLineItem.location.OrgUnitNumber);
    };

    /**
     * Method to handle the removal of the preferred store.
     * @returns Void.
     */
    const onRemovePreferredStoreClickHandler = async (event: React.MouseEvent<HTMLElement, MouseEvent>) => {
        event.stopPropagation();
        locationLineItem.handlers.onRemovePreferredStore();
        await props.data.storeSelectorStateManager.result?.setSelectedStoreLocationId(undefined);
    };

    const isPreferredStore = preferredStoreLocationId === location.OrgUnitNumber;
    payLoad.contentAction.etext = TelemetryConstant.PreferredStore;
    const preferredStoreAttribute = getTelemetryAttributes(telemetryContent!, payLoad);
    payLoad.contentAction.etext = TelemetryConstant.RemovePreferredStore;
    const removePreferredStoreAttribute = getTelemetryAttributes(telemetryContent!, payLoad);

    return (
        <div className='ms-store-select__location-line-item'>
            <div className='ms-store-select__location-line-item-header'>
                {storeLocatorView && <span className='ms-store-select__location-line-item-store-index'>{index}</span>}
                <span className='ms-store-select__location-line-item-store-name'>{storeName}</span>
                {distanceAsString ? <span className='ms-store-select__location-line-item-store-distance'>{distanceAsString}</span> : false}
            </div>
            <div className='ms-store-select__location-line-item-content'>
                <div className='ms-store-select__location-line-item-contact-info'>
                    <p className='ms-store-select__location-line-header'>{locationLineItem.resources.contactInfoHeader}</p>
                    {storeAddress && (
                        <div className='ms-store-select__location-line-shop-address-section' aria-label={storeAddress} role='button'>
                            <span
                                className='msi msi-map-marker-alt ms-store-select__location-line-shop-address-glyph-icon'
                                aria-hidden='true'
                            />
                            <span className='ms-store-select__location-line-shop-address-text' aria-hidden='true'>
                                {storeAddress}
                            </span>
                        </div>
                    )}
                    {phoneNumber && (
                        <div className='ms-store-select__location-line-shop-phone-section'>
                            <span className='msi msi-phone ms-store-select__location-line-shop-phone-icon' />
                            <span className='ms-store-select__location-line-shop-phone-text'>{phoneNumber}</span>
                        </div>
                    )}
                </div>
                <div className='ms-store-select__location-line-item-store-hours'>
                    <p className='ms-store-select__location-line-header'>{locationLineItem.resources.storeHoursHeader}</p>
                    {renderStoreHours(storeHours, storeHoursList, locationLineItem.locationOpen, props.resources)}
                </div>
                {!storeLocatorView && !hideStockStatus && (
                    <div className='ms-store-select__location-line-item-store-availability'>
                        <p className='ms-store-select__location-line-header'>{resources.availabilityInfoHeader}</p>
                        {stockText && <p className='ms-store-select__location-line-stock-status'>{stockText}</p>}
                    </div>
                )}
                {isPreferredStoreEnabled &&
                    (isPreferredStore ? (
                        <button
                            role='checkbox'
                            className='ms-store-select__location-line-item-preferred-store'
                            aria-live='polite'
                            aria-checked='true'
                            aria-label={resources.preferredStoreAriaLabel}
                            onClick={onRemovePreferredStoreClickHandler}
                            {...removePreferredStoreAttribute}
                        >
                            {resources.preferredStoreText}
                        </button>
                    ) : (
                        <button
                            role='checkbox'
                            className='ms-store-select__location-line-item-set-as-preferred-store'
                            aria-live='polite'
                            aria-checked='false'
                            aria-label={resources.setAsPreferredStoreTextAriaLabel}
                            {...preferredStoreAttribute}
                            onClick={onSetPreferredStoreClickHandler}
                        >
                            {resources.setAsPreferredStoreText}
                        </button>
                    ))}
            </div>
        </div>
    );
};

/**
 * Render Store Location.
 * @param location - The location props.
 * @param index - The location index.
 * @param props - The view props.
 * @param selectedLocationReference - The ref.
 * @returns The JSX Element.
 */
const renderStoreLocation = (
    location: IStoreSelectorLocationLineItemProps,
    index: number,
    props: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>,
    selectedLocationReference: React.RefObject<HTMLDivElement>
): JSX.Element | undefined => {
    const {
        // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from store-selector.tsx file
        hideStockStatus,
        storeLocatorView,
        isCurrentLocation,
        isInStock,
        productPickUpOptionList,
        resources,
        storePickUpOptionList,
        telemetryContent
    } = location;

    const orgUnitLocation = location.location;
    const selectedStoreLocationId = location.selectedStoreLocationId;
    const defaultAriaSetsize = 0;
    const canSelectLocation = hideStockStatus || isInStock;
    const storeName = location.location.OrgUnitName;
    const pickupInStoreAriaLabel: string = resources.selectLocationAriaLabelFormat.replace('{StoreName}', storeName ?? '');
    const pickupInStoreButtonText: string = resources.selectLocation;
    const pickUpOptionDropdownPlaceholderText: string = props.resources.pickupOptionDropdownPlaceholderText;

    const payLoad: IPayLoad = getPayloadObject('click', telemetryContent!, TelemetryConstant.PickupInStore);
    const attributes = getTelemetryAttributes(telemetryContent!, payLoad);
    const deliveryOptionList = matchDeliveryOptions(productPickUpOptionList, storePickUpOptionList);
    const selectStoreText = props.resources.selectStoreText;
    const pickUpMethodLabel = props.resources.pickUpMethodLabel;

    /**
     * Method to handle the pick up in store.
     * @returns Void.
     */
    const onPickupInStoreClickHandler = () => () => {
        location.handlers.onSelected(location.location);
    };

    /**
     * Render Store Locations.
     * @param unitLocation - The org unit location.
     * @returns Handler for onClick.
     */
    const onClickHandler = (unitLocation: OrgUnitLocation | undefined) => () => {
        location.onClick(unitLocation?.OrgUnitNumber);
    };

    const canSelectPickUpMethod = !ArrayExtensions.hasElements(deliveryOptionList) ? (
        <PickUpButtonComponent
            attributes={attributes}
            pickupInStoreAriaLabel={pickupInStoreAriaLabel}
            pickupInStoreButtonText={pickupInStoreButtonText}
            pickupDeliveryOptionErrorMessage={props.resources.pickupDeliveryOptionErrorMessage}
            onPickupInStoreClickHandler={onPickupInStoreClickHandler}
        />
    ) : (
        <PickUpMethodDropdownComponent
            {...location}
            pickUpStatesProps={props}
            selectStoreText={selectStoreText}
            pickUpMethodLabel={pickUpMethodLabel}
            pickUpOptionPlaceholder={pickUpOptionDropdownPlaceholderText}
            pickupOptionDropdownError={props.resources.pickupOptionDropdownErrorText}
            pickupButtonAriaLabel={pickupInStoreAriaLabel}
        />
    );
    const pickUpMethodSelection = canSelectLocation ? canSelectPickUpMethod : false;

    return (
        <div
            className={classnames('ms-store-select__location-wrapper', {
                selected: selectedStoreLocationId === orgUnitLocation.OrgUnitNumber && !props.isMobileView
            })}
        >
            <div
                className={classnames('ms-store-select__location', { selected: selectedStoreLocationId === orgUnitLocation.OrgUnitNumber })}
                key={index}
                role='listitem'
                aria-setsize={ArrayExtensions.hasElements(props.locationListProps) ? props.locationListProps.length : defaultAriaSetsize}
                aria-posinset={Number.parseInt(location.index, 10)}
                onClick={onClickHandler(orgUnitLocation)}
                onKeyDown={onClickHandler(orgUnitLocation)}
                ref={selectedStoreLocationId === orgUnitLocation.OrgUnitNumber ? selectedLocationReference : undefined}
            >
                {renderStoreLocationLineItem(location, props)}
            </div>
            {!storeLocatorView &&
                (isCurrentLocation ? (
                    <p className='ms-store-select__location-line-current-location'>{resources.currentLocation}</p>
                ) : (
                    pickUpMethodSelection
                ))}
        </div>
    );
};

/**
 * Render Store Locations.
 * @param props - The view props.
 * @param selectedLocationReference - The ref.
 * @returns The JSX Element.
 */
const renderStoreLocations = (
    props: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>,
    selectedLocationReference: React.RefObject<HTMLDivElement>
) => {
    return (
        <div
            className={classnames('ms-store-select__locations', {
                show: props.data.storeSelectorStateManager.result?.listMapViewState.displayList
            })}
            role='list'
        >
            {props.locationListProps?.map((store, index) => {
                return renderStoreLocation(store, index, props, selectedLocationReference);
            })}
        </div>
    );
};

/**
 * Method to map resources with Location Item.
 * @param resources - List of strings for module.
 * @returns Resources for StoreSelector location line.
 */
const mapResources = (resources: IStoreSelectorResources): IStoreSelectorLocationLineItemResources => {
    return {
        contactInfoHeader: resources.contactText,
        storeHoursHeader: resources.timeText,
        availabilityInfoHeader: resources.availabilityText,

        closedText: resources.storeHoursClosedText,
        outOfStock: resources.outOfStockText,
        inStock: resources.inStockText,

        currentLocation: resources.selectedStoreLocationText,
        selectLocation: resources.selectStoreText,
        selectLocationAriaLabelFormat: resources.selectStoreAriaFormatText,
        setAsPreferredStoreText: resources.setAsPreferredStoreText,
        setAsPreferredStoreTextAriaLabel: resources.setAsPreferredStoreTextAriaLabel,
        preferredStoreText: resources.preferredStoreText,
        preferredStoreAriaLabel: resources.preferredStoreAriaLabel,

        days: {
            monday: resources.storeHoursMondayText,
            tuesday: resources.storeHoursTuesdayText,
            wednesday: resources.storeHoursWednesdayText,
            thursday: resources.storeHoursThursdayText,
            friday: resources.storeHoursFridayText,
            saturday: resources.storeHoursSaturdayText,
            sunday: resources.storeHoursSundayText,
            mondayFull: resources.storeHoursMondayFullText,
            tuesdayFull: resources.storeHoursTuesdayFullText,
            wednesdayFull: resources.storeHoursWednesdayFullText,
            thursdayFull: resources.storeHoursThursdayFullText,
            fridayFull: resources.storeHoursFridayFullText,
            saturdayFull: resources.storeHoursSaturdayFullText,
            sundayFull: resources.storeHoursSundayFullText
        }
    };
};

/**
 * Render the selected store.
 * @param selectedLocationProps -- Selected store view props.
 * @param storeSelectorViewProps -- Store selector view props.
 * @returns -- HTML.
 */
export const renderSelectedStore = (
    selectedLocationProps: ISelectedStoreViewProps,
    storeSelectorViewProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>
): JSX.Element => {
    const {
        storeDetailsMain,
        storeHeader,
        storeName,
        storeDetailsCloseButton,
        storeDistance,
        storeDetailsAvailabilityContainer,
        productAvailability,
        stockStatus,
        isPreferredStore,
        preferredStoreButton,
        removePreferredStoreButton,
        selectedStore
    } = selectedLocationProps;

    const storeAddress: string | undefined = selectedStore?.OrgUnitAvailability?.OrgUnitLocation?.Address;
    const phoneNumber: string | undefined = extractPhoneNumber(selectedStore?.OrgUnitAvailability?.OrgUnitLocation?.Contacts);
    const storeHoursList = selectedStore?.StoreHours?.RegularStoreHours
        ? buildStoreHours(selectedStore.StoreHours.RegularStoreHours, mapResources(storeSelectorViewProps.resources))
        : [];
    const storeOpenFrom: string | undefined = secondsToTime(selectedStore?.OrgUnitAvailability?.OrgUnitLocation?.OpenFrom);
    const storeOpenTo: string | undefined = secondsToTime(selectedStore?.OrgUnitAvailability?.OrgUnitLocation?.OpenTo);
    const locationOpen = { openFrom: storeOpenFrom, openTo: storeOpenTo };
    const storeNameValue = selectedStore?.OrgUnitAvailability?.OrgUnitLocation?.OrgUnitName;
    const pickupInStoreAriaLabel: string = selectedLocationProps.resources.selectLocationAriaLabelFormat.replace(
        '{StoreName}',
        storeNameValue ?? ''
    );
    const telemetryContent = getTelemetryObject(
        storeSelectorViewProps.context.request.telemetryPageName!,
        storeSelectorViewProps.friendlyName,
        storeSelectorViewProps.telemetry
    );
    const payLoad = getPayloadObject('click', telemetryContent, TelemetryConstant.PickupInStore);
    const attributes = getTelemetryAttributes(telemetryContent, payLoad);
    const pickupInStoreButtonText: string = selectedLocationProps.resources.selectLocation;
    const selectStoreText = storeSelectorViewProps.resources.selectStoreText;
    const pickUpMethodLabel = storeSelectorViewProps.resources.pickUpMethodLabel;
    const pickUpOptionDropdownPlaceholderText: string = storeSelectorViewProps.resources.pickupOptionDropdownPlaceholderText;
    const orgUnitNumber = selectedStore?.OrgUnitAvailability?.OrgUnitLocation!.OrgUnitNumber;
    const productPickUpOptionList = storeSelectorViewProps.data.storeSelectorStateManager.result?.context?.deliveryOptions?.DeliveryOptions;
    const deliveryOptionList = matchDeliveryOptions(productPickUpOptionList, selectedLocationProps.deliveryOptions);
    const selectedLocation = storeSelectorViewProps.locationListProps?.find(location => location.location.OrgUnitNumber === orgUnitNumber);

    /**
     * Method to handle the pick up in store.
     * @returns Void.
     */
    const onPickupInStoreClickHandler = () => () => {
        selectedLocationProps.handlers.onSelected(selectedStore!.OrgUnitAvailability!.OrgUnitLocation!);
    };
    const canSelectPickUpMethod = !ArrayExtensions.hasElements(deliveryOptionList) ? (
        <PickUpButtonComponent
            attributes={attributes}
            pickupInStoreAriaLabel={pickupInStoreAriaLabel}
            pickupInStoreButtonText={pickupInStoreButtonText}
            pickupDeliveryOptionErrorMessage={storeSelectorViewProps.resources.pickupDeliveryOptionErrorMessage}
            onPickupInStoreClickHandler={onPickupInStoreClickHandler}
        />
    ) : (
        selectedLocation && (
            <PickUpMethodDropdownComponent
                {...selectedLocation}
                pickUpStatesProps={storeSelectorViewProps}
                selectStoreText={selectStoreText}
                pickUpMethodLabel={pickUpMethodLabel}
                pickUpOptionPlaceholder={pickUpOptionDropdownPlaceholderText}
                pickupOptionDropdownError={storeSelectorViewProps.resources.pickupOptionDropdownErrorText}
                pickupButtonAriaLabel={pickupInStoreAriaLabel}
            />
        )
    );

    return (
        <Node {...storeDetailsMain}>
            <Node {...storeHeader}>
                {storeDetailsCloseButton}
                {storeName}
                {storeDistance}
            </Node>
            <Node {...storeDetailsAvailabilityContainer}>
                <div className='ms-store-select__location-line-item-contact-info'>
                    <p className='ms-store-select__location-line-header'>{storeSelectorViewProps.resources.contactText}</p>
                    {storeAddress && (
                        <div className='ms-store-select__location-line-shop-address-section' aria-label={storeAddress} role='button'>
                            <span
                                className='msi msi-map-marker-alt ms-store-select__location-line-shop-address-glyph-icon'
                                aria-hidden='true'
                            />
                            <span className='ms-store-select__location-line-shop-address-text' aria-hidden='true'>
                                {storeAddress}
                            </span>
                        </div>
                    )}
                    {phoneNumber && (
                        <div className='ms-store-select__location-line-shop-phone-section'>
                            <span className='msi msi-phone ms-store-select__location-line-shop-phone-icon' />
                            <span className='ms-store-select__location-line-shop-phone-text'>{phoneNumber}</span>
                        </div>
                    )}
                </div>
                <div className='ms-store-select__location-line-item-store-hours'>
                    <p className='ms-store-select__location-line-header'>{storeSelectorViewProps.resources.timeText}</p>
                    {renderStoreHours(selectedStore?.StoreHours, storeHoursList, locationOpen, storeSelectorViewProps.resources)}
                </div>
                {productAvailability && (
                    <div className='ms-store-select__location-line-item-store-availability'>
                        <p className='ms-store-select__location-line-header'>{productAvailability}</p>
                        {stockStatus && <p className='ms-store-select__location-line-stock-status'>{stockStatus}</p>}
                    </div>
                )}
            </Node>
            {isPreferredStore ? preferredStoreButton : removePreferredStoreButton}
            {canSelectPickUpMethod}
        </Node>
    );
};

/**
 * Store Selector View.
 * @param props - The view props.
 * @returns The JSX Element.
 */
const StoreSelectorViewComponent: React.FC<IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>> = props => {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from Store-Selector.tsx file
    const {
        BodyContainerProps,
        storeResultContainerProps,
        FooterContainerProps,
        HeaderContainerProps,
        HeaderProps,
        ModuleProps,
        locationsMessage,
        search,
        state,
        spinner,
        maps,
        locationsList,
        noLocationsMessage,
        terms,
        storeDetailsModal,
        selectedLocation,
        bodyWrapperProps,
        data,
        context
    } = props;
    const selectedLocationReference = React.useRef(null);
    const [isDesktopPort, setIsDesktopPort] = React.useState<boolean>(false);

    const isDesktopViewport = React.useCallback(() => {
        const portView = isMobile({ variant: VariantType.Browser, context: context.request });
        const isDesktopPorts = portView === 'md' || portView === 'xl' || portView === 'lg';
        setIsDesktopPort(isDesktopPorts);
    }, [context]);

    React.useEffect(() => {
        if (props.locationsList) {
            /**
             * Method to handle scrolling.
             */
            const scrollIntoView = () => {
                const selectedLocationDiv = (selectedLocationReference as React.RefObject<HTMLDivElement>).current;
                if (selectedLocationDiv !== null) {
                    const offset = selectedLocationDiv.getBoundingClientRect();
                    const parent = selectedLocationDiv.parentElement?.parentElement;
                    if (parent && offset) {
                        const totalHeight = parent.scrollTop + offset.top;
                        parent.scrollTop = totalHeight - parent.clientHeight;
                    }
                }
            };
            scrollIntoView();
        }
    }, [props.locationsList]);

    React.useEffect(() => {
        if (MsDyn365.isBrowser) {
            window.addEventListener('resize', isDesktopViewport);
        }
        isDesktopViewport();
    }, [isDesktopViewport]);
    const viewport = isMobile({ variant: VariantType.Browser, context: context.request });

    const isDesktopView = viewport === 'md' || viewport === 'lg' || viewport === 'xl';

    if (!isDesktopView || !isDesktopPort) {
        return (
            <Module {...ModuleProps}>
                <Node {...HeaderContainerProps}>{HeaderProps}</Node>
                <Node {...BodyContainerProps}>
                    <Node {...storeResultContainerProps!}>
                        {locationsMessage && (
                            <StoreSelectorFoundLocationsMessageComponent {...(locationsMessage as React.ReactElement).props} />
                        )}
                        {search}
                        <Node {...bodyWrapperProps!}>
                            <Node {...storeResultContainerProps!}>
                                {state.isSearchInProgress ? (
                                    spinner
                                ) : (
                                    <>{locationsList ? renderStoreLocations(props, selectedLocationReference) : noLocationsMessage}</>
                                )}
                                <Node
                                    className={`ms-store-select__map_view ${
                                        data.storeSelectorStateManager.result?.listMapViewState.displayMap ? '' : 'hide'
                                    }`}
                                >
                                    {maps}
                                </Node>
                                <Node {...storeDetailsModal!}>{selectedLocation && renderSelectedStore(selectedLocation, props)}</Node>
                            </Node>
                        </Node>
                    </Node>
                </Node>
                <Node {...FooterContainerProps}>{terms}</Node>
            </Module>
        );
    }
    return (
        <Module {...ModuleProps}>
            <Node {...HeaderContainerProps}>{HeaderProps}</Node>
            <Node {...BodyContainerProps}>
                <Node
                    className={`ms-store-select__store_container ${
                        data.storeSelectorStateManager.result?.listMapViewState.displayList ? 'show' : ''
                    }`}
                >
                    {locationsMessage && (
                        <StoreSelectorFoundLocationsMessageComponent {...(locationsMessage as React.ReactElement).props} />
                    )}
                    {search}
                    {state.isSearchInProgress ? (
                        spinner
                    ) : (
                        <>{locationsList ? renderStoreLocations(props, selectedLocationReference) : noLocationsMessage}</>
                    )}
                </Node>
                <Node
                    className={`ms-store-select__map_container ${
                        data.storeSelectorStateManager.result?.listMapViewState.displayMap ? '' : 'hide'
                    }`}
                >
                    {maps}
                </Node>
            </Node>
            <Node {...FooterContainerProps}>{terms}</Node>
        </Module>
    );
};

export default StoreSelectorViewComponent;
