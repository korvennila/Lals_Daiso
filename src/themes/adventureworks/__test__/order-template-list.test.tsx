/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { IOrderTemplateListViewProps, ISingleOrderTemplateViewProps } from '@msdyn365-commerce-modules/order-template';
import { render } from 'enzyme';
import * as React from 'react';

import { IOrderTemplateListProps, IOrderTemplateListResources } from '../definition-extensions/order-template-list.ext.props.autogenerated';
import OrderTemplateListViewComponent from '../views/order-template-list.view';

const mockActionContext = buildHydratedMockActionContext();

// @ts-expect-error
mockActionContext.requestContext.apiSettings = {
    baseImageUrl: 'https://cms-ppe-imageresizer-mr.trafficmanager.net/cms/api/fabrikamsb/imageFileData/search?fileName=/'
};
const mockResources: IOrderTemplateListResources = {
    headingForEmptyOrderTemplateList: 'Heading For Empty Order Template List',
    textForEmptyOrderTemplateList: 'Text For Empty Order Template List',
    emptyOrderTemplateText: 'Your order template list is empty.',
    unableToGetOrderTemplateList: 'Unable to get order template list!',
    removeButtonText: 'Remove from order template list',
    addToBagButtonText: 'Add to bag',
    createNewTemplateButtonText: 'Create an order template',
    progressNotificationText: 'Loading...',
    orderTemplateCreatedSuccessText: 'Order template created successfully',
    orderTemplateListTitle: 'Order templates',
    orderTemplateCreationFailedText: 'Failed to create new order template',
    deleteOrderTemplateFailedText: 'Failed to delete order template',
    closeWindowButtonText: 'closeWindowButtonText',
    addToCartFailureMessage: 'addToCartFailureMessage',
    addToCartSuccessMessage: 'addToCartSuccessMessage',
    addToCartProcessMessage: 'addToCartProcessMessage',
    viewCartButtonText: 'viewCartButtonText',
    orderTemplateCloseButtonText: 'orderTemplateCloseButtonText',
    linesAddedToCartHeaderItemsOneText: 'linesAddedToCartHeaderItemsOneText',
    linesAddedToCartHeaderLinesOneText: 'linesAddedToCartHeaderLinesOneText',
    linesAddedToCartHeaderLinesFormatText: 'linesAddedToCartHeaderLinesFormatText',
    linesAddedToCartHeaderMessageText: 'linesAddedToCartHeaderMessageText',
    createOrderTemplateHeader: 'createOrderTemplateHeader',
    orderTemplateTitle: 'orderTemplateTitle',
    orderTemplateNameAriaLabel: 'orderTemplateNameAriaLabel',
    createOrderTemplateDescription: 'createOrderTemplateDescription',
    defaultOrderTemplateName: 'defaultOrderTemplateName',
    createOrderTemplateButtonText: 'createOrderTemplateButtonText',
    cancelNewOrderTemplateCreationButtonText: 'cancelNewOrderTemplateCreationButtonText',
    orderTemplateModalAriaLabel: 'Order template aria label',
    orderTemplateErrorMessage:
        'This action could not be completed. Some of the selected items are either not available to purchase or do not have enough quantity in stock. Please try adjusting the items and their quantity and try again.'
};

const orderTemplateImageText = 'Product Image';
const addToCartButtonText = 'Add to Cart Button';
const removeButtonText = 'Remove Button';
const headerText = 'Heading';

const mockOrderTemplates: ISingleOrderTemplateViewProps[] = [
    {
        key: 'index1',
        orderTemplateImage: <div>{orderTemplateImageText}</div>,
        addToCartButton: <div>{addToCartButtonText}</div>,
        removeButton: <div>{removeButtonText}</div>
    },
    {
        key: 'index2',
        orderTemplateImage: <div>{orderTemplateImageText}</div>,
        addToCartButton: <div>{addToCartButtonText}</div>,
        removeButton: <div>{removeButtonText}</div>
    }
];

describe('OrderTemplateList unit tests -', () => {
    it('View renders correctly', () => {
        const moduleProps: IOrderTemplateListViewProps = buildMockModuleProps({}, {}) as IOrderTemplateListViewProps;

        const allModuleProps: IOrderTemplateListViewProps & IOrderTemplateListProps<IOrderTemplateListResources> = buildMockModuleProps(
            {},
            {}
        ) as IOrderTemplateListViewProps & IOrderTemplateListProps<IOrderTemplateListResources>;

        allModuleProps.OrderTemplateList = {
            moduleProps,
            className: 'ms-order-template'
        };
        allModuleProps.OrderTemplates = {
            className: 'ms-order-template__list-item',
            tag: 'ul'
        };
        allModuleProps.OrderTemplate = {
            className: 'ms-order-template__tile',
            tag: 'li'
        };
        allModuleProps.status = 'SUCCESS';
        moduleProps.resources = mockResources;
        allModuleProps.heading = <div className='ms-order-template__heading'>{headerText}</div>;

        allModuleProps.orderTemplates = mockOrderTemplates;

        const component = render(<OrderTemplateListViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('View renders inCorrectly', () => {
        const moduleProps: IOrderTemplateListViewProps = buildMockModuleProps({}, {}) as IOrderTemplateListViewProps;

        const allModuleProps: IOrderTemplateListViewProps & IOrderTemplateListProps<IOrderTemplateListResources> = buildMockModuleProps(
            {},
            {}
        ) as IOrderTemplateListViewProps & IOrderTemplateListProps<IOrderTemplateListResources>;

        allModuleProps.OrderTemplateList = {
            moduleProps,
            className: 'ms-order-template'
        };
        allModuleProps.OrderTemplates = {
            className: 'ms-order-template__list-item',
            tag: 'ul'
        };
        allModuleProps.OrderTemplate = {
            className: 'ms-order-template__tile',
            tag: 'li'
        };
        allModuleProps.status = 'FAILED';
        moduleProps.resources = mockResources;
        allModuleProps.heading = <div className='ms-order-template__heading'>{headerText}</div>;

        allModuleProps.orderTemplates = mockOrderTemplates;

        const component = render(<OrderTemplateListViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });
});
