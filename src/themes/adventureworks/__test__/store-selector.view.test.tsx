/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { AsyncResult, buildMockModuleProps, buildMockRequest, IRequestContext } from '@msdyn365-commerce/core';
import { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';
import {
    IStoreSelectorFoundLocationsMessage,
    IStoreSelectorLocationLineItemProps,
    IStoreSelectorLocationLineItemResources,
    IStoreSelectorViewProps
} from '@msdyn365-commerce-modules/store-selector';
import { ISelectedStoreViewProps } from '@msdyn365-commerce-modules/store-selector/dist/types/modules/store-selector/components/selected-store/selected-store';
import { orgUnitLocations } from '@msdyn365-commerce-modules/test-utilities';
import { mount, render } from 'enzyme';
import * as React from 'react';

import { IStoreSelectorProps, IStoreSelectorResources } from '../definition-extensions/store-selector.ext.props.autogenerated';
import StoreSelectorViewComponent, { renderSelectedStore } from '../views/store-selector.view';

// @ts-expect-error partial mock
const moduleResource: IStoreSelectorResources = {
    milesShortText: 'mi',
    kilometersShortText: 'km',
    storeCountMessage: 'test',
    storeAllCountMessage: 'test',
    storeCountMessageInKm: 'test',
    distanceString: 'test',
    closeDistanceString: 'test',
    storeHoursDayPeriod: 'test',
    storeHoursDay: 'test'
};

const mapString = 'Bing Map';

const mockSlotsMap = {
    maps: [<div key='map'>{mapString}</div>]
};
const mockProps = {
    state: {
        isSearchInProgress: false,
        isSeeAllStoreValue: false,
        isDesktopPort: false
    },
    BodyContainerProps: { className: 'ms-store-selector__modal-body' },
    FooterContainerProps: { className: 'ms-store-selector__modal-footer' },
    HeaderContainerProps: { className: 'ms-store-selector__modal-header' },
    HeaderProps: undefined,
    locationsMessage: undefined,
    search: undefined,
    spinner: 'Loading',
    locationsList: null,
    noLocationsMessage: 'Location Not found',
    terms: undefined,
    headerText: { text: 'Order Lookup', tag: 'h1' },
    callbacks: {
        searchTermChanged: jest.fn(),
        closeDialog: jest.fn(),
        performSearch: jest.fn(),
        selectedLocation: jest.fn(),
        getAndUpdateUserLocation: jest.fn(),
        attachMapAutoSuggest: jest.fn(),
        onSuggestionSelected: jest.fn(),
        setPreferredStore: jest.fn(),
        setSelectedStore: jest.fn(),
        setOrgUnitStoreInformation: jest.fn(),
        removePreferredStore: jest.fn()
    }
};

const mockStoreSelectorLocationLineItemResources: IStoreSelectorLocationLineItemResources = {
    contactInfoHeader: 'Contact',
    storeHoursHeader: 'Store hours',
    availabilityInfoHeader: 'Availability',
    closedText: 'Closed',
    outOfStock: 'This item is out of stock',
    inStock: 'In stock',
    currentLocation: 'Selected store location',
    selectLocation: 'Pick up here',
    selectLocationAriaLabelFormat: 'Pick up at {StoreName}',
    setAsPreferredStoreText: 'Set as preferred store',
    setAsPreferredStoreTextAriaLabel: 'Set as preferred store',
    preferredStoreText: 'Preferred store',
    preferredStoreAriaLabel: 'Preferred store',
    days: {
        monday: 'Mon',
        tuesday: 'Tue',
        wednesday: 'Wed',
        thursday: 'Thur',
        friday: 'Fri',
        saturday: 'Sat',
        sunday: 'Sun',
        mondayFull: 'Monday',
        tuesdayFull: 'Tuesday',
        wednesdayFull: 'Wednesday',
        thursdayFull: 'Thursday',
        fridayFull: 'Friday',
        saturdayFull: 'Saturday',
        sundayFull: 'Sunday'
    }
};

const mockLocationLineItemProps: IStoreSelectorLocationLineItemProps[] = [
    {
        storeHours: {
            RegularStoreHours: {}
        },
        storeHoursList: [
            {
                startDayFull: '',
                endDayFull: '',
                startDayShort: 'Mon',
                endDayShort: 'Sun',
                timeRange: '9:00 am–5:00 pm'
            }
        ],
        location: {
            OrgUnitName: 'Test',
            OrgUnitNumber: 'Test',
            Distance: 0.5,
            Contacts: [
                {
                    ChannelId: 1,
                    ContactTypeValue: 1,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                },
                {
                    ChannelId: 2,
                    ContactTypeValue: 2,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                }
            ]
        },
        resources: mockStoreSelectorLocationLineItemResources,
        storePickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        productPickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        hideStockStatus: true,
        isInStock: true,
        selectedStoreLocationId: '1',
        index: '1',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'Test',
        isLocationDisabled: false,
        isPreferredStoreEnabled: true,
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        stockStatusLabel: 'Test',
        locationOpen: {
            openFrom: 'Sun',
            openTo: 'Mon'
        },
        onClick: jest.fn()
    },
    {
        location: {
            OrgUnitName: 'Test',
            Distance: 10,
            Contacts: [
                {
                    ChannelId: 1,
                    ContactTypeValue: 2,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                }
            ],
            Address: 'Test'
        },
        resources: mockStoreSelectorLocationLineItemResources,
        storePickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        productPickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        hideStockStatus: true,
        isInStock: true,
        selectedStoreLocationId: '1',
        index: '1',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'mi',
        isLocationDisabled: false,
        isPreferredStoreEnabled: true,
        locationOpen: {
            openFrom: 'Sun',
            openTo: 'Mon'
        },
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        onClick: jest.fn()
    },
    {
        location: {},
        storeLocatorView: true,
        isCurrentLocation: true,
        isPreferredStoreEnabled: false,
        resources: mockStoreSelectorLocationLineItemResources,
        index: '2',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'mi',
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        locationOpen: {
            openFrom: 'Sun',
            openTo: 'Mon'
        },
        onClick: jest.fn()
    }
];
const mockLocationLineItemProps1: IStoreSelectorLocationLineItemProps[] = [
    {
        location: {},
        storeLocatorView: false,
        isCurrentLocation: true,
        isPreferredStoreEnabled: false,
        resources: mockStoreSelectorLocationLineItemResources,
        index: '2',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'mi',
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        onClick: jest.fn()
    }
];
const mockLocationLineItemProps2: IStoreSelectorLocationLineItemProps[] = [
    {
        storeHours: {
            RegularStoreHours: {}
        },
        storeHoursList: [
            {
                startDayFull: '',
                startDayShort: 'Mon',
                endDayFull: 'Mon',
                endDayShort: 'Sun',
                timeRange: '9:00 am–5:00 pm'
            }
        ],
        location: {
            OrgUnitName: 'Test',
            OrgUnitNumber: 'Test',
            Distance: 0.5,
            Contacts: [
                {
                    ChannelId: 1,
                    ContactTypeValue: 1,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                },
                {
                    ChannelId: 2,
                    ContactTypeValue: 2,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                }
            ]
        },
        resources: mockStoreSelectorLocationLineItemResources,
        storePickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        productPickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        hideStockStatus: true,
        isInStock: true,
        selectedStoreLocationId: '1',
        index: '1',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'Test',
        isLocationDisabled: false,
        isPreferredStoreEnabled: true,
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        stockStatusLabel: 'Test',
        onClick: jest.fn()
    }
];
const mockLocationLineItemProps3: IStoreSelectorLocationLineItemProps[] = [
    {
        storeHours: {
            RegularStoreHours: {}
        },
        storeHoursList: [
            {
                startDayFull: '',
                startDayShort: 'Mon',
                endDayFull: 'Mon',
                endDayShort: '',
                timeRange: '9:00 am–5:00 pm'
            }
        ],
        location: {
            OrgUnitName: 'Test',
            OrgUnitNumber: 'Test',
            Distance: 0.5,
            Contacts: [
                {
                    ChannelId: 1,
                    ContactTypeValue: 1,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                },
                {
                    ChannelId: 2,
                    ContactTypeValue: 2,
                    IsPrimary: true,
                    IsPrivate: false,
                    Locator: 'TestUS'
                }
            ]
        },
        resources: mockStoreSelectorLocationLineItemResources,
        storePickUpOptionList: [],
        productPickUpOptionList: [],
        hideStockStatus: true,
        isInStock: true,
        selectedStoreLocationId: '1',
        index: '1',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'Test',
        isLocationDisabled: false,
        isPreferredStoreEnabled: true,
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        stockStatusLabel: 'Test',
        onClick: jest.fn()
    }
];
const mockLocationLineItemProps4: IStoreSelectorLocationLineItemProps[] = [
    {
        storeHours: {
            RegularStoreHours: {}
        },
        storeHoursList: [
            {
                startDayFull: '',
                endDayFull: '',
                startDayShort: 'Mon',
                endDayShort: 'Sun',
                timeRange: '9:00 am–5:00 pm'
            }
        ],
        location: {},
        resources: mockStoreSelectorLocationLineItemResources,
        storePickUpOptionList: undefined,
        productPickUpOptionList: [
            {
                ChargeGroup: 'Charge group',
                Code: '001',
                Description: 'Home',
                RecordId: 1,
                TotalChargeAmount: 10000,
                ShippingChargeAmount: 100
            }
        ],
        hideStockStatus: true,
        isInStock: true,
        selectedStoreLocationId: '1',
        index: '1',
        preferredStoreLocationId: 'Test',
        preferredDistanceUnit: 'Test',
        isLocationDisabled: true,
        isPreferredStoreEnabled: false,
        handlers: {
            onSelected: jest.fn(),
            onSetAsPreferredStore: jest.fn(),
            onRemovePreferredStore: jest.fn(),
            closeStoreDetailsModal: jest.fn()
        },
        stockStatusLabel: 'Test',
        locationOpen: {
            openFrom: 'Sun',
            openTo: 'Mon'
        },
        onClick: jest.fn()
    }
];

const mockStoreSelectorFoundLocationsMessage: IStoreSelectorFoundLocationsMessage = {
    resources: moduleResource,

    // Only care about count here so don't have to actually populate list
    locations: [{}, {}, {}],
    searchRadius: 50,
    isSeeAllStore: true,
    preferredDistanceUnit: 'mi'
};

const mockStoreSelectorFoundLocationsMessage1: IStoreSelectorFoundLocationsMessage = {
    resources: moduleResource,

    // Only care about count here so don't have to actually populate list
    locations: [{}, {}, {}],
    searchRadius: 50,
    isSeeAllStore: false,
    preferredDistanceUnit: 'KM'
};

const mockCallbacks = {
    searchTermChanged: jest.fn(),
    closeDialog: jest.fn(),
    performSearch: jest.fn(),
    selectedLocation: jest.fn(),
    getAndUpdateUserLocation: jest.fn(),
    attachMapAutoSuggest: jest.fn(),
    onSuggestionSelected: jest.fn(),
    setPreferredStore: jest.fn(),
    setSelectedStore: jest.fn(),
    setOrgUnitStoreInformation: jest.fn(),
    removePreferredStore: jest.fn()
};

describe('Store selector view tests', () => {
    it('renders correctly with search in progress', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        moduleProps.config.lookupRadius = 1;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;

        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with search is not in progress', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        moduleProps.config.lookupRadius = 1;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps1;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with store hour list', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        moduleProps.config.lookupRadius = 1;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps2;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;

        const line = mount(<StoreSelectorViewComponent {...allModuleProps} />);
        const button = line.find('.ms-store-select__location-line-pickup-list-toggle').first();
        button.simulate('click');
        const button1 = line.find('.ms-store-select__location-line-pickup-list-item-button').first();
        button1.simulate('click');
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no end day in store hour', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        moduleProps.config.lookupRadius = 1;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps3;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;

        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with locationsMessage', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal',
            resources: moduleResource
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;

        // @ts-expect-error
        allModuleProps.locationsMessage = <div {...mockStoreSelectorFoundLocationsMessage} />;

        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with locationsMessage -- isSeeAllStore: false', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal',
            resources: moduleResource
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;

        // @ts-expect-error
        allModuleProps.locationsMessage = <div {...mockStoreSelectorFoundLocationsMessage1} />;

        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with search in progress -- No location message', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;
        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        moduleProps.resources = moduleResource;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = mockProps.FooterContainerProps;
        allModuleProps.HeaderContainerProps = mockProps.HeaderContainerProps;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.noLocationsMessage = 'No location message';
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly in mobile view', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;

        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.HeaderContainerProps = { className: 'ms-store-selector__modal-header' };
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = true;
        allModuleProps.state.filteredPickupMode = 'Curbside';
        allModuleProps.locationsMessage = 'Locations message';
        allModuleProps.search = 'Search';
        allModuleProps.spinner = 'Spinner';
        allModuleProps.noLocationsMessage = 'No locations';
        allModuleProps.locationsList = 'Locations list';
        allModuleProps.terms = 'Terms';
        allModuleProps.headerText = 'Header';
        allModuleProps.isMobileView = true;
        allModuleProps.slots = mockSlotsMap;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'FAILED',
            result: undefined
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with desktop view', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;

        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.HeaderContainerProps = { className: 'ms-store-selector__modal-header' };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps3;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.isMobileView = false;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: true
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });

    it('when the viewport changes.', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;

        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.HeaderContainerProps = { className: 'ms-store-selector__modal-header' };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps4;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    },
                    showMapViewLink: true
                },
                listMapViewState: {
                    displayList: false
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = mount(<StoreSelectorViewComponent {...allModuleProps} />);

        // Change the viewport to 500px.
        global.innerWidth = 500;

        // Trigger the window resize event.
        global.dispatchEvent(new Event('resize'));
        expect(component).toMatchSnapshot();
    });

    it('Render Selected Store', () => {
        const mockRequest: IRequestContext = buildMockRequest();

        orgUnitLocations[0].OrgUnitAvailability.OrgUnitLocation.Latitude = 0;
        orgUnitLocations[0].OrgUnitAvailability.OrgUnitLocation.Longitude = 0;

        // @ts-expect-error
        const mockContext: ICoreContext = {
            request: mockRequest,
            app: {
                config: {
                    hideRating: false
                }
            },

            cultureFormatter: {
                formatCurrency: jest.fn(price => `$${price}`)
            }
        };
        const functionCall = renderSelectedStore(
            {
                resources: {
                    selectLocationAriaLabelFormat: 'test'
                }
            } as ISelectedStoreViewProps,
            {
                context: mockContext,
                resources: {
                    selectStoreText: 'test',
                    storeAllCountMessage: 'test',
                    closeDistanceString: 'test',
                    distanceString: 'test',
                    storeHoursDayPeriod: 'test',
                    storeHoursDay: 'test'
                },
                data: {
                    storeSelectorStateManager: ({
                        status: 'SUCCESS',
                        result: {
                            listMapViewState: {
                                displayMap: true
                            },
                            isMapApiLoaded: false,
                            selectedStoreLocationId: 'SANFRANCIS',
                            setMapModuleLoaded: undefined,
                            context: {
                                product: {
                                    RecordId: 10
                                },
                                id: 'store-selector',
                                orgUnitStoreInformation: orgUnitLocations,
                                deliveryOptions: {
                                    status: 'SUCCESS',
                                    result: {
                                        DeliveryOptions: [
                                            {
                                                Code: '60'
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    } as unknown) as AsyncResult<IStoreSelectorStateManager>
                }
            } as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>
        );
        expect(functionCall).toBeDefined();
    });

    it('hideStockStatus is false and isInStock is true renders correctly with desktop view', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;

        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        mockLocationLineItemProps3[0].hideStockStatus = false;
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.HeaderContainerProps = { className: 'ms-store-selector__modal-header' };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps3;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.isMobileView = false;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: true
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
        const line = mount(<StoreSelectorViewComponent {...allModuleProps} />);
        const button = line.find('.ms-store-select__location-line-select-store').first();
        const buttonNode = button.getDOMNode();
        expect(buttonNode).toBeDefined();
    });

    it('hideStockStatus is false and isInStock is false renders correctly with no pick up here button', () => {
        const moduleProps: IStoreSelectorProps<{}> = buildMockModuleProps({}, {}) as IStoreSelectorProps<{}>;

        const allModuleProps: IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources> = buildMockModuleProps(
            {},
            {}
        ) as IStoreSelectorViewProps & IStoreSelectorProps<IStoreSelectorResources>;
        allModuleProps.ModuleProps = {
            moduleProps,
            className: 'ms-store-selector__modal'
        };
        mockLocationLineItemProps3[0].hideStockStatus = false;
        mockLocationLineItemProps3[0].isInStock = false;
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.FooterContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.HeaderContainerProps = { className: 'ms-store-selector__modal-header' };
        allModuleProps.BodyContainerProps = { className: 'ms-store-selector__modal-body' };
        allModuleProps.headerText = mockProps.headerText;
        allModuleProps.callbacks = mockProps.callbacks;
        allModuleProps.state = mockProps.state;
        allModuleProps.state.isSearchInProgress = false;
        allModuleProps.state.isSeeAllStoreValue = true;
        allModuleProps.spinner = 'Load1';
        allModuleProps.locationsList = { className: 'Location List' };
        allModuleProps.locationListProps = mockLocationLineItemProps3;
        allModuleProps.locationsMessage = mockStoreSelectorFoundLocationsMessage;
        allModuleProps.resources = moduleResource;
        allModuleProps.callbacks = mockCallbacks;
        allModuleProps.isMobileView = false;
        allModuleProps.data.storeSelectorStateManager = {
            status: 'SUCCESS',
            result: {
                isDialogOpen: true,
                context: {
                    product: {
                        RecordId: 10
                    }
                },
                listMapViewState: {
                    displayList: true,
                    displayMap: true
                }
            }
        } as AsyncResult<IStoreSelectorStateManager>;
        const component = render(<StoreSelectorViewComponent {...allModuleProps} />);
        expect(component).toMatchSnapshot();
        const line = mount(<StoreSelectorViewComponent {...allModuleProps} />);
        const button = line.find('.ms-store-select__location-line-select-store').first();
        expect(button).toHaveLength(0);
    });
});
