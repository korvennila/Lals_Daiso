/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import {
    buildHydratedMockActionContext,
    buildMockModuleProps,
    buildMockRequest,
    ICoreContext,
    IRequestContext
} from '@msdyn365-commerce/core';
import { IHeaderViewProps } from '@msdyn365-commerce-modules/header';
import { mount, render } from 'enzyme';
import * as React from 'react';

import { IHeaderProps } from '../definition-extensions/header.ext.props.autogenerated';
import HeaderView from '../views/header.view';

const mockRequest: IRequestContext = buildMockRequest();
mockRequest.gridSettings = {
    xs: { w: 767, h: 0 },
    sm: { w: 991, h: 0 },
    md: { w: 1199, h: 0 },
    lg: { w: 1599, h: 0 },
    xl: { w: 1600, h: 0 }
};
mockRequest.user.isAuthenticated = true;
mockRequest.user.signInUrl = '/signin';
mockRequest.user.signOutUrl = '/signout';
mockRequest.user.signUpUrl = '/signup';

const mockAnonRequest = buildMockRequest();
mockAnonRequest.user.isAuthenticated = false;
mockAnonRequest.user.signInUrl = '/signin';
mockAnonRequest.user.signOutUrl = '/signout';
mockAnonRequest.user.signUpUrl = '/signup';

const mockActionContext = buildHydratedMockActionContext();

/**
 * Mocked resources shared for test cases.
 */
// @ts-expect-error partial mock
const mockAnonContext: ICoreContext = {
    actionContext: mockActionContext,
    request: mockAnonRequest,
    app: {
        config: {
            disableTooltip: true,
            enableStickyHeader: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};

/**
 * Mocked resources shared for test cases.
 */
// @ts-expect-error partial mock
const mockAnonContext1: ICoreContext = {
    actionContext: mockActionContext,
    request: mockAnonRequest,
    app: {
        config: {
            disableTooltip: true,
            enableStickyHeader: false
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};

/**
 * Mocked resources shared for test cases.
 */
const mockHeaderConfig = {
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    useStickyHeader: true,
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};

/**
 * Mocked resources shared for test cases.
 */
const mockHeaderConfig1 = {
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    useStickyHeader: true,
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};

/**
 * Mocked resources shared for test cases.
 */
const mockHeaderConfig2 = {
    mobileLogoImage: {},
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    useStickyHeader: true,
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};

/**
 * Mocked resources shared for test cases.
 */
const mockHeaderConfig3 = {
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    useStickyHeader: false,
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};

/**
 * Mocked resources shared for test cases.
 */
const mockResources = {
    mobileHamburgerAriaLabel: 'Mobile view hamburger aria label',
    wishlistTooltipText: 'My wishlist',
    cartLabel: 'Shopping bag, ({0}) items',
    cartQtyLabel: '({0})',
    signInLinkText: 'Sign In',
    signInLinkAriaText: 'Sign In',
    signOutLinkText: 'Sign Out',
    signOutLinkAriaText: 'Sign Out',
    shoppingAsText: 'Shopping as {0}',
    switchCustomerLinkText: 'Switch customer',
    switchCustomerLinkAriaText: 'Switch customer',
    headerPreferredStoreText: 'Select store',
    headerPreferredStoreAriaLabel: 'select preferred store',
    signUpCustomerNotFoundTitle: 'Customer not found',
    signUpMultipleCustomerFoundTitle: 'Multiple customer found',
    signInCustomerNotAuthorizedTitle: 'Customer not authorized',
    closeNotificationLabel: 'Close',
    wishlistCountLabel: '',
    headerAriaLabel: 'Header',
    headerCurrentDistributorText: '',
    headerCurrentDistributorAriaLabel: ''
};

const resources = {
    mobileHamburgerAriaLabel: '',
    wishlistTooltipText: '',
    cartLabel: '',
    cartQtyLabel: '',
    signInLinkText: '',
    signInLinkAriaText: '',
    signOutLinkText: '',
    signOutLinkAriaText: '',
    shoppingAsText: '',
    switchCustomerLinkText: '',
    switchCustomerLinkAriaText: '',
    headerPreferredStoreText: '',
    headerPreferredStoreAriaLabel: '',
    signUpCustomerNotFoundTitle: '',
    signUpMultipleCustomerFoundTitle: '',
    signInCustomerNotAuthorizedTitle: '',
    closeNotificationLabel: '',
    wishlistCountLabel: '',
    headerAriaLabel: '',
    headerCurrentDistributorText: '',
    headerCurrentDistributorAriaLabel: ''
};
describe('Header view tests', () => {
    it('render correctly no sign in info', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig);

        // @ts-expect-error
        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...buildMockModuleProps(mockResources, mockAnonContext),
            ...moduleProps,
            logo: '{LogoComponent}',
            resources,
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{siteOptions}'],
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            Divider: { className: 'module-class-Divider' }
        };

        const view = render(<HeaderView {...mockProps} />);
        expect(view).toMatchSnapshot();
    });

    it('render correctly no signed out', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig);

        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...moduleProps,
            logo: '{LogoComponent}',
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            resources: mockResources,
            context: mockAnonContext,
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            data: {
                // @ts-expect-error
                accountInformation: {
                    result: {
                        AccountNumber: '1'
                    }
                }
            },
            siteOptions: ['{SiteOptions}'],
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            AccountInfoDropdownParentContainer: { className: 'module-class-AccountInfoDropdownParent' },
            signInLink: '{SignIn}',
            Divider: { className: 'module-class-Divider' }
        };

        const view = render(<HeaderView {...mockProps} />);
        expect(view).toMatchSnapshot();
    });

    it('render correctly signed in', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig);

        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...moduleProps,
            logo: '{LogoComponent}',
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            resources: mockResources,
            context: mockAnonContext,
            mobileMenuCollapsed: false,
            data: {
                // @ts-expect-error
                accountInformation: {
                    result: {
                        AccountNumber: '1',
                        FirstName: 'First Name'
                    }
                }
            },
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{SiteOptions}'],
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            AccountInfoDropdownParentContainer: { className: 'module-class-AccountInfoDropdownParent' },
            AccountInfoDropdownPopoverConentContainer: { className: 'module-class-AccountInfoDropdownPopoverConent' },
            accountInfoDropdownButton: '{accountInfoDropdownButton}',
            signOutLink: '{SignOut}',
            accountLinks: ['{accountLink1}', '{accountLink2}', '{accountLink3}'],
            Divider: { className: 'module-class-Divider' }
        };

        const view = render(<HeaderView {...mockProps} />);
        expect(view).toMatchSnapshot();
    });
    it('render correctly signed in with parameter', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig);

        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...moduleProps,
            logo: '{LogoComponent}',
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            resources: mockResources,
            context: mockAnonContext,
            mobileMenuCollapsed: false,
            data: {
                // @ts-expect-error
                accountInformation: {
                    result: {
                        AccountNumber: '1'
                    }
                }
            },
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{SiteOptions}'],
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            AccountInfoDropdownParentContainer: { className: 'module-class-AccountInfoDropdownParent' },
            AccountInfoDropdownPopoverConentContainer: { className: 'module-class-AccountInfoDropdownPopoverConent' },
            accountInfoDropdownButton: '{accountInfoDropdownButton}',
            signOutLink: '{SignOut}',
            accountLinks: ['{accountLink1}', '{accountLink2}', '{accountLink3}'],
            Divider: { className: 'module-class-Divider' }
        };

        const view = render(<HeaderView {...mockProps} />);
        expect(view).toMatchSnapshot();
    });
    it('render correctly signed in with with customer', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig);

        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...moduleProps,
            logo: '{LogoComponent}',
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            resources: mockResources,
            context: mockAnonContext,
            mobileMenuCollapsed: false,
            data: {
                // @ts-expect-error
                accountInformation: undefined
            },
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: [],
            siteOptions: ['{SiteOptions}'],
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            AccountInfoDropdownParentContainer: { className: 'module-class-AccountInfoDropdownParent' },
            AccountInfoDropdownPopoverConentContainer: { className: 'module-class-AccountInfoDropdownPopoverConent' },
            accountInfoDropdownButton: '{accountInfoDropdownButton}',
            signOutLink: '{SignOut}',
            accountLinks: undefined,
            Divider: { className: 'module-class-Divider' }
        };

        const view = render(<HeaderView {...mockProps} />);
        expect(view).toMatchSnapshot();
    });

    it('render correctly for sticky header', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig1);

        // @ts-expect-error
        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...buildMockModuleProps(mockResources, mockAnonContext),
            ...moduleProps,
            logo: '{LogoComponent}',
            resources,
            context: mockAnonContext,
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{siteOptions}'],
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            Divider: { className: 'module-class-Divider' }
        };
        document.documentElement.scrollTop = 20;
        const result = mount(<HeaderView {...mockProps} />);
        expect(result).toBeDefined();
    });

    it('render correctly when sticky header is disabled', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig3);

        // @ts-expect-error
        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...buildMockModuleProps(mockResources, mockAnonContext1),
            ...moduleProps,
            logo: '{LogoComponent}',
            resources,
            context: mockAnonContext1,
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{siteOptions}'],
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'default-container' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            Divider: { className: 'module-class-Divider' }
        };
        document.documentElement.scrollTop = 20;
        const result = mount(<HeaderView {...mockProps} />);
        expect(result).toBeDefined();
    });

    it('render correctly for sticky header elements', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig1);

        // @ts-expect-error
        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...buildMockModuleProps(mockResources, mockAnonContext),
            ...moduleProps,
            logo: '{LogoComponent}',
            resources,
            context: mockAnonContext,
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{siteOptions}'],
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'module-class-HeaderContainer' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            Divider: { className: 'module-class-Divider' }
        };
        const wrapper = mount(<HeaderView {...mockProps} />, { attachTo: document.body.firstElementChild as HTMLElement });
        const imageMapper = wrapper.instance() as HeaderView;

        const promoBannerNode = document.createElement('DIV');
        promoBannerNode.className = 'ms-promo-banner';
        document.body.appendChild(promoBannerNode);

        const headerNode = document.createElement('DIV');
        headerNode.className = 'ms-header';
        document.body.appendChild(headerNode);

        const headerLogoNode = document.createElement('DIV');
        headerLogoNode.className = 'ms-header__logo';
        document.body.appendChild(headerLogoNode);

        expect(() => {
            imageMapper.componentDidMount();
        }).not.toThrow();

        wrapper.unmount();
    });

    it('render correctly for sticky header elements after class gets removed', () => {
        const moduleProps = buildMockModuleProps({}, {}, mockHeaderConfig2);

        // @ts-expect-error
        const mockProps: IHeaderViewProps & IHeaderProps<{}> = {
            ...buildMockModuleProps(mockResources, mockAnonContext),
            ...moduleProps,
            logo: '{LogoComponent}',
            resources,
            context: mockAnonContext,
            wishListIconDesktop: '{WishlistIconDesktop}',
            wishListIconMobile: '{WishlistIconMobile}',
            cartIcon: '{CartIcon}',
            navIcon: '{NavIcon}',
            mobileMenuCollapsed: false,
            signinPopoverOpen: true,
            className: 'mock-class',
            menuBar: ['{NavigationMenu}'],
            search: ['{Search}'],
            siteOptions: ['{siteOptions}'],
            HeaderTag: { moduleProps, className: 'ms-header', tag: 'header' },
            HeaderContainer: { className: 'module-class-HeaderContainer' },
            HeaderTopBarContainer: { className: 'module-class-HeaderTopBar' },
            MobileMenuContainer: { className: 'module-class-MobileMenu' },
            MobileMenuBodyContainer: { className: 'module-class-MobileMenuBody' },
            MobileMenuLinksContainer: { className: 'module-class-MobileMenuLinks' },
            MobileMenuHeader: 'mobile-menu-header',
            Divider: { className: 'module-class-Divider' }
        };
        const wrapper = mount(<HeaderView {...mockProps} />, { attachTo: document.body.firstElementChild as HTMLElement });
        const imageMapper = wrapper.instance() as HeaderView;

        const promoBannerNode = document.createElement('DIV');
        promoBannerNode.className = 'ms-promo-banner';
        document.body.appendChild(promoBannerNode);

        const headerNode = document.createElement('DIV');
        headerNode.className = 'ms-header';
        document.body.appendChild(headerNode);

        const headerLogoNode = document.createElement('DIV');
        headerLogoNode.className = 'ms-header__logo';
        document.body.appendChild(headerLogoNode);
        document.documentElement.scrollTop = -1;

        expect(() => {
            imageMapper.componentDidMount();
        }).not.toThrow();

        wrapper.unmount();
    });
});
