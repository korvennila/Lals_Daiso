/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildHydratedMockActionContext, buildMockModuleProps } from '@msdyn365-commerce/core';
import { BusinessPartnerOperationRequest, BusinessPartnerUser, Customer } from '@msdyn365-commerce/retail-proxy';
import { IB2bRequestsStatusData } from '@msdyn365-commerce-modules/account-management';
import { wrapInResolvedAsyncResult } from '@msdyn365-commerce-modules/retail-actions';
import { render } from 'enzyme';
import * as React from 'react';

import {
    HeadingTag,
    IB2bRequestsStatusConfig,
    IB2bRequestsStatusProps,
    IHeadingData
} from '../definition-extensions/b2b-requests-status.ext.props.autogenerated';
import B2bRequestsStatusView from '../views/b2b-requests-status.view';

const mockB2bData: IB2bRequestsStatusData = {
    customerInformation: wrapInResolvedAsyncResult({
        AccountNumber: '1',
        FirstName: 'First Name',
        IsB2b: true
    } as Customer),
    operationRequests: wrapInResolvedAsyncResult([
        {
            UserFirstName: 'Frank',
            UserLastName: 'Faraday',
            StatusValue: 1,
            TypeValue: 5,
            OperationId: '1',
            CreatedDateTime: new Date('02/01/2021'),
            Details: {
                AccountStatementStartDateTime: new Date('01/01/2021'),
                AccountStatementEndDateTime: new Date('01/20/2021'),
                InvoiceId: ''
            },
            UserId: '',
            ExtensionProperties: []
        } as BusinessPartnerOperationRequest,
        {
            UserFirstName: 'Frank',
            UserLastName: 'Faraday',
            StatusValue: 1,
            TypeValue: 6,
            OperationId: '1',
            CreatedDateTime: new Date('02/01/2021'),
            Details: {
                AccountStatementStartDateTime: undefined,
                AccountStatementEndDateTime: undefined,
                InvoiceId: 'CIV-1234'
            },
            UserId: '',
            ExtensionProperties: []
        } as BusinessPartnerOperationRequest
    ]),
    b2bUserInformation: wrapInResolvedAsyncResult({
        B2BUserId: '9c1421e8-9177-4e17-8dbc-fd9ccad4ed4c'
    } as BusinessPartnerUser)
};

const mockB2bData1: IB2bRequestsStatusData = {
    customerInformation: wrapInResolvedAsyncResult({
        AccountNumber: '1',
        FirstName: 'First Name',
        IsB2b: true
    } as Customer),

    // @ts-expect-error
    operationRequests: wrapInResolvedAsyncResult(undefined),
    b2bUserInformation: wrapInResolvedAsyncResult({
        B2BUserId: '9c1421e8-9177-4e17-8dbc-fd9ccad4ed4c'
    } as BusinessPartnerUser)
};

const mockHeading1: IHeadingData = {
    text: 'Mock heading 1',
    tag: HeadingTag.h1
};

const mockConfig: IB2bRequestsStatusConfig = {
    className: 'testClassName',
    heading: mockHeading1
};
const mockActions = {};

const mockActionContext = buildHydratedMockActionContext();

// @ts-expect-error
const mockContext: ICoreContext<{}> = {
    actionContext: mockActionContext,
    request: {
        query: {
            skip: 0
        }
    }
};

const mockResources = {
    b2bRequestsTypeCreateProspect: 'Create prospect',
    b2bRequestsTypeAddUser: 'Add user',
    b2bRequestsTypeEditUser: 'Edit user',
    b2bRequestsTypeDeleteUser: 'Delete user',
    b2bRequestsTypeRequestAccountStatement: 'Request account statement',
    b2bRequestsTypeRequestInvoiceCopy: 'Request invoice copy',
    b2bRequestsTypeUnknown: 'Unknown',
    b2bRequestsStatusRequested: 'Requested',
    b2bRequestsStatusProcessed: 'Processed',
    b2bRequestsStatusError: 'Error',
    b2bRequestsNumberOfItems: '({0} items)',
    b2bRequestsNameDisplay: '{0} {1}',
    b2bRequestsPreviousText: 'previous',
    b2bRequestsNextText: 'next',
    b2bRequestsUserColumn: 'User',
    b2bRequestsStatusColumn: 'Status',
    b2bRequestsRequestDateColumn: 'Request date',
    b2bRequestsTypeColumn: 'Request type',
    b2bRequestsDescriptionColumn: 'Request details',
    b2bRequestsNumberOfItemsSingular: '{0} item',
    b2bRequestsAccountStatementDetails: 'From {0} to {1}',
    b2bRequestsInvoiceCopyDetails: 'Invoice id: {0}',
    businessUserSelectCheckBoxAriaLabelText: 'businessUserSelectCheckBoxAriaLabelText',
    columnSortAriaLabel: 'Sort by {0}',
    sortByAscending: 'ascending',
    sortByDescending: 'descending'
};

describe('B2bRequestsStatus', () => {
    it('renders correctly', () => {
        const moduleProps: IB2bRequestsStatusProps<IB2bRequestsStatusData> = {
            ...(buildMockModuleProps(mockB2bData, mockActions, mockConfig, mockContext) as IB2bRequestsStatusProps<IB2bRequestsStatusData>)
        };

        // @ts-expect-error partial mock
        const mockProps: IB2bRequestsStatusViewProps & IB2bRequestsStatusProps<IB2bRequestsStatusResources> = {
            ...moduleProps,
            resources: mockResources,
            b2bRequestsStatus: {
                moduleProps,
                className: 'className'
            },
            heading: <div />,
            table: <div />
        };

        const component = render(<B2bRequestsStatusView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly -- empty data', () => {
        const moduleProps: IB2bRequestsStatusProps<IB2bRequestsStatusData> = {
            ...(buildMockModuleProps(mockB2bData1, mockActions, mockConfig, mockContext) as IB2bRequestsStatusProps<IB2bRequestsStatusData>)
        };

        // @ts-expect-error partial mock
        const mockProps: IB2bRequestsStatusViewProps & IB2bRequestsStatusProps<IB2bRequestsStatusResources> = {
            ...moduleProps,
            resources: mockResources,
            b2bRequestsStatus: {
                moduleProps,
                className: 'className'
            },
            heading: <div />,
            table: <div />
        };

        const component = render(<B2bRequestsStatusView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});
