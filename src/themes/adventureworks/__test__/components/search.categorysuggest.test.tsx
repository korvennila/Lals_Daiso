/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { ISearchData, ISearchProps } from '@msdyn365-commerce-modules/search';
import * as React from 'react';

import { ISearchResources } from '../../definition-extensions/search.ext.props.autogenerated';
import { CategorySuggestionsComponent } from '../../views/components/search.categorysuggest';

const moduleProps: ISearchProps<ISearchData> = buildMockModuleProps({}, {}) as ISearchProps<ISearchData>;

const mockProps = {
    Search: { moduleProps, className: 'module-class-Search' },
    AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable' },
    AutoSuggestAriaLabelText: '',
    searchText: 'test',
    AutoSuggest: { className: 'node-class-AutoSuggest' },
    KeywordSuggest: { className: 'node-class-KeywordSuggest' },
    ProductSuggest: { className: 'node-class-ProductSuggest' },
    CategorySuggest: { className: 'node-class-CategorySuggest' },
    SearchForm: { className: 'node-class-SearchForm' },
    FormWrapper: { className: 'test' },
    className: 'ms-search',
    autoSuggestClassName: 'test',
    search: React.createRef(),
    disableSubmitSearch: true,
    label: 'test',
    form: 'test',
    autosuggestKeyword: { screenReader: 'test', text: ['test'] },
    autosuggestProduct: {
        screenReader: 'test',
        title: 'test',
        items: [
            {
                text: 'test',
                price: 'test',
                thumbnail: 'test',
                LiProduct: { className: 'node-class-LiProduct' },
                AProduct: { className: 'node-class-AProduct' },
                id: 'id'
            }
        ]
    },
    autosuggestCategory: { screenReader: 'test', title: 'test', text: ['test'] },
    UlKeyword: { className: 'node-class-UlKeyword' },
    UlProduct: { className: 'node-class-UlProduct' },
    UlCategory: { className: 'node-class-UlCategory' },
    callbacks: { clearSearch: jest.fn() },
    isSearchFormExpanded: true
};

const mockPropsWithoutAutosuggestCategory = {
    Search: { moduleProps, className: 'module-class-Search' },
    AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable' },
    AutoSuggestAriaLabelText: '',
    searchText: 'test',
    className: 'ms-search',
    autoSuggestClassName: 'ms-search__autoSuggest',
    search: React.createRef(),
    disableSubmitSearch: true,
    label: 'test',
    form: 'test',
    autosuggestKeyword: { screenReader: 'test', text: ['test'] },
    autosuggestProduct: {
        screenReader: 'test',
        title: 'test',
        items: [
            {
                text: 'test',
                price: 'test',
                thumbnail: 'test',
                LiProduct: { className: 'node-class-LiProduct' },
                AProduct: { className: 'node-class-AProduct' },
                id: 'id'
            }
        ]
    },
    autosuggestCategory: undefined,
    UlKeyword: { className: 'node-class-UlKeyword' },
    UlProduct: { className: 'node-class-UlProduct' },
    UlCategory: { className: 'node-class-UlCategory' },
    callbacks: { clearSearch: jest.fn() },
    isSearchFormExpanded: true
};

// @ts-expect-error only mock partial data
const mockResources: ISearchResources = {
    noResultText: 'No Result',
    categorySuggestionHeading: 'heading'
};

describe('Search unit tests - Category Suggestions Component', () => {
    it('renders correctly', () => {
        // @ts-expect-error partial mock
        const component = CategorySuggestionsComponent(mockResources.categorySuggestionHeading, mockResources.noResultText, mockProps);
        expect(component).toMatchSnapshot();
    });

    it('render empty category heading', () => {
        mockResources.categorySuggestionHeading = '';

        // @ts-expect-error partial mock
        const component = CategorySuggestionsComponent(mockResources.categorySuggestionHeading, mockResources.noResultText, mockProps);
        expect(component).toMatchSnapshot();
    });

    it('render without auto suggestion category', () => {
        // @ts-expect-error partial mock
        const component = CategorySuggestionsComponent('headding', 'no data', mockPropsWithoutAutosuggestCategory);
        expect(component).toMatchSnapshot();
    });
});
