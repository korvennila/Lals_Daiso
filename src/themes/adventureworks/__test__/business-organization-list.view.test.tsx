/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { BusinessPartnerUser } from '@msdyn365-commerce/retail-proxy';
import {
    FormType,
    IBusinessFormItem,
    IBusinessOrganizationListData,
    IBusinessOrganizationListViewProps,
    IFormViewProps
} from '@msdyn365-commerce-modules/business-organization-list';
import { render } from 'enzyme';
import * as React from 'react';

import {
    IBusinessOrganizationListProps,
    IBusinessOrganizationListResources
} from '../definition-extensions/business-organization-list.ext.props.autogenerated';
import BusinessOrganizationListView from '../views/business-organization-list.view';

const mockUser1: BusinessPartnerUser = {
    B2BUserId: '123',
    Email: 'test@microsoft.com',
    BusinessPartnerId: '00000',
    FirstName: 'First',
    LastName: 'Last',
    StatusValue: 0
};

// @ts-expect-error partial mock
const mockResources: IBusinessOrganizationListResources = {
    businessUserAddUserButtonText: 'Add a user',
    businessUserFirstNameLabelText: 'First name',
    businessUserFirstNameMaxLength: '20',
    businessUserLastNameLabelText: 'Last name',
    businessUserLastNameMaxLength: '20',
    businessUserEmailAddressLabelText: 'Email address',
    businessUserSpendingLimitLabelText: 'Spending limit',
    businessUserSaveButtonText: 'Save',
    businessUserSaveButtonArialabel: 'Save',
    businessUserCancelButtonText: 'Cancel',
    businessUserCancelButtonArialabel: 'Cancel',
    businessUserRemoveUserButtonText: 'Yes, remove',
    businessUserRemoveUserButtonArialabel: 'Remove User',
    businessUserCancelRemoveUserButtonText: 'No',
    businessUserCancelRemoveUserButtonArialabel: 'Cancel remove User',
    businessUserEditUserFormHeadingText: 'Edit user',
    businessUserAddUserFormHeadingText: 'Add user',
    businessUserRequiredFieldMissingSummaryError: 'A required field is missing. Please fill out all required fields and try again.',
    businessUserFieldIncorrectErrorText: 'One or more fields are filled out incorrectly. Please check your entries and try again.',
    businessUserActionErrorText: 'Sorry we are unable to perform that action at this moment, please try again later.',
    businessUserPaginationPreviousButtonText: 'Previous',
    businessUserPaginationAriaLabel: 'Text for pagination aria label',
    businessUserPaginationNextButtonText: 'Next',
    businessUserEditButtonText: 'Edit',
    businessUserDeleteButtonText: 'Delete',
    businessUserActionButtonText: 'Actions',
    businessUserActiveStatusText: 'Active',
    businessUserPendingStatusText: 'Pending',
    businessUserRemovedStatusText: 'Removed',
    businessUserRemoveModalHeaderText: 'Remove a user',
    businessUserRemoveModalDescription: 'Are you sure you want to remove the user from the organization user list?',
    businessUserViewModalHeaderText: 'User details',
    businessUserViewUserButtonText: 'View details',
    businessUserEmptyListMessage: 'No users',
    businessUserLoadingMessage: 'Loading...',
    businessUserErrorGettingUsersMessage: 'Sorry we are unable to load your organization at this moment, please try again later.',
    businessUserErrorUpdatingUsersMessage: 'Sorry we are unable to edit/remove this user, please try again later.',
    businessUserAllFieldsRequiredMessage: '*All Fields are required to add a user',
    businessUserTableNameHeadingText: 'User name',
    businessUserTableEmailHeadingText: 'Email',
    businessUserTableStatusHeadingText: 'Status',
    businessUserTableSpendingLimitHeadingText: 'Spending limit',
    requestStatementButtonLabel: 'Request a statement',
    statementRequestModalHeaderLabel: 'Request a statement',
    sendToEmailLabel: 'Send to email',
    fromDateLabel: 'From',
    toDateLabel: 'To',
    submitRequestLabel: 'Submit',
    cancelLabel: 'Cancel',
    promoteToSellerActionLabel: 'Become a seller',
    requestAccountStatementActionLabel: 'Request account statement',
    requestOrganizationStatementActionLabel: 'Request organization account statement',
    userAccountStatementLabel: 'Account statement',
    fullOrganizationLabel: 'Organization account statement',
    selectedUserLabel: 'Selected user',
    businessUserSelectedUserDisplayName: '{firstName} {lastName}',
    businessUserSelectCheckBoxAriaLabelText: 'businessUserSelectCheckBoxAriaLabelText',
    columnSortAriaLabel: 'Sort by {0}',
    sortByAscending: 'ascending',
    sortByDescending: 'descending',
    asteriskAfterLabel: '{0} *',
    headingForEmptyUserOrganizationList: 'headingForEmptyUserOrganizationList'
};

const mockBusinessFormItem: IBusinessFormItem = {
    wrapper: { className: 'classnames' },
    key: 'key',
    label: <div />,
    errorMessage: <div />,
    input: <input />
};

const mockFormData: IFormViewProps = {
    modalClassName: 'modalClassName',
    FormWrapper: { className: 'classnames' },
    modalHeading: 'modalHeading',
    modalDescription: <div />,
    inputs: [],
    selectedUser: mockUser1,
    buttons: [],
    errorMessage: [],
    resources: mockResources,
    toggle: jest.fn()
};

const mockFormData1: IFormViewProps = {
    modalClassName: 'modalClassName',
    FormWrapper: { className: 'classnames' },
    modalHeading: 'modalHeading',
    modalDescription: <div />,
    inputs: [mockBusinessFormItem],
    selectedUser: undefined,
    buttons: [],
    errorMessage: [],
    resources: mockResources,
    toggle: jest.fn()
};

const mockFormData2: IFormViewProps = {
    modalClassName: 'modalClassName',
    FormWrapper: { className: 'classnames' },
    modalHeading: 'modalHeading',
    modalDescription: <div />,
    inputs: [mockBusinessFormItem],
    selectedUser: undefined,
    buttons: [<button key='first' />],
    errorMessage: [<div key='first' />],
    resources: mockResources,
    toggle: jest.fn()
};

describe('BusinessOrganizationList', () => {
    it('renders correctly -- with no user text', () => {
        const moduleProps: IBusinessOrganizationListProps<IBusinessOrganizationListData> = buildMockModuleProps(
            {},
            {}
        ) as IBusinessOrganizationListProps<IBusinessOrganizationListData>;

        // @ts-expect-error partial mock
        const mockProps: IBusinessOrganizationListViewProps & IBusinessOrganizationListProps<IBusinessOrganizationListResources> = {
            ...moduleProps,
            resources: mockResources,
            OrganizationUserList: {
                moduleProps,
                className: 'classnames'
            },
            moduleContainer: {
                className: 'moduleContainer'
            },
            heading: <div />,
            noUsersText: 'noUsersText',
            addUserButton: <button />
        };

        const component = render(<BusinessOrganizationListView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly - view from with selected user form type view', () => {
        const moduleProps: IBusinessOrganizationListProps<IBusinessOrganizationListData> = buildMockModuleProps(
            {},
            {}
        ) as IBusinessOrganizationListProps<IBusinessOrganizationListData>;

        // @ts-expect-error partial mock
        const mockProps: IBusinessOrganizationListViewProps & IBusinessOrganizationListProps<IBusinessOrganizationListResources> = {
            ...moduleProps,
            resources: mockResources,
            OrganizationUserList: {
                moduleProps,
                className: 'classnames'
            },
            moduleContainer: {
                className: 'moduleContainer'
            },
            heading: <div />,
            addUserButton: <button />,
            organizationListTable: <table />,
            form: mockFormData,
            formType: FormType.View,
            toggleModal: jest.fn()
        };

        const component = render(<BusinessOrganizationListView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly - view from with selected user form type Add', () => {
        const moduleProps: IBusinessOrganizationListProps<IBusinessOrganizationListData> = buildMockModuleProps(
            {},
            {}
        ) as IBusinessOrganizationListProps<IBusinessOrganizationListData>;

        // @ts-expect-error partial mock
        const mockProps: IBusinessOrganizationListViewProps & IBusinessOrganizationListProps<IBusinessOrganizationListResources> = {
            ...moduleProps,
            resources: mockResources,
            OrganizationUserList: {
                moduleProps,
                className: 'classnames'
            },
            moduleContainer: {
                className: 'moduleContainer'
            },
            heading: <div />,
            addUserButton: <button />,
            organizationListTable: <table />,
            form: mockFormData1,
            formType: FormType.Add,
            toggleModal: jest.fn()
        };

        const component = render(<BusinessOrganizationListView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly - view from with selected user form type Edit', () => {
        const moduleProps: IBusinessOrganizationListProps<IBusinessOrganizationListData> = buildMockModuleProps(
            {},
            {}
        ) as IBusinessOrganizationListProps<IBusinessOrganizationListData>;

        // @ts-expect-error partial mock
        const mockProps: IBusinessOrganizationListViewProps & IBusinessOrganizationListProps<IBusinessOrganizationListResources> = {
            ...moduleProps,
            resources: mockResources,
            OrganizationUserList: {
                moduleProps,
                className: 'classnames'
            },
            moduleContainer: {
                className: 'moduleContainer'
            },
            heading: <div />,
            addUserButton: <button />,
            organizationListTable: <table />,
            form: mockFormData2,
            formType: FormType.Edit,
            toggleModal: jest.fn()
        };

        const component = render(<BusinessOrganizationListView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});
