/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { ISearchData, ISearchProps, ISearchViewProps } from '@msdyn365-commerce-modules/search';
import { mount, render } from 'enzyme';
import * as React from 'react';

import { ISearchResources } from '../definition-extensions/search.ext.props.autogenerated';
import SearchView from '../views/search.view';

const moduleProps: ISearchProps<ISearchData> = buildMockModuleProps({}, {}) as ISearchProps<ISearchData>;

const allModuleProps: ISearchViewProps & ISearchProps<ISearchData> = buildMockModuleProps({}, {}) as ISearchViewProps &
    ISearchProps<ISearchData>;

// @ts-expect-error only mock partial data
const mockResourcesWithSearchSuggestionHeading: ISearchResources = {
    searchtext: 'Search',
    searchLabelArialLabel: 'Search',
    cancelBtnAriaLabel: 'Cancel',
    searchBtnAriaLabel: 'Search',
    submitBtnAriaLabel: 'test',
    autoSuggestFoundMessage: 'test',
    noAutoSuggestionMessage: 'test',
    productSuggestionHeading: 'test',
    searchSuggestionHeading: '',
    keywordsHeading: 'Keywords',
    noResultText: 'No Result',
    clearSearchButtonText: 'Clear',
    noResultContentHeadingText: 'Try a different keyword',
    noResultContentParagraphText: 'No products found for the keyword entered.',
    emptyMobileSearchTextHeading: 'Search',
    emptyMobileSearchText: 'Start typing to search for product.'
};

// @ts-expect-error only mock partial data
const mockResourcesWithoutSearchSuggestionHeading: ISearchResources = {
    searchtext: 'Search',
    searchLabelArialLabel: 'Search',
    cancelBtnAriaLabel: 'Cancel',
    searchBtnAriaLabel: 'Search',
    submitBtnAriaLabel: 'test',
    autoSuggestFoundMessage: 'test',
    noAutoSuggestionMessage: 'test',
    productSuggestionHeading: 'test',
    searchSuggestionHeading: 'search',
    keywordsHeading: 'Keywords',
    noResultText: 'No Result',
    clearSearchButtonText: 'Clear',
    noResultContentHeadingText: 'Try a different keyword',
    noResultContentParagraphText: 'No products found for the keyword entered.',
    emptyMobileSearchTextHeading: 'Search',
    emptyMobileSearchText: 'Start typing to search for product.'
};

const mockProps = {
    Search: { moduleProps, className: 'module-class-Search' },
    AutoSuggestAriaLabel: { className: 'node-class-AutoSuggestAriaLable' },
    AutoSuggestAriaLabelText: '',
    searchText: 'test',
    AutoSuggest: { className: 'node-class-AutoSuggest' },
    KeywordSuggest: { className: 'node-class-KeywordSuggest' },
    ProductSuggest: { className: 'node-class-ProductSuggest' },
    CategorySuggest: { className: 'node-class-CategorySuggest' },
    SearchForm: { className: 'node-class-SearchForm' },
    FormWrapper: { className: 'node-class-FormWrapper' },
    className: 'ms-search',
    autoSuggestClassName: 'ms-search__autoSuggest',
    search: React.createRef(),
    disableSubmitSearch: true,
    label: '{LabelComponent}',
    form: {
        input: <input value='txt' ref={jest.fn()} />,
        submitBtn: <button />,
        cancelBtn: <button />
    },
    autosuggestKeyword: { screenReader: '{screenReader}', text: ['{keywordText}'] },
    autosuggestProduct: {
        screenReader: '{screenReader}',
        title: '{productTitle}',
        items: [
            {
                text: '{productText}',
                price: '{productPrice}',
                thumbnail: '{productThumbnail}',
                LiProduct: { className: 'node-class-LiProduct' },
                AProduct: { className: 'node-class-AProduct' },
                id: 'id'
            }
        ]
    },
    autosuggestCategory: { screenReader: '{screenReader}', title: '{categoryTitle}', text: ['{categoryText}'] },
    UlKeyword: { className: 'node-class-UlKeyword' },
    UlProduct: { className: 'node-class-UlProduct' },
    UlCategory: { className: 'node-class-UlCategory' },
    callbacks: { clearSearch: jest.fn(), handleCancelSearchChange: jest.fn(), handleCancelSearchFocused: jest.fn() },
    isSearchFormExpanded: true
};
describe('Search unit tests - View', () => {
    it('renders correctly with search suggestion heading', () => {
        allModuleProps.Search = { moduleProps, className: 'module-class-Search' };
        allModuleProps.AutoSuggestAriaLabel = mockProps.AutoSuggestAriaLabel;
        allModuleProps.AutoSuggestAriaLabelText = mockProps.AutoSuggestAriaLabelText;
        allModuleProps.searchText = mockProps.searchText;
        allModuleProps.AutoSuggest = mockProps.AutoSuggest;
        allModuleProps.KeywordSuggest = mockProps.KeywordSuggest;
        allModuleProps.ProductSuggest = mockProps.ProductSuggest;
        allModuleProps.UlKeyword = mockProps.UlKeyword;
        allModuleProps.UlProduct = mockProps.UlProduct;
        allModuleProps.form = mockProps.form;
        allModuleProps.autosuggestKeyword = mockProps.autosuggestKeyword;
        allModuleProps.autosuggestProduct = mockProps.autosuggestProduct;
        allModuleProps.SearchForm = mockProps.SearchForm;
        allModuleProps.FormWrapper = mockProps.FormWrapper;
        allModuleProps.label = mockProps.label;
        allModuleProps.isSearchFormExpanded = mockProps.isSearchFormExpanded;
        allModuleProps.resources = mockResourcesWithSearchSuggestionHeading;
        allModuleProps.callbacks = mockProps.callbacks;

        // @ts-expect-error only mock partial data
        const wrapper = mount(<SearchView {...allModuleProps} />);
        wrapper.update();
        wrapper.unmount();

        // @ts-expect-error only mock partial data
        const component = render(<SearchView {...allModuleProps} />);
        expect(component).toMatchSnapshot();

        window = Object.assign(window, { innerWidth: 500 });
    });
    it('renders correctly without search suggestion heading', () => {
        allModuleProps.Search = { moduleProps, className: 'module-class-Search' };
        allModuleProps.AutoSuggestAriaLabel = mockProps.AutoSuggestAriaLabel;
        allModuleProps.AutoSuggestAriaLabelText = mockProps.AutoSuggestAriaLabelText;
        allModuleProps.searchText = mockProps.searchText;
        allModuleProps.AutoSuggest = mockProps.AutoSuggest;
        allModuleProps.KeywordSuggest = mockProps.KeywordSuggest;
        allModuleProps.ProductSuggest = mockProps.ProductSuggest;
        allModuleProps.UlKeyword = mockProps.UlKeyword;
        allModuleProps.UlProduct = mockProps.UlProduct;
        allModuleProps.form = mockProps.form;
        allModuleProps.autosuggestKeyword = mockProps.autosuggestKeyword;
        allModuleProps.autosuggestProduct = mockProps.autosuggestProduct;
        allModuleProps.SearchForm = mockProps.SearchForm;
        allModuleProps.FormWrapper = mockProps.FormWrapper;
        allModuleProps.label = mockProps.label;
        allModuleProps.isSearchFormExpanded = mockProps.isSearchFormExpanded;
        allModuleProps.resources = mockResourcesWithoutSearchSuggestionHeading;
        allModuleProps.callbacks = mockProps.callbacks;

        // @ts-expect-error only mock partial data
        const wrapper = mount(<SearchView {...allModuleProps} />);
        wrapper.update();

        const clearButton = wrapper.find('.ms-search__form-control__clear');

        try {
            clearButton.at(0).simulate('click');
            // eslint-disable-next-line no-empty
        } catch {}

        wrapper.unmount();

        // @ts-expect-error only mock partial data
        const component = render(<SearchView {...allModuleProps} />);
        expect(component).toMatchSnapshot();
    });
});
