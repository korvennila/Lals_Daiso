/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { AddToCartBehavior } from '@msdyn365-commerce/components';
import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { AsyncResult, SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { Cart, ICartData, ICartIconViewProps, ICartViewProps } from '@msdyn365-commerce-modules/cart';
import { mount, render } from 'enzyme';
import * as React from 'react';

import { ICartResources } from '../definition-extensions/cart.ext.props.autogenerated';
import { ICartIconProps as ICartIconExtensionProps, ICartIconResources } from '../definition-extensions/cart-icon.ext.props.autogenerated';
import CartIconView from '../views/cart-icon.view';

const mockContext: ICoreContext = {
    app: {
        config: {
            imageSettings: {
                viewports: {
                    xs: { q: 'w=80&h=94&m=6', w: 0, h: 0 },
                    sm: { q: 'w=148&h=174&m=6', w: 0, h: 0 },
                    lg: { q: 'w=148&h=174&m=6', w: 0, h: 0 }
                },
                lazyload: true
            },
            addToCartBehavior: AddToCartBehavior.showMiniCart
        },
        routes: {
            home: '/fedev',
            checkout: '/checkout'
        }
    },
    request: {
        // @ts-expect-error partial mock
        user: {
            isAuthenticated: true
        },

        // @ts-expect-error partial mock
        channel: {
            PickupDeliveryModeCode: '60'
        },
        app: {
            platform: {
                enableDefaultOrderQuantityLimits: 'none'
            }
        },
        gridSettings: { lg: { w: 1599 } }
    },

    // @ts-expect-error - Mocking context.
    cultureFormatter: {
        formatCurrency: jest.fn(price => `$${price}`),
        formatDate: jest.fn(date => `$${date.toLocaleString()}`)
    }
};

// @ts-expect-error partial mock
const mockResources: ICartResources & ICartIconResources = {
    totalPriceFormatString: 'totalPriceFormatString',
    continueShoppingButtonTitle: 'continueShoppingButtonTitle',
    subTotalMessage: 'subTotalMessage',
    item: 'item',
    items: 'items',
    emptyPrice: 'emptyPrice'
};

const mockCartData = {
    Quantity: 1,
    NetAmountWithoutTax: 25,
    NetPrice: 27,
    TaxAmount: 2.7,
    TotalAmount: 25,
    Id: '123',
    ChargeLines: [
        {
            ChargeCode: 'FREIGHT',
            Value: 20
        }
    ],
    CartLines: [
        {
            ItemId: 10,
            LineId: 10,
            ProductId: 10
        }
    ]
};

const mockCartState = {
    isProductAddedToCart: true,

    // @ts-expect-error
    cart: mockCartData as Cart,
    addProductToCart: jest.fn()
};

const mockEmptyCartState = {
    cart: {} as Cart,
    addProductToCart: jest.fn()
};

// @ts-expect-error partial mock
const mockData: ICartData = {
    // @ts-expect-error
    cart: {
        status: 'SUCCESS',
        result: mockCartState
    } as AsyncResult<ICartState>,
    products: ([] as unknown) as AsyncResult<SimpleProduct[]>
};

// @ts-expect-error partial mock
const mockEmptyData: ICartData = {
    // @ts-expect-error
    cart: {
        status: 'SUCCESS',
        result: mockEmptyCartState
    } as AsyncResult<ICartState>
};

// @ts-expect-error partial mock
const mockWithoutData: ICartData = {
    cart: {
        status: 'SUCCESS',
        result: undefined
    } as AsyncResult<ICartState>,
    products: ([] as unknown) as AsyncResult<SimpleProduct[]>
};

const mockSlots = {
    storeSelector: [],
    emptyCart: [],
    promoContentItem: [],
    paymentExpress: []
};

describe('Cart view unit tests - View', () => {
    it('renders correctly with 2 catline and cart mock data', () => {
        const moduleProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = buildMockModuleProps(
            {},
            {}
        ) as ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}>;
        moduleProps.resources = mockResources;
        const mockProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = {
            ...moduleProps,
            context: mockContext,
            className: 'className',
            cartIcon: 'Icon',
            data: mockData,
            slots: mockSlots,
            state: { isModalOpen: true },
            orderSummaryHeading: <div />,
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            OrderSummaryItems: { className: 'msc-invoice-summary__items' },
            cartlines: [
                {
                    storeLocation: true,
                    cartline: <div />,
                    remove: <button />,
                    hasError: false,
                    data: {
                        // @ts-expect-error partial mock
                        product: {},
                        cartline: {}
                    }
                },
                {
                    cartline: <div />,
                    remove: <button />,
                    hasError: false,
                    data: {
                        // @ts-expect-error partial mock
                        product: {},
                        cartline: {}
                    }
                }
            ],
            FlyoutContainer: { className: 'node-class-FlyoutContainer' },
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            totalPrice: '$0.00',
            checkoutAsSignInUserButton: <button />,
            checkoutAsGuestButton: <button />,
            goToCartButton: <button />,
            waitingComponent: 'Waiting',
            isCartLoading: false,
            removeItemClickHandler: jest.fn()
        };
        const component = render(<CartIconView {...mockProps} />);
        expect(component).toMatchSnapshot();

        const wrapper = mount(<CartIconView {...mockProps} />);
        const button = wrapper.find('button');
        expect(button).toBeDefined();
        button.at(0).simulate('click');
        wrapper.unmount();
    });

    it('renders correctly without catline and empty cart mock data', () => {
        const moduleProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = buildMockModuleProps(
            {},
            {},
            {},
            mockContext
        ) as ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}>;
        moduleProps.resources = mockResources;
        const mockProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = {
            ...moduleProps,
            className: 'className',
            cartIcon: 'Icon',
            data: mockEmptyData,
            slots: mockSlots,
            orderSummaryHeading: <div />,
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            OrderSummaryItems: { className: 'msc-invoice-summary__items' },
            FlyoutContainer: { className: 'node-class-FlyoutContainer' },
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            totalPrice: '$0.00',
            checkoutAsSignInUserButton: <button />,
            checkoutAsGuestButton: <button />,
            goToCartButton: <button />,
            waitingComponent: 'Waiting',
            isCartLoading: false,
            removeItemClickHandler: jest.fn()
        };
        const component = render(<CartIconView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with 1 catline and  without cart mock data', () => {
        const moduleProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = buildMockModuleProps(
            {},
            {}
        ) as ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}>;
        moduleProps.resources = mockResources;
        const mockProps: ICartViewProps & ICartIconViewProps & ICartIconExtensionProps<{}> = {
            ...moduleProps,
            className: 'className',
            cartIcon: 'Icon',
            data: mockWithoutData,
            slots: mockSlots,
            orderSummaryHeading: <div />,
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            OrderSummaryItems: { className: 'msc-invoice-summary__items' },
            cartlines: [
                {
                    cartline: <div />,
                    remove: <button />,
                    hasError: false,
                    data: {
                        // @ts-expect-error partial mock
                        product: {},
                        cartline: {}
                    }
                }
            ],
            FlyoutContainer: { className: 'node-class-FlyoutContainer' },
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            totalPrice: '$0.00',
            checkoutAsSignInUserButton: <button />,
            checkoutAsGuestButton: <button />,
            goToCartButton: <button />,
            waitingComponent: 'Waiting',
            isCartLoading: false,
            removeItemClickHandler: jest.fn()
        };
        const component = render(<CartIconView {...mockProps} />);
        expect(component).toMatchSnapshot();

        const result = mount(<CartIconView {...mockProps} />);
        const cartIconView = result.instance() as CartIconView;
        cartIconView.setState({
            isModalOpen: false
        });
        cartIconView.forceUpdate();
        cartIconView.componentWillUnmount();
        result.unmount();
    });
});
