/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { buildMockModuleProps, ICoreContext } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { ICartlinesViewProps, ICartViewProps } from '@msdyn365-commerce-modules/cart';
import { IInvoiceSummaryLines } from '@msdyn365-commerce-modules/invoice-payment-summary';
import { mount, render } from 'enzyme';
import * as React from 'react';

import { ICartProps as ICartExtensionProps, ICartResources } from '../definition-extensions/cart.ext.props.autogenerated';
import CartView from '../views/cart.view';

const mockFunction = jest.fn();
const cartLinesGroup: ICartlinesViewProps[][] = [
    [
        {
            cartline: <div />,
            remove: <div />,
            addToWishlist: undefined,
            addToOrderTemplate: undefined,
            pickUpInStore: {
                callbacks: {
                    toggleBopis: mockFunction
                },

                // @ts-expect-error
                shippingMethod: <div />,
                isBopisSelected: true,
                ContainerProps: {
                    className: 'msc-cart-line__bopis'
                }
            },
            data: {
                cartline: {
                    DeliveryMode: '1'
                }
            }
        }
    ]
];
const mockResources = {
    emptyCartText: 'foo',
    pickUpText: 'foo',
    shippingText: 'foo',
    emailshippingText: 'foo',
    outOfStockErrorMessage: 'No'
} as ICartResources;

const mockContext = {
    actionContext: {
        requestContext: {
            user: {
                isAuthenticated: true
            },

            channel: {}
        }
    },
    telemetry: {
        error: jest.fn()
    }
};
const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
const mockInvoiceSummaryLines: IInvoiceSummaryLines = {
    invoices: <div />,
    giftCard: <div />,
    loyalty: <div />,
    orderTotal: <div />
};
const mockOrderSummaryLineitems = {
    subtotal: <span />,
    shipping: <span />,
    tax: <span />,
    orderTotal: <span />,
    totalDiscounts: <span />
};

// @ts-expect-error partial mock
const mockProps: ICartViewProps & ICartExtensionProps<{}> = {
    ...moduleProps,
    context: (mockContext as unknown) as ICoreContext,
    resources: mockResources,
    className: 'className',
    title: '<h1>Cart</h1>',
    storeSelector: '{storeSelector}',
    OrderSummaryErrors: {
        Wrapper: { className: 'node-class-Wrapper' },
        header: '{header}',
        errors: ['{}', '{}']
    },
    cartlines: [
        {
            cartline: '<div>foo</div>',
            remove: <button />,
            pickUpInStore: {
                callbacks: {
                    toggleBopis: jest.fn
                },
                isBopisSelected: false,
                ContainerProps: {
                    className: 'msc-cart-line__bopis'
                }
            },
            addToWishlist: undefined,
            addToOrderTemplate: undefined
        },
        {
            cartline: '<div>foo</div>',
            remove: <button />,
            pickUpInStore: {
                callbacks: {
                    toggleBopis: jest.fn
                },
                defaultComponent: <div />,
                isBopisSelected: false,
                ContainerProps: {
                    className: 'msc-cart-line__bopis'
                }
            },
            addToWishlist: undefined,
            addToOrderTemplate: undefined
        }
    ],
    orderSummaryHeading: <div />,
    CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
    OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
    checkoutAsSignInUserButton: '<button>button</button>',
    checkoutAsGuestButton: '<button>button</button>',
    backToShoppingButton: '<button>button</button>',
    orderSummaryLineitems: mockOrderSummaryLineitems,
    invoiceSummaryLineitems: mockInvoiceSummaryLines,
    promotionOptions: {
        promotionMessageWrapper: {
            className: 'msc-cart__promotion'
        },
        promotionMessage: (
            <>
                <span className='msi-promotion-icon' />
                <span />
            </>
        ),
        promotionSeeAllLink: <div />,
        promotionDialog: <div />
    },
    promoCode: <p />
};

describe('Cart view unit tests - View', () => {
    it('renders correctly _renderGroupBOPISBlock', () => {
        mockProps.orderSummaryLineitems = mockOrderSummaryLineitems;
        mockProps.invoiceSummaryLineitems = mockInvoiceSummaryLines;
        mockProps.cartLoadingStatus = '';
        mockProps.multiplePickUpEnabled = true;
        mockProps.cartLinesGroup = cartLinesGroup;
        mockProps.cartlines = [
            {
                error: '11',
                cartline: '<div>foo</div>',
                remove: <button />,
                pickUpInStore: {
                    callbacks: {
                        toggleBopis: jest.fn
                    },
                    isBopisSelected: false,
                    ContainerProps: {
                        className: 'msc-cart-line__bopis'
                    }
                },
                addToWishlist: undefined,
                addToOrderTemplate: undefined,
                data: {
                    cartline: {
                        DeliveryMode: '1'
                    }
                }
            },
            {
                data: {
                    cartline: {
                        DeliveryMode: '160'
                    }
                },
                cartline: <div />,
                remove: <button />,
                pickUpInStore: {
                    callbacks: {
                        toggleBopis: jest.fn
                    },
                    defaultComponent: <div />,
                    isBopisSelected: false,
                    ContainerProps: {
                        className: 'msc-cart-line__bopis'
                    }
                },
                addToWishlist: <div />,
                addToOrderTemplate: <div />
            },
            {
                error: 'No',
                cartline: '<div>foo</div>',
                remove: <button />,
                pickUpInStore: {
                    callbacks: {
                        toggleBopis: jest.fn
                    },
                    defaultComponent: <div />,
                    isBopisSelected: true,
                    ContainerProps: {
                        className: 'msc-cart-line__bopis'
                    }
                },
                addToWishlist: undefined,
                addToOrderTemplate: undefined
            },
            {
                cartline: '<div>foo</div>',
                remove: <button />,
                pickUpInStore: {
                    callbacks: {
                        toggleBopis: jest.fn
                    },
                    defaultComponent: <div />,
                    isBopisSelected: true,
                    ContainerProps: {
                        className: 'msc-cart-line__bopis'
                    }
                },
                addToWishlist: <div />,
                addToOrderTemplate: <div />
            }
        ];
        const component = mount(<CartView {...mockProps} />);
        component
            .find('button')
            .first()
            .simulate('click');
        component
            .find('.msc-cart-line__remove-item')
            .at(3)
            .simulate('click');
        expect(mockFunction).toHaveBeenCalled();
    });

    it('renders correctly with all attributes', () => {
        mockProps.multiplePickUpEnabled = true;
        mockProps.cart = { totalItemsInCart: 3, hasInvoiceLine: true } as ICartState;
        mockProps.cartDataResult = true;
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly- orderSummaryLineitems/invoiceSummaryLineitems undefined', () => {
        mockProps.cart = { totalItemsInCart: 1, hasInvoiceLine: true } as ICartState;
        mockProps.orderSummaryLineitems = undefined;
        mockProps.invoiceSummaryLineitems = undefined;
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly OrderSummaryErrors undefined', () => {
        mockProps.multiplePickUpEnabled = false;
        mockProps.cart = { totalItemsInCart: 3, hasInvoiceLine: false } as ICartState;
        mockProps.cartDataResult = true;
        mockProps.OrderSummaryErrors = undefined;
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly storeSelector undefined', () => {
        mockProps.storeSelector = undefined;
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with cartline error', () => {
        mockProps.cartlines = [
            {
                error: 'No',
                cartline: '<div>foo</div>',
                remove: <button />,
                pickUpInStore: {
                    callbacks: {
                        toggleBopis: jest.fn
                    },
                    isBopisSelected: false,
                    ContainerProps: {
                        className: 'msc-cart-line__bopis'
                    }
                },
                addToWishlist: undefined,
                addToOrderTemplate: undefined,
                data: {
                    cartline: {
                        DeliveryMode: '1'
                    }
                }
            }
        ];
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly cartLoadingStatus loading', () => {
        mockProps.cartLoadingStatus = 'loading';
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
});
